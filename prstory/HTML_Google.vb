Imports System.Globalization
Imports System.Net


Module HTML_Motion


    'AM Charts 
    'Daily PR Overall
    Public Sub exportMotion_PR_HTML_AMCHART(rawData As Motion_LinePRReport) ' As List(Of DTevent))
        Dim fsT As Object
        Dim fileName As String
        Dim timeIncrementer As Integer
        Dim us As New CultureInfo("en-US")
        fsT = CreateObject("ADODB.Stream")
        fsT.Type = 2 'Specify stream type - we want To save text/string data.
        fsT.Charset = "utf-8" 'Specify charset For the source text data.
        fsT.Open() 'Open the stream And write binary data To the object


        fileName = SERVER_FOLDER_PATH & "Motion" & 0 & "D.html"
        ''''''''


        fsT.Writetext("<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01//EN' 'http://www.w3.org/TR/html4/strict.dtd'>" & vbCrLf)
        fsT.Writetext("<html>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("    <head>" & vbCrLf)
        fsT.Writetext("        <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>" & vbCrLf)
        fsT.Writetext("        <title>amCharts examples</title>" & vbCrLf)
        fsT.Writetext("        <link rel='stylesheet' href='style.css' type='text/css'>" & vbCrLf)
        fsT.Writetext("        <script src='amcharts.js' type='text/javascript'></script>" & vbCrLf)
        fsT.Writetext("        <script src='serial.js' type='text/javascript'></script>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("        <script>" & vbCrLf)
        fsT.Writetext("           var chart;" & vbCrLf)
        fsT.Writetext("           var chartData = [];" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           AmCharts.ready(function () {" & vbCrLf)
        fsT.Writetext("               // generate some random data first" & vbCrLf)
        fsT.Writetext("               generateChartData();" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // SERIAL CHART" & vbCrLf)
        fsT.Writetext("               chart = new AmCharts.AmSerialChart();" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               chart.dataProvider = chartData;" & vbCrLf)
        fsT.Writetext("               chart.categoryField = 'date';" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // listen for 'dataUpdated' event (fired when chart is inited) and call zoomChart method when it happens" & vbCrLf)
        fsT.Writetext("               chart.addListener('dataUpdated', zoomChart);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // AXES" & vbCrLf)
        fsT.Writetext("               // category" & vbCrLf)
        fsT.Writetext("               var categoryAxis = chart.categoryAxis;" & vbCrLf)
        fsT.Writetext("               categoryAxis.parseDates = true; // as our data is date-based, we set parseDates to true" & vbCrLf)
        fsT.Writetext("               categoryAxis.minPeriod = 'DD'; // our data is daily, so we set minPeriod to DD" & vbCrLf)
        fsT.Writetext("               categoryAxis.minorGridEnabled = true;" & vbCrLf)
        fsT.Writetext("               categoryAxis.axisColor = '#DADADA';" & vbCrLf)
        fsT.Writetext("               categoryAxis.twoLineMode = true;" & vbCrLf)
        fsT.Writetext("               categoryAxis.dateFormats = [{" & vbCrLf)
        fsT.Writetext("                    period: 'fff'," & vbCrLf)
        fsT.Writetext("                    format: 'JJ:NN:SS'" & vbCrLf)
        fsT.Writetext("                }, {" & vbCrLf)
        fsT.Writetext("                    period: 'ss'," & vbCrLf)
        fsT.Writetext("                    format: 'JJ:NN:SS'" & vbCrLf)
        fsT.Writetext("                }, {" & vbCrLf)
        fsT.Writetext("                    period: 'mm'," & vbCrLf)
        fsT.Writetext("                    format: 'JJ:NN'" & vbCrLf)
        fsT.Writetext("                }, {" & vbCrLf)
        fsT.Writetext("                    period: 'hh'," & vbCrLf)
        fsT.Writetext("                    format: 'JJ:NN'" & vbCrLf)
        fsT.Writetext("                }, {" & vbCrLf)
        fsT.Writetext("                    period: 'DD'," & vbCrLf)
        fsT.Writetext("                    format: 'DD'" & vbCrLf)
        fsT.Writetext("                }, {" & vbCrLf)
        fsT.Writetext("                    period: 'WW'," & vbCrLf)
        fsT.Writetext("                    format: 'DD'" & vbCrLf)
        fsT.Writetext("                }, {" & vbCrLf)
        fsT.Writetext("                    period: 'MM'," & vbCrLf)
        fsT.Writetext("                    format: 'MMM'" & vbCrLf)
        fsT.Writetext("                }, {" & vbCrLf)
        fsT.Writetext("                    period: 'YYYY'," & vbCrLf)
        fsT.Writetext("                    format: 'YYYY'" & vbCrLf)
        fsT.Writetext("                }];" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // first value axis (on the left)" & vbCrLf)
        fsT.Writetext("               var valueAxis1 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis1.axisColor = '#FF6600';" & vbCrLf)
        fsT.Writetext("               valueAxis1.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               valueAxis1.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis1);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // second value axis (on the right)" & vbCrLf)
        fsT.Writetext("               var valueAxis2 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis2.position = 'right'; // this line makes the axis to appear on the right" & vbCrLf)
        fsT.Writetext("               valueAxis2.axisColor = '#FCD202';" & vbCrLf)
        fsT.Writetext("               valueAxis2.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               valueAxis2.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis2);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // third value axis (on the left, detached)" & vbCrLf)
        fsT.Writetext("               valueAxis3 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis3.offset = 50; // this line makes the axis to appear detached from plot area" & vbCrLf)
        fsT.Writetext("               valueAxis3.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               valueAxis3.axisColor = '#B0DE09';" & vbCrLf)
        fsT.Writetext("               valueAxis3.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis3);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // GRAPHS" & vbCrLf)
        fsT.Writetext("               // first graph" & vbCrLf)
        fsT.Writetext("               var graph1 = new AmCharts.AmGraph();" & vbCrLf)
        fsT.Writetext("               graph1.valueAxis = valueAxis1; // we have to indicate which value axis should be used" & vbCrLf)
        fsT.Writetext("               graph1.title = 'Unplanned DT%';" & vbCrLf)
        fsT.Writetext("               graph1.valueField = 'UnplannedDowntime';" & vbCrLf)
        fsT.Writetext("               graph1.bullet = 'round';" & vbCrLf)
        fsT.Writetext("               graph1.hideBulletsCount = 30;" & vbCrLf)
        fsT.Writetext("               graph1.bulletBorderThickness = 1;" & vbCrLf)
        fsT.Writetext("               chart.addGraph(graph1);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // second graph" & vbCrLf)
        fsT.Writetext("               var graph2 = new AmCharts.AmGraph();" & vbCrLf)
        fsT.Writetext("               graph2.valueAxis = valueAxis1; // we have to indicate which value axis should be used" & vbCrLf)
        fsT.Writetext("               graph2.title = 'Planned DT%';" & vbCrLf)
        fsT.Writetext("               graph2.valueField = 'PlannedDowntime';" & vbCrLf)
        fsT.Writetext("               graph2.bullet = 'square';" & vbCrLf)
        fsT.Writetext("               graph2.hideBulletsCount = 30;" & vbCrLf)
        fsT.Writetext("               graph2.bulletBorderThickness = 1;" & vbCrLf)
        fsT.Writetext("               chart.addGraph(graph2);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // third graph" & vbCrLf)
        fsT.Writetext("               var graph3 = new AmCharts.AmGraph();" & vbCrLf)
        fsT.Writetext("               graph3.valueAxis = valueAxis1; // we have to indicate which value axis should be used" & vbCrLf)
        fsT.Writetext("               graph3.valueField = 'PR';" & vbCrLf)
        If My.Settings.AdvancedSettings_isAvailabilityMode Then
            fsT.Writetext("               graph3.title = 'Availability%';" & vbCrLf)
        Else
            fsT.Writetext("               graph3.title = 'PR%';" & vbCrLf)
        End If


        fsT.Writetext("               graph3.bullet = 'triangleUp';" & vbCrLf)
        fsT.Writetext("               graph3.hideBulletsCount = 30;" & vbCrLf)
        fsT.Writetext("               graph3.bulletBorderThickness = 1;" & vbCrLf)
        fsT.Writetext("               chart.addGraph(graph3);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // CURSOR" & vbCrLf)
        fsT.Writetext("               var chartCursor = new AmCharts.ChartCursor();" & vbCrLf)
        fsT.Writetext("               chartCursor.cursorAlpha = 0.1;" & vbCrLf)
        fsT.Writetext("               chartCursor.fullWidth = true;" & vbCrLf)
        fsT.Writetext("               chart.addChartCursor(chartCursor);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // SCROLLBAR" & vbCrLf)
        fsT.Writetext("               var chartScrollbar = new AmCharts.ChartScrollbar();" & vbCrLf)
        fsT.Writetext("               chart.addChartScrollbar(chartScrollbar);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // LEGEND" & vbCrLf)
        fsT.Writetext("               var legend = new AmCharts.AmLegend();" & vbCrLf)
        fsT.Writetext("               legend.marginLeft = 110;" & vbCrLf)
        fsT.Writetext("               legend.useGraphSettings = true;" & vbCrLf)
        fsT.Writetext("               chart.addLegend(legend);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // WRITE" & vbCrLf)
        fsT.Writetext("               chart.write('chartdiv');" & vbCrLf)
        fsT.Writetext("           });" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           // generate some random data, quite different range" & vbCrLf)
        fsT.Writetext("           function generateChartData() {" & vbCrLf)

        fsT.Writetext("" & vbCrLf)

        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("                   chartData.push(" & vbCrLf)
        For timeIncrementer = 0 To rawData.DailyReports.Count - 1
            'fsT.Writetext("                       {date: new Date('" & rawData.getHTMLdataString_AMCHarts_DateObj(timeIncrementer) & "')" & "," & vbCrLf)
            'Format("10/24/2015 07:30:00 AM", "Short Date") & " " & Format("10/24/2015 07:30:00 AM", "Long Time")

            fsT.Writetext("                       {date: new Date('" & Format(rawData.getHTMLdataString_AMCHarts_DateObj(timeIncrementer), "MM dd yyyy") & "')" & "," & vbCrLf)
            fsT.Writetext("                       PlannedDowntime: " & (Math.Round(rawData.getHTMLdataString_AMCharts_PDT(timeIncrementer), 1)).ToString("######0.0", us) & "," & vbCrLf)
            fsT.Writetext("                       UnplannedDowntime: " & (Math.Round(rawData.getHTMLdataString_AMCharts_UPDT(timeIncrementer), 1)).ToString("######0.0", us) & "," & vbCrLf)
            fsT.Writetext("                       PR: " & (Math.Round(rawData.getHTMLdataString_AMCharts_PR(timeIncrementer), 1)).ToString("######0.0", us) & vbCrLf)
            If timeIncrementer <> rawData.DailyReports.Count - 1 Then
                fsT.Writetext("}," & vbCrLf)
            End If
        Next
        fsT.Writetext("                   });" & vbCrLf)


        'fsT.Writetext("               }" & vbCrLf)
        fsT.Writetext("           }" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           // this method is called when chart is first inited as we listen for 'dataUpdated' event" & vbCrLf)
        fsT.Writetext("           function zoomChart() {" & vbCrLf)
        fsT.Writetext("               // different zoom methods can be used - zoomToIndexes, zoomToDates, zoomToCategoryValues" & vbCrLf)
        'fsT.Writetext("               chart.zoomToIndexes(10, 20);" & vbCrLf)
        fsT.Writetext("           }" & vbCrLf)
        fsT.Writetext("        </script>" & vbCrLf)
        fsT.Writetext("    </head>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("    <body>" & vbCrLf)
        fsT.Writetext("        <div id='chartdiv' style='width: 100%; height: 400px;'></div>" & vbCrLf)
        fsT.Writetext("    </body>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("</html>" & vbCrLf)


        'fin
        Try
            fsT.SaveToFile(fileName, 2) 'Save binary data To disk
        Catch ex As Exception
        End Try
        fsT = Nothing
    End Sub

    'Daily DT & SPD for selected failuremode
    Public Sub exportMotion_PR_HTML_AMCHART_selectedfailuremode(rawData As MotionReport, isDT As Boolean, failuremodeno As Integer)
        Dim fsT As Object
        Dim fileName As String
        Dim timeIncrementer As Integer
        Dim us As New CultureInfo("en-US")
        fsT = CreateObject("ADODB.Stream")
        fsT.Type = 2 'Specify stream type - we want To save text/string data.
        fsT.Charset = "utf-8" 'Specify charset For the source text data.
        fsT.Open() 'Open the stream And write binary data To the object

        If isDT Then
            fileName = SERVER_FOLDER_PATH & "Motion" & prStoryCard.Stops & "_" & failuremodeno & "D.html"
        Else
            fileName = SERVER_FOLDER_PATH & "Motion" & prStoryCard.Stops & "_" & failuremodeno & "S.html"
        End If


        fsT.Writetext("<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01//EN' 'http://www.w3.org/TR/html4/strict.dtd'>" & vbCrLf)
        fsT.Writetext("<html>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("    <head>" & vbCrLf)
        fsT.Writetext("        <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>" & vbCrLf)
        fsT.Writetext("        <title>amCharts examples</title>" & vbCrLf)
        fsT.Writetext("        <link rel='stylesheet' href='style.css' type='text/css'>" & vbCrLf)
        fsT.Writetext("        <script src='amcharts.js' type='text/javascript'></script>" & vbCrLf)
        fsT.Writetext("        <script src='serial.js' type='text/javascript'></script>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("        <script>" & vbCrLf)
        fsT.Writetext("           var chart;" & vbCrLf)
        fsT.Writetext("           var chartData = [];" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           AmCharts.ready(function () {" & vbCrLf)
        fsT.Writetext("               // generate some random data first" & vbCrLf)
        fsT.Writetext("               generateChartData();" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // SERIAL CHART" & vbCrLf)
        fsT.Writetext("               chart = new AmCharts.AmSerialChart();" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               chart.dataProvider = chartData;" & vbCrLf)
        fsT.Writetext("               chart.categoryField = 'date';" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // listen for 'dataUpdated' event (fired when chart is inited) and call zoomChart method when it happens" & vbCrLf)
        fsT.Writetext("               chart.addListener('dataUpdated', zoomChart);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // AXES" & vbCrLf)
        fsT.Writetext("               // category" & vbCrLf)
        fsT.Writetext("               var categoryAxis = chart.categoryAxis;" & vbCrLf)
        fsT.Writetext("               categoryAxis.parseDates = true; // as our data is date-based, we set parseDates to true" & vbCrLf)
        fsT.Writetext("               categoryAxis.minPeriod = 'DD'; // our data is daily, so we set minPeriod to DD" & vbCrLf)
        fsT.Writetext("               categoryAxis.minorGridEnabled = true;" & vbCrLf)
        fsT.Writetext("               categoryAxis.axisColor = '#DADADA';" & vbCrLf)
        fsT.Writetext("               categoryAxis.twoLineMode = true;" & vbCrLf)
        fsT.Writetext("               categoryAxis.dateFormats = [{" & vbCrLf)
        fsT.Writetext("                    period: 'fff'," & vbCrLf)
        fsT.Writetext("                    format: 'JJ:NN:SS'" & vbCrLf)
        fsT.Writetext("                }, {" & vbCrLf)
        fsT.Writetext("                    period: 'ss'," & vbCrLf)
        fsT.Writetext("                    format: 'JJ:NN:SS'" & vbCrLf)
        fsT.Writetext("                }, {" & vbCrLf)
        fsT.Writetext("                    period: 'mm'," & vbCrLf)
        fsT.Writetext("                    format: 'JJ:NN'" & vbCrLf)
        fsT.Writetext("                }, {" & vbCrLf)
        fsT.Writetext("                    period: 'hh'," & vbCrLf)
        fsT.Writetext("                    format: 'JJ:NN'" & vbCrLf)
        fsT.Writetext("                }, {" & vbCrLf)
        fsT.Writetext("                    period: 'DD'," & vbCrLf)
        fsT.Writetext("                    format: 'DD'" & vbCrLf)
        fsT.Writetext("                }, {" & vbCrLf)
        fsT.Writetext("                    period: 'WW'," & vbCrLf)
        fsT.Writetext("                    format: 'DD'" & vbCrLf)
        fsT.Writetext("                }, {" & vbCrLf)
        fsT.Writetext("                    period: 'MM'," & vbCrLf)
        fsT.Writetext("                    format: 'MMM'" & vbCrLf)
        fsT.Writetext("                }, {" & vbCrLf)
        fsT.Writetext("                    period: 'YYYY'," & vbCrLf)
        fsT.Writetext("                    format: 'YYYY'" & vbCrLf)
        fsT.Writetext("                }];" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // first value axis (on the left)" & vbCrLf)
        fsT.Writetext("               var valueAxis1 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis1.axisColor = '#FF6600';" & vbCrLf)
        fsT.Writetext("               valueAxis1.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               valueAxis1.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis1);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // second value axis (on the right)" & vbCrLf)
        fsT.Writetext("               var valueAxis2 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis2.position = 'right'; // this line makes the axis to appear on the right" & vbCrLf)
        fsT.Writetext("               valueAxis2.axisColor = '#FCD202';" & vbCrLf)
        fsT.Writetext("               valueAxis2.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               valueAxis2.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis2);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // third value axis (on the left, detached)" & vbCrLf)
        fsT.Writetext("               valueAxis3 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis3.offset = 50; // this line makes the axis to appear detached from plot area" & vbCrLf)
        fsT.Writetext("               valueAxis3.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               valueAxis3.axisColor = '#B0DE09';" & vbCrLf)
        fsT.Writetext("               valueAxis3.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis3);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // GRAPHS" & vbCrLf)
        fsT.Writetext("               // first graph" & vbCrLf)
        fsT.Writetext("               var graph1 = new AmCharts.AmGraph();" & vbCrLf)
        fsT.Writetext("               graph1.valueAxis = valueAxis1; // we have to indicate which value axis should be used" & vbCrLf)
        If isDT Then
            fsT.Writetext("               graph1.title = 'Unplanned DT%';" & vbCrLf)
        Else
            fsT.Writetext("               graph1.title = 'Stops per Day';" & vbCrLf)
        End If

        fsT.Writetext("               graph1.valueField = 'UnplannedDowntime';" & vbCrLf)
        fsT.Writetext("               graph1.bullet = 'round';" & vbCrLf)
        fsT.Writetext("               graph1.hideBulletsCount = 30;" & vbCrLf)
        fsT.Writetext("               graph1.bulletBorderThickness = 1;" & vbCrLf)
        fsT.Writetext("               chart.addGraph(graph1);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)

        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // CURSOR" & vbCrLf)
        fsT.Writetext("               var chartCursor = new AmCharts.ChartCursor();" & vbCrLf)
        fsT.Writetext("               chartCursor.cursorAlpha = 0.1;" & vbCrLf)
        fsT.Writetext("               chartCursor.fullWidth = true;" & vbCrLf)
        fsT.Writetext("               chart.addChartCursor(chartCursor);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // SCROLLBAR" & vbCrLf)
        fsT.Writetext("               var chartScrollbar = new AmCharts.ChartScrollbar();" & vbCrLf)
        fsT.Writetext("               chart.addChartScrollbar(chartScrollbar);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // LEGEND" & vbCrLf)
        fsT.Writetext("               var legend = new AmCharts.AmLegend();" & vbCrLf)
        fsT.Writetext("               legend.marginLeft = 110;" & vbCrLf)
        fsT.Writetext("               legend.useGraphSettings = true;" & vbCrLf)
        fsT.Writetext("               chart.addLegend(legend);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // WRITE" & vbCrLf)
        fsT.Writetext("               chart.write('chartdiv');" & vbCrLf)
        fsT.Writetext("           });" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           // generate some random data, quite different range" & vbCrLf)
        fsT.Writetext("           function generateChartData() {" & vbCrLf)

        fsT.Writetext("" & vbCrLf)

        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("                   chartData.push(" & vbCrLf)
        For timeIncrementer = 0 To rawData.DailyReports.Count - 1
            fsT.Writetext("                       {date: new Date('" & Format(rawData.getHTMLdataString_selectedfailuremode_AMCHARTS_Date(timeIncrementer, False, failuremodeno), "MM dd yyyy") & "')" & "," & vbCrLf)
            If isDT Then
                fsT.Writetext("                       UnplannedDowntime: " & (Math.Round(rawData.getHTMLdataString_selectedfailuremode_AMCHARTS_DTpctORspd(timeIncrementer, True, failuremodeno), 1)).ToString("######0.0", us) & "," & vbCrLf)
            Else
                fsT.Writetext("                       UnplannedDowntime: " & (Math.Round(rawData.getHTMLdataString_selectedfailuremode_AMCHARTS_DTpctORspd(timeIncrementer, False, failuremodeno))).ToString("######0.0", us) & "," & vbCrLf)
            End If

            If timeIncrementer <> rawData.DailyReports.Count - 1 Then
                fsT.Writetext("}," & vbCrLf)
            End If
        Next
        fsT.Writetext("                   });" & vbCrLf)


        'fsT.Writetext("               }" & vbCrLf)
        fsT.Writetext("           }" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           // this method is called when chart is first inited as we listen for 'dataUpdated' event" & vbCrLf)
        fsT.Writetext("           function zoomChart() {" & vbCrLf)
        fsT.Writetext("               // different zoom methods can be used - zoomToIndexes, zoomToDates, zoomToCategoryValues" & vbCrLf)
        ' fsT.Writetext("               chart.zoomToIndexes(10, 20);" & vbCrLf)
        fsT.Writetext("           }" & vbCrLf)
        fsT.Writetext("        </script>" & vbCrLf)
        fsT.Writetext("    </head>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("    <body>" & vbCrLf)
        fsT.Writetext("        <div id='chartdiv' style='width: 100%; height: 400px;'></div>" & vbCrLf)
        fsT.Writetext("    </body>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("</html>" & vbCrLf)




        Try
            'fin
            fsT.SaveToFile(fileName, 2) 'Save binary data To disk
        Catch ex As Exception
        End Try
        fsT = Nothing
    End Sub


    'NEW Code to be taken to  C# AM CHarts SelectedFailuremode DT and SPD
    Public Sub exportMotion_PR_HTML_AMCHART_selectedfailuremode_Monthly(rawData As MotionReport, isDT As Boolean, failuremodeno As Integer)
        Dim fsT As Object
        Dim fileName As String
        Dim timeIncrementer As Integer
        Dim us As New CultureInfo("en-US")
        fsT = CreateObject("ADODB.Stream")
        fsT.Type = 2 'Specify stream type - we want To save text/string data.
        fsT.Charset = "utf-8" 'Specify charset For the source text data.
        fsT.Open() 'Open the stream And write binary data To the object

        If isDT Then
            fileName = SERVER_FOLDER_PATH & "Motion" & prStoryCard.Stops & "_" & failuremodeno & "D_Monthly.html"
        Else
            fileName = SERVER_FOLDER_PATH & "Motion" & prStoryCard.Stops & "_" & failuremodeno & "S_Monthly.html"
        End If


        fsT.Writetext("<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01//EN' 'http://www.w3.org/TR/html4/strict.dtd'>" & vbCrLf)
        fsT.Writetext("<html>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("    <head>" & vbCrLf)
        fsT.Writetext("        <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>" & vbCrLf)
        fsT.Writetext("        <title>amCharts examples</title>" & vbCrLf)
        fsT.Writetext("        <link rel='stylesheet' href='style.css' type='text/css'>" & vbCrLf)
        fsT.Writetext("        <script src='amcharts.js' type='text/javascript'></script>" & vbCrLf)
        fsT.Writetext("        <script src='serial.js' type='text/javascript'></script>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("        <script>" & vbCrLf)
        fsT.Writetext("           var chart;" & vbCrLf)
        fsT.Writetext("           var chartData = [];" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           AmCharts.ready(function () {" & vbCrLf)
        fsT.Writetext("               // generate some random data first" & vbCrLf)
        fsT.Writetext("               generateChartData();" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // SERIAL CHART" & vbCrLf)
        fsT.Writetext("               chart = new AmCharts.AmSerialChart();" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               chart.dataProvider = chartData;" & vbCrLf)
        fsT.Writetext("               chart.categoryField = 'date';" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // listen for 'dataUpdated' event (fired when chart is inited) and call zoomChart method when it happens" & vbCrLf)
        fsT.Writetext("               chart.addListener('dataUpdated', zoomChart);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // AXES" & vbCrLf)
        fsT.Writetext("               // category" & vbCrLf)
        fsT.Writetext("               var categoryAxis = chart.categoryAxis;" & vbCrLf)
        fsT.Writetext("               categoryAxis.parseDates = false; // as our data is date-based, we set parseDates to true" & vbCrLf)
        fsT.Writetext("               categoryAxis.minorGridEnabled = true;" & vbCrLf)
        fsT.Writetext("               categoryAxis.axisColor = '#DADADA';" & vbCrLf)
        fsT.Writetext("               categoryAxis.twoLineMode = true;" & vbCrLf)

        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // first value axis (on the left)" & vbCrLf)
        fsT.Writetext("               var valueAxis1 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis1.axisColor = '#FF6600';" & vbCrLf)
        fsT.Writetext("               valueAxis1.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               valueAxis1.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis1);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // second value axis (on the right)" & vbCrLf)
        fsT.Writetext("               var valueAxis2 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis2.position = 'right'; // this line makes the axis to appear on the right" & vbCrLf)
        fsT.Writetext("               valueAxis2.axisColor = '#FCD202';" & vbCrLf)
        fsT.Writetext("               valueAxis2.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               valueAxis2.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis2);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // third value axis (on the left, detached)" & vbCrLf)
        fsT.Writetext("               valueAxis3 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis3.offset = 50; // this line makes the axis to appear detached from plot area" & vbCrLf)
        fsT.Writetext("               valueAxis3.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               valueAxis3.axisColor = '#B0DE09';" & vbCrLf)
        fsT.Writetext("               valueAxis3.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis3);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // GRAPHS" & vbCrLf)
        fsT.Writetext("               // first graph" & vbCrLf)
        fsT.Writetext("               var graph1 = new AmCharts.AmGraph();" & vbCrLf)
        fsT.Writetext("               graph1.valueAxis = valueAxis1; // we have to indicate which value axis should be used" & vbCrLf)
        If isDT Then
            fsT.Writetext("               graph1.title = 'Unplanned DT%';" & vbCrLf)
        Else
            fsT.Writetext("               graph1.title = 'Stops per Day';" & vbCrLf)
        End If

        fsT.Writetext("               graph1.valueField = 'UnplannedDowntime';" & vbCrLf)
        fsT.Writetext("               graph1.bullet = 'round';" & vbCrLf)
        fsT.Writetext("               graph1.hideBulletsCount = 30;" & vbCrLf)
        fsT.Writetext("               graph1.bulletBorderThickness = 1;" & vbCrLf)
        fsT.Writetext("               chart.addGraph(graph1);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)

        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // CURSOR" & vbCrLf)
        fsT.Writetext("               var chartCursor = new AmCharts.ChartCursor();" & vbCrLf)
        fsT.Writetext("               chartCursor.cursorAlpha = 0.1;" & vbCrLf)
        fsT.Writetext("               chartCursor.fullWidth = true;" & vbCrLf)
        fsT.Writetext("               chart.addChartCursor(chartCursor);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // SCROLLBAR" & vbCrLf)
        fsT.Writetext("               var chartScrollbar = new AmCharts.ChartScrollbar();" & vbCrLf)
        fsT.Writetext("               chart.addChartScrollbar(chartScrollbar);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // LEGEND" & vbCrLf)
        fsT.Writetext("               var legend = new AmCharts.AmLegend();" & vbCrLf)
        fsT.Writetext("               legend.marginLeft = 110;" & vbCrLf)
        fsT.Writetext("               legend.useGraphSettings = true;" & vbCrLf)
        fsT.Writetext("               chart.addLegend(legend);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // WRITE" & vbCrLf)
        fsT.Writetext("               chart.write('chartdiv');" & vbCrLf)
        fsT.Writetext("           });" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           // generate some random data, quite different range" & vbCrLf)
        fsT.Writetext("           function generateChartData() {" & vbCrLf)

        fsT.Writetext("" & vbCrLf)

        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("                   chartData.push(" & vbCrLf)
        For timeIncrementer = 1 To 3
            fsT.Writetext("                       {date: '" & rawData.getHTMLdataString_selectedfailuremode_AMCHARTS_Date_Monthly(timeIncrementer, False, failuremodeno) & "'" & "," & vbCrLf)
            If isDT Then
                fsT.Writetext("                       UnplannedDowntime: " & Math.Round(rawData.getHTMLdataString_selectedfailuremode_AMCHARTS_DTpctORspd_Monthly(timeIncrementer, True, failuremodeno), 1).ToString("######0.0", us) & "," & vbCrLf)
            Else
                fsT.Writetext("                       UnplannedDowntime: " & Math.Round(rawData.getHTMLdataString_selectedfailuremode_AMCHARTS_DTpctORspd_Monthly(timeIncrementer, False, failuremodeno)).ToString("######0.0", us) & "," & vbCrLf)
            End If

            If timeIncrementer <> 3 Then
                fsT.Writetext("}," & vbCrLf)
            End If
        Next
        fsT.Writetext("                   });" & vbCrLf)


        'fsT.Writetext("               }" & vbCrLf)
        fsT.Writetext("           }" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           // this method is called when chart is first inited as we listen for 'dataUpdated' event" & vbCrLf)
        fsT.Writetext("           function zoomChart() {" & vbCrLf)
        fsT.Writetext("               // different zoom methods can be used - zoomToIndexes, zoomToDates, zoomToCategoryValues" & vbCrLf)
        ' fsT.Writetext("               chart.zoomToIndexes(10, 20);" & vbCrLf)
        fsT.Writetext("           }" & vbCrLf)
        fsT.Writetext("        </script>" & vbCrLf)
        fsT.Writetext("    </head>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("    <body>" & vbCrLf)
        fsT.Writetext("        <div id='chartdiv' style='width: 100%; height: 400px;'></div>" & vbCrLf)
        fsT.Writetext("    </body>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("</html>" & vbCrLf)








        'fin
        Try
            fsT.SaveToFile(fileName, 2) 'Save binary data To disk
        Catch ex As Exception
        End Try

        fsT = Nothing
    End Sub
    Public Sub exportMotion_PR_HTML_AMCHART_selectedfailuremode_Weekly(rawData As MotionReport, isDT As Boolean, failuremodeno As Integer)
        Dim fsT As Object
        Dim fileName As String
        Dim timeIncrementer As Integer
        Dim us As New CultureInfo("en-US")
        fsT = CreateObject("ADODB.Stream")
        fsT.Type = 2 'Specify stream type - we want To save text/string data.
        fsT.Charset = "utf-8" 'Specify charset For the source text data.
        fsT.Open() 'Open the stream And write binary data To the object

        If isDT Then
            fileName = SERVER_FOLDER_PATH & "Motion" & prStoryCard.Stops & "_" & failuremodeno & "D_Weekly.html"
        Else
            fileName = SERVER_FOLDER_PATH & "Motion" & prStoryCard.Stops & "_" & failuremodeno & "S_Weekly.html"
        End If


        fsT.Writetext("<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01//EN' 'http://www.w3.org/TR/html4/strict.dtd'>" & vbCrLf)
        fsT.Writetext("<html>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("    <head>" & vbCrLf)
        fsT.Writetext("        <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>" & vbCrLf)
        fsT.Writetext("        <title>amCharts examples</title>" & vbCrLf)
        fsT.Writetext("        <link rel='stylesheet' href='style.css' type='text/css'>" & vbCrLf)
        fsT.Writetext("        <script src='amcharts.js' type='text/javascript'></script>" & vbCrLf)
        fsT.Writetext("        <script src='serial.js' type='text/javascript'></script>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("        <script>" & vbCrLf)
        fsT.Writetext("           var chart;" & vbCrLf)
        fsT.Writetext("           var chartData = [];" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           AmCharts.ready(function () {" & vbCrLf)
        fsT.Writetext("               // generate some random data first" & vbCrLf)
        fsT.Writetext("               generateChartData();" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // SERIAL CHART" & vbCrLf)
        fsT.Writetext("               chart = new AmCharts.AmSerialChart();" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               chart.dataProvider = chartData;" & vbCrLf)
        fsT.Writetext("               chart.categoryField = 'date';" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // listen for 'dataUpdated' event (fired when chart is inited) and call zoomChart method when it happens" & vbCrLf)
        fsT.Writetext("               chart.addListener('dataUpdated', zoomChart);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // AXES" & vbCrLf)
        fsT.Writetext("               // category" & vbCrLf)
        fsT.Writetext("               var categoryAxis = chart.categoryAxis;" & vbCrLf)
        fsT.Writetext("               categoryAxis.parseDates = false; // as our data is date-based, we set parseDates to true" & vbCrLf)
        fsT.Writetext("               categoryAxis.minorGridEnabled = true;" & vbCrLf)
        fsT.Writetext("               categoryAxis.axisColor = '#DADADA';" & vbCrLf)
        fsT.Writetext("               categoryAxis.twoLineMode = true;" & vbCrLf)

        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // first value axis (on the left)" & vbCrLf)
        fsT.Writetext("               var valueAxis1 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis1.axisColor = '#FF6600';" & vbCrLf)
        fsT.Writetext("               valueAxis1.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               valueAxis1.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis1);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // second value axis (on the right)" & vbCrLf)
        fsT.Writetext("               var valueAxis2 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis2.position = 'right'; // this line makes the axis to appear on the right" & vbCrLf)
        fsT.Writetext("               valueAxis2.axisColor = '#FCD202';" & vbCrLf)
        fsT.Writetext("               valueAxis2.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               valueAxis2.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis2);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // third value axis (on the left, detached)" & vbCrLf)
        fsT.Writetext("               valueAxis3 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis3.offset = 50; // this line makes the axis to appear detached from plot area" & vbCrLf)
        fsT.Writetext("               valueAxis3.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               valueAxis3.axisColor = '#B0DE09';" & vbCrLf)
        fsT.Writetext("               valueAxis3.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis3);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // GRAPHS" & vbCrLf)
        fsT.Writetext("               // first graph" & vbCrLf)
        fsT.Writetext("               var graph1 = new AmCharts.AmGraph();" & vbCrLf)
        fsT.Writetext("               graph1.valueAxis = valueAxis1; // we have to indicate which value axis should be used" & vbCrLf)
        If isDT Then
            fsT.Writetext("               graph1.title = 'Unplanned DT%';" & vbCrLf)
        Else
            fsT.Writetext("               graph1.title = 'Stops per Day';" & vbCrLf)
        End If

        fsT.Writetext("               graph1.valueField = 'UnplannedDowntime';" & vbCrLf)
        fsT.Writetext("               graph1.bullet = 'round';" & vbCrLf)
        fsT.Writetext("               graph1.hideBulletsCount = 30;" & vbCrLf)
        fsT.Writetext("               graph1.bulletBorderThickness = 1;" & vbCrLf)
        fsT.Writetext("               chart.addGraph(graph1);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)

        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // CURSOR" & vbCrLf)
        fsT.Writetext("               var chartCursor = new AmCharts.ChartCursor();" & vbCrLf)
        fsT.Writetext("               chartCursor.cursorAlpha = 0.1;" & vbCrLf)
        fsT.Writetext("               chartCursor.fullWidth = true;" & vbCrLf)
        fsT.Writetext("               chart.addChartCursor(chartCursor);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // SCROLLBAR" & vbCrLf)
        fsT.Writetext("               var chartScrollbar = new AmCharts.ChartScrollbar();" & vbCrLf)
        fsT.Writetext("               chart.addChartScrollbar(chartScrollbar);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // LEGEND" & vbCrLf)
        fsT.Writetext("               var legend = new AmCharts.AmLegend();" & vbCrLf)
        fsT.Writetext("               legend.marginLeft = 110;" & vbCrLf)
        fsT.Writetext("               legend.useGraphSettings = true;" & vbCrLf)
        fsT.Writetext("               chart.addLegend(legend);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // WRITE" & vbCrLf)
        fsT.Writetext("               chart.write('chartdiv');" & vbCrLf)
        fsT.Writetext("           });" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           // generate some random data, quite different range" & vbCrLf)
        fsT.Writetext("           function generateChartData() {" & vbCrLf)

        fsT.Writetext("" & vbCrLf)

        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("                   chartData.push(" & vbCrLf)













        For timeIncrementer = ((rawData.DailyReports.Count - 1) Mod 7) To rawData.DailyReports.Count - 1 Step 1
            If timeIncrementer + 6 < 90 Then
                fsT.Writetext("                       {date: '" & rawData.getHTMLdataString_selectedfailuremode_AMCHARTS_Date_Weekly(timeIncrementer, False, failuremodeno, timeIncrementer + 6) & "'" & "," & vbCrLf)
                If isDT Then
                    fsT.Writetext("                       UnplannedDowntime: " & Math.Round(rawData.getHTMLdataString_AMCharts_DTpctorSPD_Weekly(timeIncrementer, True, failuremodeno, timeIncrementer + 6), 1).ToString("######0.0", us) & "," & vbCrLf)
                Else
                    fsT.Writetext("                       UnplannedDowntime: " & Math.Round(rawData.getHTMLdataString_AMCharts_DTpctorSPD_Weekly(timeIncrementer, False, failuremodeno, timeIncrementer + 6)).ToString("######0.0", us) & "," & vbCrLf)
                End If

                If timeIncrementer + 6 < 83 Then
                    fsT.Writetext("}," & vbCrLf)
                End If
                timeIncrementer = timeIncrementer + 6
            End If
        Next
        fsT.Writetext("                   });" & vbCrLf)


        'fsT.Writetext("               }" & vbCrLf)
        fsT.Writetext("           }" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           // this method is called when chart is first inited as we listen for 'dataUpdated' event" & vbCrLf)
        fsT.Writetext("           function zoomChart() {" & vbCrLf)
        fsT.Writetext("               // different zoom methods can be used - zoomToIndexes, zoomToDates, zoomToCategoryValues" & vbCrLf)
        ' fsT.Writetext("               chart.zoomToIndexes(10, 20);" & vbCrLf)
        fsT.Writetext("           }" & vbCrLf)
        fsT.Writetext("        </script>" & vbCrLf)
        fsT.Writetext("    </head>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("    <body>" & vbCrLf)
        fsT.Writetext("        <div id='chartdiv' style='width: 100%; height: 400px;'></div>" & vbCrLf)
        fsT.Writetext("    </body>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("</html>" & vbCrLf)


        'fin
        Try
            fsT.SaveToFile(fileName, 2) 'Save binary data To disk
        Catch ex As Exception
        End Try
        fsT = Nothing
    End Sub

    'NEW Code to be taken to  C# AM Charts Total Line PR
    Public Sub exportMotion_PR_HTML_AMCHART_Monthly(rawData As Motion_LinePRReport) ' As List(Of DTevent))
        Dim fsT As Object
        Dim fileName As String
        Dim timeIncrementer As Integer
        Dim us As New CultureInfo("en-US")
        fsT = CreateObject("ADODB.Stream")
        fsT.Type = 2 'Specify stream type - we want To save text/string data.
        fsT.Charset = "utf-8" 'Specify charset For the source text data.
        fsT.Open() 'Open the stream And write binary data To the object


        fileName = SERVER_FOLDER_PATH & "Motion" & 0 & "D_Monthly.html"
        ''''''''


        fsT.Writetext("<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01//EN' 'http://www.w3.org/TR/html4/strict.dtd'>" & vbCrLf)
        fsT.Writetext("<html>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("    <head>" & vbCrLf)
        fsT.Writetext("        <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>" & vbCrLf)
        fsT.Writetext("        <title>amCharts examples</title>" & vbCrLf)
        fsT.Writetext("        <link rel='stylesheet' href='style.css' type='text/css'>" & vbCrLf)
        fsT.Writetext("        <script src='amcharts.js' type='text/javascript'></script>" & vbCrLf)
        fsT.Writetext("        <script src='serial.js' type='text/javascript'></script>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("        <script>" & vbCrLf)
        fsT.Writetext("           var chart;" & vbCrLf)
        fsT.Writetext("           var chartData = [];" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           AmCharts.ready(function () {" & vbCrLf)
        fsT.Writetext("               // generate some random data first" & vbCrLf)
        fsT.Writetext("               generateChartData();" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // SERIAL CHART" & vbCrLf)
        fsT.Writetext("               chart = new AmCharts.AmSerialChart();" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               chart.dataProvider = chartData;" & vbCrLf)
        fsT.Writetext("               chart.categoryField = 'date';" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // listen for 'dataUpdated' event (fired when chart is inited) and call zoomChart method when it happens" & vbCrLf)
        fsT.Writetext("               chart.addListener('dataUpdated', zoomChart);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // AXES" & vbCrLf)
        fsT.Writetext("               // category" & vbCrLf)
        fsT.Writetext("               var categoryAxis = chart.categoryAxis;" & vbCrLf)
        fsT.Writetext("               categoryAxis.parseDates = false; // as our data is date-based, we set parseDates to true" & vbCrLf)
        'fsT.Writetext("               categoryAxis.minPeriod = 'DD'; // our data is daily, so we set minPeriod to DD" & vbCrLf)
        fsT.Writetext("               categoryAxis.minorGridEnabled = true;" & vbCrLf)
        fsT.Writetext("               categoryAxis.axisColor = '#DADADA';" & vbCrLf)
        fsT.Writetext("               categoryAxis.twoLineMode = true;" & vbCrLf)



        fsT.Writetext("               // first value axis (on the left)" & vbCrLf)
        fsT.Writetext("               var valueAxis1 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis1.axisColor = '#FF6600';" & vbCrLf)
        fsT.Writetext("               valueAxis1.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               valueAxis1.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis1);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // second value axis (on the right)" & vbCrLf)
        fsT.Writetext("               var valueAxis2 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis2.position = 'right'; // this line makes the axis to appear on the right" & vbCrLf)
        fsT.Writetext("               valueAxis2.axisColor = '#FCD202';" & vbCrLf)
        fsT.Writetext("               valueAxis2.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               valueAxis2.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis2);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // third value axis (on the left, detached)" & vbCrLf)
        fsT.Writetext("               valueAxis3 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis3.offset = 50; // this line makes the axis to appear detached from plot area" & vbCrLf)
        fsT.Writetext("               valueAxis3.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               valueAxis3.axisColor = '#B0DE09';" & vbCrLf)
        fsT.Writetext("               valueAxis3.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis3);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // GRAPHS" & vbCrLf)
        fsT.Writetext("               // first graph" & vbCrLf)
        fsT.Writetext("               var graph1 = new AmCharts.AmGraph();" & vbCrLf)
        fsT.Writetext("               graph1.valueAxis = valueAxis1; // we have to indicate which value axis should be used" & vbCrLf)
        fsT.Writetext("               graph1.title = 'Unplanned DT%';" & vbCrLf)
        fsT.Writetext("               graph1.valueField = 'UnplannedDowntime';" & vbCrLf)
        fsT.Writetext("               graph1.bullet = 'round';" & vbCrLf)
        fsT.Writetext("               graph1.hideBulletsCount = 30;" & vbCrLf)
        fsT.Writetext("               graph1.bulletBorderThickness = 1;" & vbCrLf)
        fsT.Writetext("               chart.addGraph(graph1);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // second graph" & vbCrLf)
        fsT.Writetext("               var graph2 = new AmCharts.AmGraph();" & vbCrLf)
        fsT.Writetext("               graph2.valueAxis = valueAxis1; // we have to indicate which value axis should be used" & vbCrLf)
        fsT.Writetext("               graph2.title = 'Planned DT%';" & vbCrLf)
        fsT.Writetext("               graph2.valueField = 'PlannedDowntime';" & vbCrLf)
        fsT.Writetext("               graph2.bullet = 'square';" & vbCrLf)
        fsT.Writetext("               graph2.hideBulletsCount = 30;" & vbCrLf)
        fsT.Writetext("               graph2.bulletBorderThickness = 1;" & vbCrLf)
        fsT.Writetext("               chart.addGraph(graph2);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // third graph" & vbCrLf)
        fsT.Writetext("               var graph3 = new AmCharts.AmGraph();" & vbCrLf)
        fsT.Writetext("               graph3.valueAxis = valueAxis1; // we have to indicate which value axis should be used" & vbCrLf)
        fsT.Writetext("               graph3.valueField = 'PR';" & vbCrLf)
        If My.Settings.AdvancedSettings_isAvailabilityMode Then
            fsT.Writetext("               graph3.title = 'Availability%';" & vbCrLf)
        Else
            fsT.Writetext("               graph3.title = 'PR%';" & vbCrLf)
        End If


        fsT.Writetext("               graph3.bullet = 'triangleUp';" & vbCrLf)
        fsT.Writetext("               graph3.hideBulletsCount = 30;" & vbCrLf)
        fsT.Writetext("               graph3.bulletBorderThickness = 1;" & vbCrLf)
        fsT.Writetext("               chart.addGraph(graph3);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // CURSOR" & vbCrLf)
        fsT.Writetext("               var chartCursor = new AmCharts.ChartCursor();" & vbCrLf)
        fsT.Writetext("               chartCursor.cursorAlpha = 0.1;" & vbCrLf)
        fsT.Writetext("               chartCursor.fullWidth = true;" & vbCrLf)
        fsT.Writetext("               chart.addChartCursor(chartCursor);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // SCROLLBAR" & vbCrLf)
        fsT.Writetext("               var chartScrollbar = new AmCharts.ChartScrollbar();" & vbCrLf)
        fsT.Writetext("               chart.addChartScrollbar(chartScrollbar);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // LEGEND" & vbCrLf)
        fsT.Writetext("               var legend = new AmCharts.AmLegend();" & vbCrLf)
        fsT.Writetext("               legend.marginLeft = 110;" & vbCrLf)
        fsT.Writetext("               legend.useGraphSettings = true;" & vbCrLf)
        fsT.Writetext("               chart.addLegend(legend);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // WRITE" & vbCrLf)
        fsT.Writetext("               chart.write('chartdiv');" & vbCrLf)
        fsT.Writetext("           });" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           // generate some random data, quite different range" & vbCrLf)
        fsT.Writetext("           function generateChartData() {" & vbCrLf)

        fsT.Writetext("" & vbCrLf)

        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("                   chartData.push(" & vbCrLf)
        For timeIncrementer = 1 To 3
            fsT.Writetext("                       {date: '" & rawData.getHTMLdataString_AMCharts_Dateobj_Monthly(timeIncrementer) & "'," & vbCrLf)
            fsT.Writetext("                       PlannedDowntime: " & Math.Round(rawData.getHTMLdataString_AMCharts_PDT_Monthly(timeIncrementer), 1).ToString("######0.0", us) & "," & vbCrLf)
            fsT.Writetext("                       UnplannedDowntime: " & Math.Round(rawData.getHTMLdataString_AMCharts_UPDT_Monthly(timeIncrementer), 1).ToString("######0.0", us) & "," & vbCrLf)

            If My.Settings.AdvancedSettings_isAvailabilityMode = False Then
                fsT.Writetext("                       PR: " & Math.Round(rawData.getHTMLdataString_AMCharts_PR_Monthly(timeIncrementer), 1).ToString("######0.0", us) & vbCrLf)
            Else
                fsT.Writetext("                       PR: " & Math.Round(100 - rawData.getHTMLdataString_AMCharts_PDT_Monthly(timeIncrementer) - rawData.getHTMLdataString_AMCharts_UPDT_Monthly(timeIncrementer), 1).ToString("######0.0", us) & vbCrLf)
            End If



            If timeIncrementer <> 3 Then
                fsT.Writetext("}," & vbCrLf)
            End If
        Next
        fsT.Writetext("                   });" & vbCrLf)


        'fsT.Writetext("               }" & vbCrLf)
        fsT.Writetext("           }" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           // this method is called when chart is first inited as we listen for 'dataUpdated' event" & vbCrLf)
        fsT.Writetext("           function zoomChart() {" & vbCrLf)
        fsT.Writetext("               // different zoom methods can be used - zoomToIndexes, zoomToDates, zoomToCategoryValues" & vbCrLf)
        'fsT.Writetext("               chart.zoomToIndexes(10, 20);" & vbCrLf)
        fsT.Writetext("           }" & vbCrLf)
        fsT.Writetext("        </script>" & vbCrLf)
        fsT.Writetext("    </head>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("    <body>" & vbCrLf)
        fsT.Writetext("        <div id='chartdiv' style='width: 100%; height: 400px;'></div>" & vbCrLf)
        fsT.Writetext("    </body>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("</html>" & vbCrLf)

        'fin
        Try
            fsT.SaveToFile(fileName, 2) 'Save binary data To disk
        Catch ex As Exception
        End Try

        fsT = Nothing
    End Sub
    Public Sub exportMotion_PR_HTML_AMCHART_Weekly(rawData As Motion_LinePRReport) ' As List(Of DTevent))
        Dim fsT As Object
        Dim fileName As String
        Dim timeIncrementer As Integer
        Dim us As New CultureInfo("en-US")
        fsT = CreateObject("ADODB.Stream")
        fsT.Type = 2 'Specify stream type - we want To save text/string data.
        fsT.Charset = "utf-8" 'Specify charset For the source text data.
        fsT.Open() 'Open the stream And write binary data To the object


        fileName = SERVER_FOLDER_PATH & "Motion" & 0 & "D_Weekly.html"
        ''''''''


        fsT.Writetext("<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01//EN' 'http://www.w3.org/TR/html4/strict.dtd'>" & vbCrLf)
        fsT.Writetext("<html>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("    <head>" & vbCrLf)
        fsT.Writetext("        <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>" & vbCrLf)
        fsT.Writetext("        <title>amCharts examples</title>" & vbCrLf)
        fsT.Writetext("        <link rel='stylesheet' href='style.css' type='text/css'>" & vbCrLf)
        fsT.Writetext("        <script src='amcharts.js' type='text/javascript'></script>" & vbCrLf)
        fsT.Writetext("        <script src='serial.js' type='text/javascript'></script>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("        <script>" & vbCrLf)
        fsT.Writetext("           var chart;" & vbCrLf)
        fsT.Writetext("           var chartData = [];" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           AmCharts.ready(function () {" & vbCrLf)
        fsT.Writetext("               // generate some random data first" & vbCrLf)
        fsT.Writetext("               generateChartData();" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // SERIAL CHART" & vbCrLf)
        fsT.Writetext("               chart = new AmCharts.AmSerialChart();" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               chart.dataProvider = chartData;" & vbCrLf)
        fsT.Writetext("               chart.categoryField = 'date';" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // listen for 'dataUpdated' event (fired when chart is inited) and call zoomChart method when it happens" & vbCrLf)
        fsT.Writetext("               chart.addListener('dataUpdated', zoomChart);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // AXES" & vbCrLf)
        fsT.Writetext("               // category" & vbCrLf)
        fsT.Writetext("               var categoryAxis = chart.categoryAxis;" & vbCrLf)
        fsT.Writetext("               categoryAxis.parseDates = false; // as our data is date-based, we set parseDates to true" & vbCrLf)
        'fsT.Writetext("               categoryAxis.minPeriod = 'DD'; // our data is daily, so we set minPeriod to DD" & vbCrLf)
        fsT.Writetext("               categoryAxis.minorGridEnabled = true;" & vbCrLf)
        fsT.Writetext("               categoryAxis.axisColor = '#DADADA';" & vbCrLf)
        fsT.Writetext("               categoryAxis.twoLineMode = true;" & vbCrLf)



        fsT.Writetext("               // first value axis (on the left)" & vbCrLf)
        fsT.Writetext("               var valueAxis1 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis1.axisColor = '#FF6600';" & vbCrLf)
        fsT.Writetext("               valueAxis1.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               valueAxis1.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis1);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // second value axis (on the right)" & vbCrLf)
        fsT.Writetext("               var valueAxis2 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis2.position = 'right'; // this line makes the axis to appear on the right" & vbCrLf)
        fsT.Writetext("               valueAxis2.axisColor = '#FCD202';" & vbCrLf)
        fsT.Writetext("               valueAxis2.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               valueAxis2.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis2);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // third value axis (on the left, detached)" & vbCrLf)
        fsT.Writetext("               valueAxis3 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis3.offset = 50; // this line makes the axis to appear detached from plot area" & vbCrLf)
        fsT.Writetext("               valueAxis3.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               valueAxis3.axisColor = '#B0DE09';" & vbCrLf)
        fsT.Writetext("               valueAxis3.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis3);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // GRAPHS" & vbCrLf)
        fsT.Writetext("               // first graph" & vbCrLf)
        fsT.Writetext("               var graph1 = new AmCharts.AmGraph();" & vbCrLf)
        fsT.Writetext("               graph1.valueAxis = valueAxis1; // we have to indicate which value axis should be used" & vbCrLf)
        fsT.Writetext("               graph1.title = 'Unplanned DT%';" & vbCrLf)
        fsT.Writetext("               graph1.valueField = 'UnplannedDowntime';" & vbCrLf)
        fsT.Writetext("               graph1.bullet = 'round';" & vbCrLf)
        fsT.Writetext("               graph1.hideBulletsCount = 30;" & vbCrLf)
        fsT.Writetext("               graph1.bulletBorderThickness = 1;" & vbCrLf)
        fsT.Writetext("               chart.addGraph(graph1);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // second graph" & vbCrLf)
        fsT.Writetext("               var graph2 = new AmCharts.AmGraph();" & vbCrLf)
        fsT.Writetext("               graph2.valueAxis = valueAxis1; // we have to indicate which value axis should be used" & vbCrLf)
        fsT.Writetext("               graph2.title = 'Planned DT%';" & vbCrLf)
        fsT.Writetext("               graph2.valueField = 'PlannedDowntime';" & vbCrLf)
        fsT.Writetext("               graph2.bullet = 'square';" & vbCrLf)
        fsT.Writetext("               graph2.hideBulletsCount = 30;" & vbCrLf)
        fsT.Writetext("               graph2.bulletBorderThickness = 1;" & vbCrLf)
        fsT.Writetext("               chart.addGraph(graph2);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // third graph" & vbCrLf)
        fsT.Writetext("               var graph3 = new AmCharts.AmGraph();" & vbCrLf)
        fsT.Writetext("               graph3.valueAxis = valueAxis1; // we have to indicate which value axis should be used" & vbCrLf)
        fsT.Writetext("               graph3.valueField = 'PR';" & vbCrLf)
        If My.Settings.AdvancedSettings_isAvailabilityMode Then
            fsT.Writetext("               graph3.title = 'Availability%';" & vbCrLf)
        Else
            fsT.Writetext("               graph3.title = 'PR%';" & vbCrLf)
        End If


        fsT.Writetext("               graph3.bullet = 'triangleUp';" & vbCrLf)
        fsT.Writetext("               graph3.hideBulletsCount = 30;" & vbCrLf)
        fsT.Writetext("               graph3.bulletBorderThickness = 1;" & vbCrLf)
        fsT.Writetext("               chart.addGraph(graph3);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // CURSOR" & vbCrLf)
        fsT.Writetext("               var chartCursor = new AmCharts.ChartCursor();" & vbCrLf)
        fsT.Writetext("               chartCursor.cursorAlpha = 0.1;" & vbCrLf)
        fsT.Writetext("               chartCursor.fullWidth = true;" & vbCrLf)
        fsT.Writetext("               chart.addChartCursor(chartCursor);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // SCROLLBAR" & vbCrLf)
        fsT.Writetext("               var chartScrollbar = new AmCharts.ChartScrollbar();" & vbCrLf)
        fsT.Writetext("               chart.addChartScrollbar(chartScrollbar);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // LEGEND" & vbCrLf)
        fsT.Writetext("               var legend = new AmCharts.AmLegend();" & vbCrLf)
        fsT.Writetext("               legend.marginLeft = 110;" & vbCrLf)
        fsT.Writetext("               legend.useGraphSettings = true;" & vbCrLf)
        fsT.Writetext("               chart.addLegend(legend);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // WRITE" & vbCrLf)
        fsT.Writetext("               chart.write('chartdiv');" & vbCrLf)
        fsT.Writetext("           });" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           // generate some random data, quite different range" & vbCrLf)
        fsT.Writetext("           function generateChartData() {" & vbCrLf)

        fsT.Writetext("" & vbCrLf)

        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("                   chartData.push(" & vbCrLf)

        For timeIncrementer = ((rawData.DailyReports.Count - 1) Mod 7) To rawData.DailyReports.Count - 1 Step 1
            If timeIncrementer + 6 < 90 Then
                fsT.Writetext("                       {date: '" & rawData.getHTMLdataString_AMCharts_Dateobj_Weekly(timeIncrementer, timeIncrementer + 6) & "'," & vbCrLf)
                fsT.Writetext("                       PlannedDowntime: " & Math.Round(rawData.getHTMLdataString_AMCharts_PDT_Weekly(timeIncrementer, timeIncrementer + 6), 1).ToString("######0.0", us) & "," & vbCrLf)
                fsT.Writetext("                       UnplannedDowntime: " & Math.Round(rawData.getHTMLdataString_AMCharts_UPDT_Weekly(timeIncrementer, timeIncrementer + 6), 1).ToString("######0.0", us) & "," & vbCrLf)

                If My.Settings.AdvancedSettings_isAvailabilityMode = False Then
                    fsT.Writetext("                       PR: " & Math.Round(rawData.getHTMLdataString_AMCharts_PR_Weekly(timeIncrementer, timeIncrementer + 6), 1).ToString("######0.0", us) & vbCrLf)
                Else
                    fsT.Writetext("                       PR: " & Math.Round(100 - rawData.getHTMLdataString_AMCharts_UPDT_Weekly(timeIncrementer, timeIncrementer + 6) - rawData.getHTMLdataString_AMCharts_PDT_Weekly(timeIncrementer, timeIncrementer + 6), 1).ToString("######0.0", us) & vbCrLf)
                End If





                If timeIncrementer + 6 < 83 Then
                    fsT.Writetext("}," & vbCrLf)
                End If
                timeIncrementer = timeIncrementer + 6
            End If
        Next
        fsT.Writetext("                   });" & vbCrLf)


        'fsT.Writetext("               }" & vbCrLf)
        fsT.Writetext("           }" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           // this method is called when chart is first inited as we listen for 'dataUpdated' event" & vbCrLf)
        fsT.Writetext("           function zoomChart() {" & vbCrLf)
        fsT.Writetext("               // different zoom methods can be used - zoomToIndexes, zoomToDates, zoomToCategoryValues" & vbCrLf)
        'fsT.Writetext("               chart.zoomToIndexes(10, 20);" & vbCrLf)
        fsT.Writetext("           }" & vbCrLf)
        fsT.Writetext("        </script>" & vbCrLf)
        fsT.Writetext("    </head>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("    <body>" & vbCrLf)
        fsT.Writetext("        <div id='chartdiv' style='width: 100%; height: 400px;'></div>" & vbCrLf)
        fsT.Writetext("    </body>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("</html>" & vbCrLf)

        'fin
        Try
            fsT.SaveToFile(fileName, 2) 'Save binary data To disk
        Catch ex As Exception
        End Try
        fsT = Nothing
    End Sub



    'NEW Code to be taken to C# AM CHarts MTBF
    Public Sub exportMotion_PR_HTML_AMCHART_selectedfailuremode_MTBF(rawData As MotionReport, isDT As Boolean, failuremodeno As Integer)
        Dim fsT As Object
        Dim fileName As String
        Dim timeIncrementer As Integer
        Dim us As New CultureInfo("en-US")
        fsT = CreateObject("ADODB.Stream")
        fsT.Type = 2 'Specify stream type - we want To save text/string data.
        fsT.Charset = "utf-8" 'Specify charset For the source text data.
        fsT.Open() 'Open the stream And write binary data To the object


        fileName = SERVER_FOLDER_PATH & "Motion" & prStoryCard.Stops & "_" & failuremodeno & "MTBF.html"




        fsT.Writetext("<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01//EN' 'http://www.w3.org/TR/html4/strict.dtd'>" & vbCrLf)
        fsT.Writetext("<html>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("    <head>" & vbCrLf)
        fsT.Writetext("        <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>" & vbCrLf)
        fsT.Writetext("        <title>amCharts examples</title>" & vbCrLf)
        fsT.Writetext("        <link rel='stylesheet' href='style.css' type='text/css'>" & vbCrLf)
        fsT.Writetext("        <script src='amcharts.js' type='text/javascript'></script>" & vbCrLf)
        fsT.Writetext("        <script src='serial.js' type='text/javascript'></script>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("        <script>" & vbCrLf)
        fsT.Writetext("           var chart;" & vbCrLf)
        fsT.Writetext("           var chartData = [];" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           AmCharts.ready(function () {" & vbCrLf)
        fsT.Writetext("               // generate some random data first" & vbCrLf)
        fsT.Writetext("               generateChartData();" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // SERIAL CHART" & vbCrLf)
        fsT.Writetext("               chart = new AmCharts.AmSerialChart();" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               chart.dataProvider = chartData;" & vbCrLf)
        fsT.Writetext("               chart.categoryField = 'date';" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // listen for 'dataUpdated' event (fired when chart is inited) and call zoomChart method when it happens" & vbCrLf)
        fsT.Writetext("               chart.addListener('dataUpdated', zoomChart);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // AXES" & vbCrLf)
        fsT.Writetext("               // category" & vbCrLf)
        fsT.Writetext("               var categoryAxis = chart.categoryAxis;" & vbCrLf)
        fsT.Writetext("               categoryAxis.parseDates = true; // as our data is date-based, we set parseDates to true" & vbCrLf)
        fsT.Writetext("               categoryAxis.minPeriod = 'DD'; // our data is daily, so we set minPeriod to DD" & vbCrLf)
        fsT.Writetext("               categoryAxis.minorGridEnabled = true;" & vbCrLf)
        fsT.Writetext("               categoryAxis.axisColor = '#DADADA';" & vbCrLf)
        fsT.Writetext("               categoryAxis.twoLineMode = true;" & vbCrLf)
        fsT.Writetext("               categoryAxis.dateFormats = [{" & vbCrLf)
        fsT.Writetext("                    period: 'fff'," & vbCrLf)
        fsT.Writetext("                    format: 'JJ:NN:SS'" & vbCrLf)
        fsT.Writetext("                }, {" & vbCrLf)
        fsT.Writetext("                    period: 'ss'," & vbCrLf)
        fsT.Writetext("                    format: 'JJ:NN:SS'" & vbCrLf)
        fsT.Writetext("                }, {" & vbCrLf)
        fsT.Writetext("                    period: 'mm'," & vbCrLf)
        fsT.Writetext("                    format: 'JJ:NN'" & vbCrLf)
        fsT.Writetext("                }, {" & vbCrLf)
        fsT.Writetext("                    period: 'hh'," & vbCrLf)
        fsT.Writetext("                    format: 'JJ:NN'" & vbCrLf)
        fsT.Writetext("                }, {" & vbCrLf)
        fsT.Writetext("                    period: 'DD'," & vbCrLf)
        fsT.Writetext("                    format: 'DD'" & vbCrLf)
        fsT.Writetext("                }, {" & vbCrLf)
        fsT.Writetext("                    period: 'WW'," & vbCrLf)
        fsT.Writetext("                    format: 'DD'" & vbCrLf)
        fsT.Writetext("                }, {" & vbCrLf)
        fsT.Writetext("                    period: 'MM'," & vbCrLf)
        fsT.Writetext("                    format: 'MMM'" & vbCrLf)
        fsT.Writetext("                }, {" & vbCrLf)
        fsT.Writetext("                    period: 'YYYY'," & vbCrLf)
        fsT.Writetext("                    format: 'YYYY'" & vbCrLf)
        fsT.Writetext("                }];" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // first value axis (on the left)" & vbCrLf)
        fsT.Writetext("               var valueAxis1 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis1.axisColor = '#FF6600';" & vbCrLf)
        fsT.Writetext("               valueAxis1.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               valueAxis1.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis1);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // second value axis (on the right)" & vbCrLf)
        fsT.Writetext("               var valueAxis2 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis2.position = 'right'; // this line makes the axis to appear on the right" & vbCrLf)
        fsT.Writetext("               valueAxis2.axisColor = '#FCD202';" & vbCrLf)
        fsT.Writetext("               valueAxis2.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               valueAxis2.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis2);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // third value axis (on the left, detached)" & vbCrLf)
        fsT.Writetext("               valueAxis3 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis3.offset = 50; // this line makes the axis to appear detached from plot area" & vbCrLf)
        fsT.Writetext("               valueAxis3.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               valueAxis3.axisColor = '#B0DE09';" & vbCrLf)
        fsT.Writetext("               valueAxis3.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis3);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // GRAPHS" & vbCrLf)
        fsT.Writetext("               // first graph" & vbCrLf)
        fsT.Writetext("               var graph1 = new AmCharts.AmGraph();" & vbCrLf)
        fsT.Writetext("               graph1.valueAxis = valueAxis1; // we have to indicate which value axis should be used" & vbCrLf)

        fsT.Writetext("               graph1.title = 'MTBF (min)';" & vbCrLf)


        fsT.Writetext("               graph1.valueField = 'MTBF';" & vbCrLf)
        fsT.Writetext("               graph1.bullet = 'round';" & vbCrLf)
        fsT.Writetext("               graph1.hideBulletsCount = 30;" & vbCrLf)
        fsT.Writetext("               graph1.bulletBorderThickness = 1;" & vbCrLf)
        fsT.Writetext("               chart.addGraph(graph1);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)

        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // CURSOR" & vbCrLf)
        fsT.Writetext("               var chartCursor = new AmCharts.ChartCursor();" & vbCrLf)
        fsT.Writetext("               chartCursor.cursorAlpha = 0.1;" & vbCrLf)
        fsT.Writetext("               chartCursor.fullWidth = true;" & vbCrLf)
        fsT.Writetext("               chart.addChartCursor(chartCursor);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // SCROLLBAR" & vbCrLf)
        fsT.Writetext("               var chartScrollbar = new AmCharts.ChartScrollbar();" & vbCrLf)
        fsT.Writetext("               chart.addChartScrollbar(chartScrollbar);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // LEGEND" & vbCrLf)
        fsT.Writetext("               var legend = new AmCharts.AmLegend();" & vbCrLf)
        fsT.Writetext("               legend.marginLeft = 110;" & vbCrLf)
        fsT.Writetext("               legend.useGraphSettings = true;" & vbCrLf)
        fsT.Writetext("               chart.addLegend(legend);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // WRITE" & vbCrLf)
        fsT.Writetext("               chart.write('chartdiv');" & vbCrLf)
        fsT.Writetext("           });" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           // generate some random data, quite different range" & vbCrLf)
        fsT.Writetext("           function generateChartData() {" & vbCrLf)

        fsT.Writetext("" & vbCrLf)

        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("                   chartData.push(" & vbCrLf)
        For timeIncrementer = 0 To rawData.DailyReports.Count - 1
            fsT.Writetext("                       {date: new Date('" & Format(rawData.getHTMLdataString_selectedfailuremode_AMCHARTS_Date(timeIncrementer, False, failuremodeno), "MM dd yyyy") & "')" & "," & vbCrLf)

            fsT.Writetext("                       MTBF: " & Math.Round(rawData.getHTMLdataString_selectedfailuremode_AMCHARTS_MTBF(timeIncrementer, True, failuremodeno), 1).ToString("######0.0", us) & "," & vbCrLf)


            If timeIncrementer <> rawData.DailyReports.Count - 1 Then
                fsT.Writetext("}," & vbCrLf)
            End If
        Next
        fsT.Writetext("                   });" & vbCrLf)


        'fsT.Writetext("               }" & vbCrLf)
        fsT.Writetext("           }" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           // this method is called when chart is first inited as we listen for 'dataUpdated' event" & vbCrLf)
        fsT.Writetext("           function zoomChart() {" & vbCrLf)
        fsT.Writetext("               // different zoom methods can be used - zoomToIndexes, zoomToDates, zoomToCategoryValues" & vbCrLf)
        ' fsT.Writetext("               chart.zoomToIndexes(10, 20);" & vbCrLf)
        fsT.Writetext("           }" & vbCrLf)
        fsT.Writetext("        </script>" & vbCrLf)
        fsT.Writetext("    </head>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("    <body>" & vbCrLf)
        fsT.Writetext("        <div id='chartdiv' style='width: 100%; height: 400px;'></div>" & vbCrLf)
        fsT.Writetext("    </body>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("</html>" & vbCrLf)






        'fin
        Try
            fsT.SaveToFile(fileName, 2) 'Save binary data To disk
        Catch ex As Exception
        End Try
        fsT = Nothing
    End Sub
    Public Sub exportMotion_PR_HTML_AMCHART_selectedfailuremode_MTBF_Monthly(rawData As MotionReport, isDT As Boolean, failuremodeno As Integer)
        Dim fsT As Object
        Dim fileName As String
        Dim timeIncrementer As Integer
        Dim us As New CultureInfo("en-US")
        fsT = CreateObject("ADODB.Stream")
        fsT.Type = 2 'Specify stream type - we want To save text/string data.
        fsT.Charset = "utf-8" 'Specify charset For the source text data.
        fsT.Open() 'Open the stream And write binary data To the object


        fileName = SERVER_FOLDER_PATH & "Motion" & prStoryCard.Stops & "_" & failuremodeno & "MTBF_Monthly.html"



        fsT.Writetext("<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01//EN' 'http://www.w3.org/TR/html4/strict.dtd'>" & vbCrLf)
        fsT.Writetext("<html>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("    <head>" & vbCrLf)
        fsT.Writetext("        <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>" & vbCrLf)
        fsT.Writetext("        <title>amCharts examples</title>" & vbCrLf)
        fsT.Writetext("        <link rel='stylesheet' href='style.css' type='text/css'>" & vbCrLf)
        fsT.Writetext("        <script src='amcharts.js' type='text/javascript'></script>" & vbCrLf)
        fsT.Writetext("        <script src='serial.js' type='text/javascript'></script>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("        <script>" & vbCrLf)
        fsT.Writetext("           var chart;" & vbCrLf)
        fsT.Writetext("           var chartData = [];" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           AmCharts.ready(function () {" & vbCrLf)
        fsT.Writetext("               // generate some random data first" & vbCrLf)
        fsT.Writetext("               generateChartData();" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // SERIAL CHART" & vbCrLf)
        fsT.Writetext("               chart = new AmCharts.AmSerialChart();" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               chart.dataProvider = chartData;" & vbCrLf)
        fsT.Writetext("               chart.categoryField = 'date';" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // listen for 'dataUpdated' event (fired when chart is inited) and call zoomChart method when it happens" & vbCrLf)
        fsT.Writetext("               chart.addListener('dataUpdated', zoomChart);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // AXES" & vbCrLf)
        fsT.Writetext("               // category" & vbCrLf)
        fsT.Writetext("               var categoryAxis = chart.categoryAxis;" & vbCrLf)
        fsT.Writetext("               categoryAxis.parseDates = false; // as our data is date-based, we set parseDates to true" & vbCrLf)
        fsT.Writetext("               categoryAxis.minorGridEnabled = true;" & vbCrLf)
        fsT.Writetext("               categoryAxis.axisColor = '#DADADA';" & vbCrLf)
        fsT.Writetext("               categoryAxis.twoLineMode = true;" & vbCrLf)

        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // first value axis (on the left)" & vbCrLf)
        fsT.Writetext("               var valueAxis1 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis1.axisColor = '#FF6600';" & vbCrLf)
        fsT.Writetext("               valueAxis1.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               valueAxis1.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis1);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // second value axis (on the right)" & vbCrLf)
        fsT.Writetext("               var valueAxis2 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis2.position = 'right'; // this line makes the axis to appear on the right" & vbCrLf)
        fsT.Writetext("               valueAxis2.axisColor = '#FCD202';" & vbCrLf)
        fsT.Writetext("               valueAxis2.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               valueAxis2.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis2);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // third value axis (on the left, detached)" & vbCrLf)
        fsT.Writetext("               valueAxis3 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis3.offset = 50; // this line makes the axis to appear detached from plot area" & vbCrLf)
        fsT.Writetext("               valueAxis3.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               valueAxis3.axisColor = '#B0DE09';" & vbCrLf)
        fsT.Writetext("               valueAxis3.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis3);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // GRAPHS" & vbCrLf)
        fsT.Writetext("               // first graph" & vbCrLf)
        fsT.Writetext("               var graph1 = new AmCharts.AmGraph();" & vbCrLf)
        fsT.Writetext("               graph1.valueAxis = valueAxis1; // we have to indicate which value axis should be used" & vbCrLf)

        fsT.Writetext("               graph1.title = 'MTBF (min)';" & vbCrLf)



        fsT.Writetext("               graph1.valueField = 'MTBF';" & vbCrLf)
        fsT.Writetext("               graph1.bullet = 'round';" & vbCrLf)
        fsT.Writetext("               graph1.hideBulletsCount = 30;" & vbCrLf)
        fsT.Writetext("               graph1.bulletBorderThickness = 1;" & vbCrLf)
        fsT.Writetext("               chart.addGraph(graph1);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)

        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // CURSOR" & vbCrLf)
        fsT.Writetext("               var chartCursor = new AmCharts.ChartCursor();" & vbCrLf)
        fsT.Writetext("               chartCursor.cursorAlpha = 0.1;" & vbCrLf)
        fsT.Writetext("               chartCursor.fullWidth = true;" & vbCrLf)
        fsT.Writetext("               chart.addChartCursor(chartCursor);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // SCROLLBAR" & vbCrLf)
        fsT.Writetext("               var chartScrollbar = new AmCharts.ChartScrollbar();" & vbCrLf)
        fsT.Writetext("               chart.addChartScrollbar(chartScrollbar);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // LEGEND" & vbCrLf)
        fsT.Writetext("               var legend = new AmCharts.AmLegend();" & vbCrLf)
        fsT.Writetext("               legend.marginLeft = 110;" & vbCrLf)
        fsT.Writetext("               legend.useGraphSettings = true;" & vbCrLf)
        fsT.Writetext("               chart.addLegend(legend);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // WRITE" & vbCrLf)
        fsT.Writetext("               chart.write('chartdiv');" & vbCrLf)
        fsT.Writetext("           });" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           // generate some random data, quite different range" & vbCrLf)
        fsT.Writetext("           function generateChartData() {" & vbCrLf)

        fsT.Writetext("" & vbCrLf)

        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("                   chartData.push(" & vbCrLf)
        For timeIncrementer = 1 To 3
            fsT.Writetext("                       {date: '" & rawData.getHTMLdataString_selectedfailuremode_AMCHARTS_Date_Monthly(timeIncrementer, False, failuremodeno) & "'" & "," & vbCrLf)

            fsT.Writetext("                      MTBF: " & Math.Round(rawData.getHTMLdataString_AMCharts_MTBF_Monthly(timeIncrementer, True, failuremodeno), 1).ToString("######0.0", us) & "," & vbCrLf)


            If timeIncrementer <> 3 Then
                fsT.Writetext("}," & vbCrLf)
            End If
        Next
        fsT.Writetext("                   });" & vbCrLf)


        'fsT.Writetext("               }" & vbCrLf)
        fsT.Writetext("           }" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           // this method is called when chart is first inited as we listen for 'dataUpdated' event" & vbCrLf)
        fsT.Writetext("           function zoomChart() {" & vbCrLf)
        fsT.Writetext("               // different zoom methods can be used - zoomToIndexes, zoomToDates, zoomToCategoryValues" & vbCrLf)
        ' fsT.Writetext("               chart.zoomToIndexes(10, 20);" & vbCrLf)
        fsT.Writetext("           }" & vbCrLf)
        fsT.Writetext("        </script>" & vbCrLf)
        fsT.Writetext("    </head>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("    <body>" & vbCrLf)
        fsT.Writetext("        <div id='chartdiv' style='width: 100%; height: 400px;'></div>" & vbCrLf)
        fsT.Writetext("    </body>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("</html>" & vbCrLf)








        'fin
        Try
            fsT.SaveToFile(fileName, 2) 'Save binary data To disk
        Catch ex As Exception
        End Try
        fsT = Nothing
    End Sub
    Public Sub exportMotion_PR_HTML_AMCHART_selectedfailuremode_MTBF_Weekly(rawData As MotionReport, isDT As Boolean, failuremodeno As Integer)
        Dim fsT As Object
        Dim fileName As String
        Dim timeIncrementer As Integer
        Dim us As New CultureInfo("en-US")
        fsT = CreateObject("ADODB.Stream")
        fsT.Type = 2 'Specify stream type - we want To save text/string data.
        fsT.Charset = "utf-8" 'Specify charset For the source text data.
        fsT.Open() 'Open the stream And write binary data To the object


        fileName = SERVER_FOLDER_PATH & "Motion" & prStoryCard.Stops & "_" & failuremodeno & "MTBF_Weekly.html"



        fsT.Writetext("<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01//EN' 'http://www.w3.org/TR/html4/strict.dtd'>" & vbCrLf)
        fsT.Writetext("<html>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("    <head>" & vbCrLf)
        fsT.Writetext("        <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>" & vbCrLf)
        fsT.Writetext("        <title>amCharts examples</title>" & vbCrLf)
        fsT.Writetext("        <link rel='stylesheet' href='style.css' type='text/css'>" & vbCrLf)
        fsT.Writetext("        <script src='amcharts.js' type='text/javascript'></script>" & vbCrLf)
        fsT.Writetext("        <script src='serial.js' type='text/javascript'></script>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("        <script>" & vbCrLf)
        fsT.Writetext("           var chart;" & vbCrLf)
        fsT.Writetext("           var chartData = [];" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           AmCharts.ready(function () {" & vbCrLf)
        fsT.Writetext("               // generate some random data first" & vbCrLf)
        fsT.Writetext("               generateChartData();" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // SERIAL CHART" & vbCrLf)
        fsT.Writetext("               chart = new AmCharts.AmSerialChart();" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               chart.dataProvider = chartData;" & vbCrLf)
        fsT.Writetext("               chart.categoryField = 'date';" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // listen for 'dataUpdated' event (fired when chart is inited) and call zoomChart method when it happens" & vbCrLf)
        fsT.Writetext("               chart.addListener('dataUpdated', zoomChart);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // AXES" & vbCrLf)
        fsT.Writetext("               // category" & vbCrLf)
        fsT.Writetext("               var categoryAxis = chart.categoryAxis;" & vbCrLf)
        fsT.Writetext("               categoryAxis.parseDates = false; // as our data is date-based, we set parseDates to true" & vbCrLf)
        fsT.Writetext("               categoryAxis.minorGridEnabled = true;" & vbCrLf)
        fsT.Writetext("               categoryAxis.axisColor = '#DADADA';" & vbCrLf)
        fsT.Writetext("               categoryAxis.twoLineMode = true;" & vbCrLf)

        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // first value axis (on the left)" & vbCrLf)
        fsT.Writetext("               var valueAxis1 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis1.axisColor = '#FF6600';" & vbCrLf)
        fsT.Writetext("               valueAxis1.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               valueAxis1.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis1);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // second value axis (on the right)" & vbCrLf)
        fsT.Writetext("               var valueAxis2 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis2.position = 'right'; // this line makes the axis to appear on the right" & vbCrLf)
        fsT.Writetext("               valueAxis2.axisColor = '#FCD202';" & vbCrLf)
        fsT.Writetext("               valueAxis2.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               valueAxis2.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis2);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // third value axis (on the left, detached)" & vbCrLf)
        fsT.Writetext("               valueAxis3 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis3.offset = 50; // this line makes the axis to appear detached from plot area" & vbCrLf)
        fsT.Writetext("               valueAxis3.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               valueAxis3.axisColor = '#B0DE09';" & vbCrLf)
        fsT.Writetext("               valueAxis3.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis3);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // GRAPHS" & vbCrLf)
        fsT.Writetext("               // first graph" & vbCrLf)
        fsT.Writetext("               var graph1 = new AmCharts.AmGraph();" & vbCrLf)
        fsT.Writetext("               graph1.valueAxis = valueAxis1; // we have to indicate which value axis should be used" & vbCrLf)

        fsT.Writetext("               graph1.title = 'MTBF (min)';" & vbCrLf)


        fsT.Writetext("               graph1.valueField = 'MTBF';" & vbCrLf)
        fsT.Writetext("               graph1.bullet = 'round';" & vbCrLf)
        fsT.Writetext("               graph1.hideBulletsCount = 30;" & vbCrLf)
        fsT.Writetext("               graph1.bulletBorderThickness = 1;" & vbCrLf)
        fsT.Writetext("               chart.addGraph(graph1);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)

        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // CURSOR" & vbCrLf)
        fsT.Writetext("               var chartCursor = new AmCharts.ChartCursor();" & vbCrLf)
        fsT.Writetext("               chartCursor.cursorAlpha = 0.1;" & vbCrLf)
        fsT.Writetext("               chartCursor.fullWidth = true;" & vbCrLf)
        fsT.Writetext("               chart.addChartCursor(chartCursor);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // SCROLLBAR" & vbCrLf)
        fsT.Writetext("               var chartScrollbar = new AmCharts.ChartScrollbar();" & vbCrLf)
        fsT.Writetext("               chart.addChartScrollbar(chartScrollbar);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // LEGEND" & vbCrLf)
        fsT.Writetext("               var legend = new AmCharts.AmLegend();" & vbCrLf)
        fsT.Writetext("               legend.marginLeft = 110;" & vbCrLf)
        fsT.Writetext("               legend.useGraphSettings = true;" & vbCrLf)
        fsT.Writetext("               chart.addLegend(legend);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // WRITE" & vbCrLf)
        fsT.Writetext("               chart.write('chartdiv');" & vbCrLf)
        fsT.Writetext("           });" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           // generate some random data, quite different range" & vbCrLf)
        fsT.Writetext("           function generateChartData() {" & vbCrLf)

        fsT.Writetext("" & vbCrLf)

        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("                   chartData.push(" & vbCrLf)


        For timeIncrementer = ((rawData.DailyReports.Count - 1) Mod 7) To rawData.DailyReports.Count - 1 Step 1
            If timeIncrementer + 6 < 90 Then
                fsT.Writetext("                       {date: '" & rawData.getHTMLdataString_selectedfailuremode_AMCHARTS_Date_Weekly(timeIncrementer, False, failuremodeno, timeIncrementer + 6) & "'" & "," & vbCrLf)

                fsT.Writetext("                       MTBF: " & Math.Round(rawData.getHTMLdataString_AMCharts_MTBF_Weekly(timeIncrementer, True, failuremodeno, timeIncrementer + 6), 1).ToString("######0.0", us) & "," & vbCrLf)

                If timeIncrementer + 6 < 83 Then
                    fsT.Writetext("}," & vbCrLf)
                End If
                timeIncrementer = timeIncrementer + 6
            End If
        Next
        fsT.Writetext("                   });" & vbCrLf)


        'fsT.Writetext("               }" & vbCrLf)
        fsT.Writetext("           }" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           // this method is called when chart is first inited as we listen for 'dataUpdated' event" & vbCrLf)
        fsT.Writetext("           function zoomChart() {" & vbCrLf)
        fsT.Writetext("               // different zoom methods can be used - zoomToIndexes, zoomToDates, zoomToCategoryValues" & vbCrLf)
        ' fsT.Writetext("               chart.zoomToIndexes(10, 20);" & vbCrLf)
        fsT.Writetext("           }" & vbCrLf)
        fsT.Writetext("        </script>" & vbCrLf)
        fsT.Writetext("    </head>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("    <body>" & vbCrLf)
        fsT.Writetext("        <div id='chartdiv' style='width: 100%; height: 400px;'></div>" & vbCrLf)
        fsT.Writetext("    </body>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("</html>" & vbCrLf)








        'fin
        Try
            fsT.SaveToFile(fileName, 2) 'Save binary data To disk
        Catch ex As Exception
        End Try
        fsT = Nothing
    End Sub


    'New Code to be taken to C# AM Charts Overall Line SPD and MTBF - Daily Monthly and Weekly
    Public Sub exportMotion_SPD_HTML_AMCHART(rawData As Motion_LinePRReport) ' As List(Of DTevent))
        Dim fsT As Object
        Dim fileName As String
        Dim timeIncrementer As Integer
        Dim us As New CultureInfo("en-US")
        fsT = CreateObject("ADODB.Stream")
        fsT.Type = 2 'Specify stream type - we want To save text/string data.
        fsT.Charset = "utf-8" 'Specify charset For the source text data.
        fsT.Open() 'Open the stream And write binary data To the object


        fileName = SERVER_FOLDER_PATH & "Motion" & 0 & "S.html"
        ''''''''


        fsT.Writetext("<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01//EN' 'http://www.w3.org/TR/html4/strict.dtd'>" & vbCrLf)
        fsT.Writetext("<html>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("    <head>" & vbCrLf)
        fsT.Writetext("        <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>" & vbCrLf)
        fsT.Writetext("        <title>amCharts examples</title>" & vbCrLf)
        fsT.Writetext("        <link rel='stylesheet' href='style.css' type='text/css'>" & vbCrLf)
        fsT.Writetext("        <script src='amcharts.js' type='text/javascript'></script>" & vbCrLf)
        fsT.Writetext("        <script src='serial.js' type='text/javascript'></script>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("        <script>" & vbCrLf)
        fsT.Writetext("           var chart;" & vbCrLf)
        fsT.Writetext("           var chartData = [];" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           AmCharts.ready(function () {" & vbCrLf)
        fsT.Writetext("               // generate some random data first" & vbCrLf)
        fsT.Writetext("               generateChartData();" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // SERIAL CHART" & vbCrLf)
        fsT.Writetext("               chart = new AmCharts.AmSerialChart();" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               chart.dataProvider = chartData;" & vbCrLf)
        fsT.Writetext("               chart.categoryField = 'date';" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // listen for 'dataUpdated' event (fired when chart is inited) and call zoomChart method when it happens" & vbCrLf)
        fsT.Writetext("               chart.addListener('dataUpdated', zoomChart);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // AXES" & vbCrLf)
        fsT.Writetext("               // category" & vbCrLf)
        fsT.Writetext("               var categoryAxis = chart.categoryAxis;" & vbCrLf)
        fsT.Writetext("               categoryAxis.parseDates = true; // as our data is date-based, we set parseDates to true" & vbCrLf)
        fsT.Writetext("               categoryAxis.minPeriod = 'DD'; // our data is daily, so we set minPeriod to DD" & vbCrLf)
        fsT.Writetext("               categoryAxis.minorGridEnabled = true;" & vbCrLf)
        fsT.Writetext("               categoryAxis.axisColor = '#DADADA';" & vbCrLf)
        fsT.Writetext("               categoryAxis.twoLineMode = true;" & vbCrLf)
        fsT.Writetext("               categoryAxis.dateFormats = [{" & vbCrLf)
        fsT.Writetext("                    period: 'fff'," & vbCrLf)
        fsT.Writetext("                    format: 'JJ:NN:SS'" & vbCrLf)
        fsT.Writetext("                }, {" & vbCrLf)
        fsT.Writetext("                    period: 'ss'," & vbCrLf)
        fsT.Writetext("                    format: 'JJ:NN:SS'" & vbCrLf)
        fsT.Writetext("                }, {" & vbCrLf)
        fsT.Writetext("                    period: 'mm'," & vbCrLf)
        fsT.Writetext("                    format: 'JJ:NN'" & vbCrLf)
        fsT.Writetext("                }, {" & vbCrLf)
        fsT.Writetext("                    period: 'hh'," & vbCrLf)
        fsT.Writetext("                    format: 'JJ:NN'" & vbCrLf)
        fsT.Writetext("                }, {" & vbCrLf)
        fsT.Writetext("                    period: 'DD'," & vbCrLf)
        fsT.Writetext("                    format: 'DD'" & vbCrLf)
        fsT.Writetext("                }, {" & vbCrLf)
        fsT.Writetext("                    period: 'WW'," & vbCrLf)
        fsT.Writetext("                    format: 'DD'" & vbCrLf)
        fsT.Writetext("                }, {" & vbCrLf)
        fsT.Writetext("                    period: 'MM'," & vbCrLf)
        fsT.Writetext("                    format: 'MMM'" & vbCrLf)
        fsT.Writetext("                }, {" & vbCrLf)
        fsT.Writetext("                    period: 'YYYY'," & vbCrLf)
        fsT.Writetext("                    format: 'YYYY'" & vbCrLf)
        fsT.Writetext("                }];" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // first value axis (on the left)" & vbCrLf)
        fsT.Writetext("               var valueAxis1 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis1.axisColor = '#FF6600';" & vbCrLf)
        fsT.Writetext("               valueAxis1.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               valueAxis1.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis1);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // second value axis (on the right)" & vbCrLf)
        fsT.Writetext("               var valueAxis2 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis2.position = 'right'; // this line makes the axis to appear on the right" & vbCrLf)
        fsT.Writetext("               valueAxis2.axisColor = '#FCD202';" & vbCrLf)
        fsT.Writetext("               valueAxis2.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               valueAxis2.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis2);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // third value axis (on the left, detached)" & vbCrLf)
        fsT.Writetext("               valueAxis3 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis3.offset = 50; // this line makes the axis to appear detached from plot area" & vbCrLf)
        fsT.Writetext("               valueAxis3.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               valueAxis3.axisColor = '#B0DE09';" & vbCrLf)
        fsT.Writetext("               valueAxis3.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis3);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // GRAPHS" & vbCrLf)
        fsT.Writetext("               // first graph" & vbCrLf)
        fsT.Writetext("               var graph1 = new AmCharts.AmGraph();" & vbCrLf)
        fsT.Writetext("               graph1.valueAxis = valueAxis1; // we have to indicate which value axis should be used" & vbCrLf)
        fsT.Writetext("               graph1.title = 'Stops per day';" & vbCrLf)
        fsT.Writetext("               graph1.valueField = 'SPD';" & vbCrLf)
        fsT.Writetext("               graph1.bullet = 'round';" & vbCrLf)
        fsT.Writetext("               graph1.hideBulletsCount = 30;" & vbCrLf)
        fsT.Writetext("               graph1.bulletBorderThickness = 1;" & vbCrLf)
        fsT.Writetext("               chart.addGraph(graph1);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)

        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // CURSOR" & vbCrLf)
        fsT.Writetext("               var chartCursor = new AmCharts.ChartCursor();" & vbCrLf)
        fsT.Writetext("               chartCursor.cursorAlpha = 0.1;" & vbCrLf)
        fsT.Writetext("               chartCursor.fullWidth = true;" & vbCrLf)
        fsT.Writetext("               chart.addChartCursor(chartCursor);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // SCROLLBAR" & vbCrLf)
        fsT.Writetext("               var chartScrollbar = new AmCharts.ChartScrollbar();" & vbCrLf)
        fsT.Writetext("               chart.addChartScrollbar(chartScrollbar);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // LEGEND" & vbCrLf)
        fsT.Writetext("               var legend = new AmCharts.AmLegend();" & vbCrLf)
        fsT.Writetext("               legend.marginLeft = 110;" & vbCrLf)
        fsT.Writetext("               legend.useGraphSettings = true;" & vbCrLf)
        fsT.Writetext("               chart.addLegend(legend);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // WRITE" & vbCrLf)
        fsT.Writetext("               chart.write('chartdiv');" & vbCrLf)
        fsT.Writetext("           });" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           // generate some random data, quite different range" & vbCrLf)
        fsT.Writetext("           function generateChartData() {" & vbCrLf)

        fsT.Writetext("" & vbCrLf)

        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("                   chartData.push(" & vbCrLf)
        For timeIncrementer = 0 To rawData.DailyReports.Count - 1
            fsT.Writetext("                       {date: new Date('" & Format(rawData.getHTMLdataString_AMCHarts_DateObj(timeIncrementer), "MM dd yyyy") & "')" & "," & vbCrLf)
            fsT.Writetext("                       SPD: " & Math.Round(rawData.getHTMLdataString_AMCharts_SPD(timeIncrementer), 1).ToString("######0.0", us) & vbCrLf)
            If timeIncrementer <> rawData.DailyReports.Count - 1 Then
                fsT.Writetext("}," & vbCrLf)
            End If
        Next
        fsT.Writetext("                   });" & vbCrLf)


        'fsT.Writetext("               }" & vbCrLf)
        fsT.Writetext("           }" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           // this method is called when chart is first inited as we listen for 'dataUpdated' event" & vbCrLf)
        fsT.Writetext("           function zoomChart() {" & vbCrLf)
        fsT.Writetext("               // different zoom methods can be used - zoomToIndexes, zoomToDates, zoomToCategoryValues" & vbCrLf)
        'fsT.Writetext("               chart.zoomToIndexes(10, 20);" & vbCrLf)
        fsT.Writetext("           }" & vbCrLf)
        fsT.Writetext("        </script>" & vbCrLf)
        fsT.Writetext("    </head>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("    <body>" & vbCrLf)
        fsT.Writetext("        <div id='chartdiv' style='width: 100%; height: 400px;'></div>" & vbCrLf)
        fsT.Writetext("    </body>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("</html>" & vbCrLf)


        'fin
        Try
            fsT.SaveToFile(fileName, 2) 'Save binary data To disk
        Catch ex As Exception
        End Try
        fsT = Nothing
    End Sub
    Public Sub exportMotion_SPD_HTML_AMCHART_Monthly(rawData As Motion_LinePRReport) ' As List(Of DTevent))
        Dim fsT As Object
        Dim fileName As String
        Dim timeIncrementer As Integer
        Dim us As New CultureInfo("en-US")
        fsT = CreateObject("ADODB.Stream")
        fsT.Type = 2 'Specify stream type - we want To save text/string data.
        fsT.Charset = "utf-8" 'Specify charset For the source text data.
        fsT.Open() 'Open the stream And write binary data To the object


        fileName = SERVER_FOLDER_PATH & "Motion" & 0 & "S_Monthly.html"
        ''''''''


        fsT.Writetext("<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01//EN' 'http://www.w3.org/TR/html4/strict.dtd'>" & vbCrLf)
        fsT.Writetext("<html>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("    <head>" & vbCrLf)
        fsT.Writetext("        <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>" & vbCrLf)
        fsT.Writetext("        <title>amCharts examples</title>" & vbCrLf)
        fsT.Writetext("        <link rel='stylesheet' href='style.css' type='text/css'>" & vbCrLf)
        fsT.Writetext("        <script src='amcharts.js' type='text/javascript'></script>" & vbCrLf)
        fsT.Writetext("        <script src='serial.js' type='text/javascript'></script>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("        <script>" & vbCrLf)
        fsT.Writetext("           var chart;" & vbCrLf)
        fsT.Writetext("           var chartData = [];" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           AmCharts.ready(function () {" & vbCrLf)
        fsT.Writetext("               // generate some random data first" & vbCrLf)
        fsT.Writetext("               generateChartData();" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // SERIAL CHART" & vbCrLf)
        fsT.Writetext("               chart = new AmCharts.AmSerialChart();" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               chart.dataProvider = chartData;" & vbCrLf)
        fsT.Writetext("               chart.categoryField = 'date';" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // listen for 'dataUpdated' event (fired when chart is inited) and call zoomChart method when it happens" & vbCrLf)
        fsT.Writetext("               chart.addListener('dataUpdated', zoomChart);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // AXES" & vbCrLf)
        fsT.Writetext("               // category" & vbCrLf)
        fsT.Writetext("               var categoryAxis = chart.categoryAxis;" & vbCrLf)
        fsT.Writetext("               categoryAxis.parseDates = false; // as our data is date-based, we set parseDates to true" & vbCrLf)
        'fsT.Writetext("               categoryAxis.minPeriod = 'DD'; // our data is daily, so we set minPeriod to DD" & vbCrLf)
        fsT.Writetext("               categoryAxis.minorGridEnabled = true;" & vbCrLf)
        fsT.Writetext("               categoryAxis.axisColor = '#DADADA';" & vbCrLf)
        fsT.Writetext("               categoryAxis.twoLineMode = true;" & vbCrLf)



        fsT.Writetext("               // first value axis (on the left)" & vbCrLf)
        fsT.Writetext("               var valueAxis1 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis1.axisColor = '#FF6600';" & vbCrLf)
        fsT.Writetext("               valueAxis1.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               valueAxis1.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis1);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // second value axis (on the right)" & vbCrLf)
        fsT.Writetext("               var valueAxis2 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis2.position = 'right'; // this line makes the axis to appear on the right" & vbCrLf)
        fsT.Writetext("               valueAxis2.axisColor = '#FCD202';" & vbCrLf)
        fsT.Writetext("               valueAxis2.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               valueAxis2.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis2);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // third value axis (on the left, detached)" & vbCrLf)
        fsT.Writetext("               valueAxis3 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis3.offset = 50; // this line makes the axis to appear detached from plot area" & vbCrLf)
        fsT.Writetext("               valueAxis3.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               valueAxis3.axisColor = '#B0DE09';" & vbCrLf)
        fsT.Writetext("               valueAxis3.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis3);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // GRAPHS" & vbCrLf)
        fsT.Writetext("               // first graph" & vbCrLf)
        fsT.Writetext("               var graph1 = new AmCharts.AmGraph();" & vbCrLf)
        fsT.Writetext("               graph1.valueAxis = valueAxis1; // we have to indicate which value axis should be used" & vbCrLf)
        fsT.Writetext("               graph1.title = 'Stops per day';" & vbCrLf)
        fsT.Writetext("               graph1.valueField = 'SPD';" & vbCrLf)
        fsT.Writetext("               graph1.bullet = 'round';" & vbCrLf)
        fsT.Writetext("               graph1.hideBulletsCount = 30;" & vbCrLf)
        fsT.Writetext("               graph1.bulletBorderThickness = 1;" & vbCrLf)
        fsT.Writetext("               chart.addGraph(graph1);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)

        fsT.Writetext("               // CURSOR" & vbCrLf)
        fsT.Writetext("               var chartCursor = new AmCharts.ChartCursor();" & vbCrLf)
        fsT.Writetext("               chartCursor.cursorAlpha = 0.1;" & vbCrLf)
        fsT.Writetext("               chartCursor.fullWidth = true;" & vbCrLf)
        fsT.Writetext("               chart.addChartCursor(chartCursor);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // SCROLLBAR" & vbCrLf)
        fsT.Writetext("               var chartScrollbar = new AmCharts.ChartScrollbar();" & vbCrLf)
        fsT.Writetext("               chart.addChartScrollbar(chartScrollbar);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // LEGEND" & vbCrLf)
        fsT.Writetext("               var legend = new AmCharts.AmLegend();" & vbCrLf)
        fsT.Writetext("               legend.marginLeft = 110;" & vbCrLf)
        fsT.Writetext("               legend.useGraphSettings = true;" & vbCrLf)
        fsT.Writetext("               chart.addLegend(legend);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // WRITE" & vbCrLf)
        fsT.Writetext("               chart.write('chartdiv');" & vbCrLf)
        fsT.Writetext("           });" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           // generate some random data, quite different range" & vbCrLf)
        fsT.Writetext("           function generateChartData() {" & vbCrLf)

        fsT.Writetext("" & vbCrLf)

        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("                   chartData.push(" & vbCrLf)
        For timeIncrementer = 1 To 3
            fsT.Writetext("                       {date: '" & rawData.getHTMLdataString_AMCharts_Dateobj_Monthly(timeIncrementer) & "'," & vbCrLf)
            fsT.Writetext("                       SPD: " & Math.Round(rawData.getHTMLdataString_AMCharts_SPD_Monthly(timeIncrementer), 1).ToString("######0.0", us) & vbCrLf)
            If timeIncrementer <> 3 Then
                fsT.Writetext("}," & vbCrLf)
            End If
        Next
        fsT.Writetext("                   });" & vbCrLf)


        'fsT.Writetext("               }" & vbCrLf)
        fsT.Writetext("           }" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           // this method is called when chart is first inited as we listen for 'dataUpdated' event" & vbCrLf)
        fsT.Writetext("           function zoomChart() {" & vbCrLf)
        fsT.Writetext("               // different zoom methods can be used - zoomToIndexes, zoomToDates, zoomToCategoryValues" & vbCrLf)
        'fsT.Writetext("               chart.zoomToIndexes(10, 20);" & vbCrLf)
        fsT.Writetext("           }" & vbCrLf)
        fsT.Writetext("        </script>" & vbCrLf)
        fsT.Writetext("    </head>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("    <body>" & vbCrLf)
        fsT.Writetext("        <div id='chartdiv' style='width: 100%; height: 400px;'></div>" & vbCrLf)
        fsT.Writetext("    </body>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("</html>" & vbCrLf)

        'fin
        Try
            fsT.SaveToFile(fileName, 2) 'Save binary data To disk
        Catch ex As Exception
        End Try
        fsT = Nothing
    End Sub
    Public Sub exportMotion_SPD_HTML_AMCHART_Weekly(rawData As Motion_LinePRReport) ' As List(Of DTevent))
        Dim fsT As Object
        Dim fileName As String
        Dim timeIncrementer As Integer
        Dim us As New CultureInfo("en-US")
        fsT = CreateObject("ADODB.Stream")
        fsT.Type = 2 'Specify stream type - we want To save text/string data.
        fsT.Charset = "utf-8" 'Specify charset For the source text data.
        fsT.Open() 'Open the stream And write binary data To the object


        fileName = SERVER_FOLDER_PATH & "Motion" & 0 & "S_Weekly.html"
        ''''''''


        fsT.Writetext("<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01//EN' 'http://www.w3.org/TR/html4/strict.dtd'>" & vbCrLf)
        fsT.Writetext("<html>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("    <head>" & vbCrLf)
        fsT.Writetext("        <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>" & vbCrLf)
        fsT.Writetext("        <title>amCharts examples</title>" & vbCrLf)
        fsT.Writetext("        <link rel='stylesheet' href='style.css' type='text/css'>" & vbCrLf)
        fsT.Writetext("        <script src='amcharts.js' type='text/javascript'></script>" & vbCrLf)
        fsT.Writetext("        <script src='serial.js' type='text/javascript'></script>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("        <script>" & vbCrLf)
        fsT.Writetext("           var chart;" & vbCrLf)
        fsT.Writetext("           var chartData = [];" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           AmCharts.ready(function () {" & vbCrLf)
        fsT.Writetext("               // generate some random data first" & vbCrLf)
        fsT.Writetext("               generateChartData();" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // SERIAL CHART" & vbCrLf)
        fsT.Writetext("               chart = new AmCharts.AmSerialChart();" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               chart.dataProvider = chartData;" & vbCrLf)
        fsT.Writetext("               chart.categoryField = 'date';" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // listen for 'dataUpdated' event (fired when chart is inited) and call zoomChart method when it happens" & vbCrLf)
        fsT.Writetext("               chart.addListener('dataUpdated', zoomChart);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // AXES" & vbCrLf)
        fsT.Writetext("               // category" & vbCrLf)
        fsT.Writetext("               var categoryAxis = chart.categoryAxis;" & vbCrLf)
        fsT.Writetext("               categoryAxis.parseDates = false; // as our data is date-based, we set parseDates to true" & vbCrLf)
        'fsT.Writetext("               categoryAxis.minPeriod = 'DD'; // our data is daily, so we set minPeriod to DD" & vbCrLf)
        fsT.Writetext("               categoryAxis.minorGridEnabled = true;" & vbCrLf)
        fsT.Writetext("               categoryAxis.axisColor = '#DADADA';" & vbCrLf)
        fsT.Writetext("               categoryAxis.twoLineMode = true;" & vbCrLf)



        fsT.Writetext("               // first value axis (on the left)" & vbCrLf)
        fsT.Writetext("               var valueAxis1 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis1.axisColor = '#FF6600';" & vbCrLf)
        fsT.Writetext("               valueAxis1.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               valueAxis1.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis1);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // second value axis (on the right)" & vbCrLf)
        fsT.Writetext("               var valueAxis2 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis2.position = 'right'; // this line makes the axis to appear on the right" & vbCrLf)
        fsT.Writetext("               valueAxis2.axisColor = '#FCD202';" & vbCrLf)
        fsT.Writetext("               valueAxis2.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               valueAxis2.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis2);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // third value axis (on the left, detached)" & vbCrLf)
        fsT.Writetext("               valueAxis3 = new AmCharts.ValueAxis();" & vbCrLf)
        fsT.Writetext("               valueAxis3.offset = 50; // this line makes the axis to appear detached from plot area" & vbCrLf)
        fsT.Writetext("               valueAxis3.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("               valueAxis3.axisColor = '#B0DE09';" & vbCrLf)
        fsT.Writetext("               valueAxis3.axisThickness = 2;" & vbCrLf)
        fsT.Writetext("               chart.addValueAxis(valueAxis3);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // GRAPHS" & vbCrLf)
        fsT.Writetext("               // first graph" & vbCrLf)
        fsT.Writetext("               var graph1 = new AmCharts.AmGraph();" & vbCrLf)
        fsT.Writetext("               graph1.valueAxis = valueAxis1; // we have to indicate which value axis should be used" & vbCrLf)
        fsT.Writetext("               graph1.title = 'Stops per day';" & vbCrLf)
        fsT.Writetext("               graph1.valueField = 'SPD';" & vbCrLf)
        fsT.Writetext("               graph1.bullet = 'round';" & vbCrLf)
        fsT.Writetext("               graph1.hideBulletsCount = 30;" & vbCrLf)
        fsT.Writetext("               graph1.bulletBorderThickness = 1;" & vbCrLf)
        fsT.Writetext("               chart.addGraph(graph1);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)

        fsT.Writetext("               // CURSOR" & vbCrLf)
        fsT.Writetext("               var chartCursor = new AmCharts.ChartCursor();" & vbCrLf)
        fsT.Writetext("               chartCursor.cursorAlpha = 0.1;" & vbCrLf)
        fsT.Writetext("               chartCursor.fullWidth = true;" & vbCrLf)
        fsT.Writetext("               chart.addChartCursor(chartCursor);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // SCROLLBAR" & vbCrLf)
        fsT.Writetext("               var chartScrollbar = new AmCharts.ChartScrollbar();" & vbCrLf)
        fsT.Writetext("               chart.addChartScrollbar(chartScrollbar);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // LEGEND" & vbCrLf)
        fsT.Writetext("               var legend = new AmCharts.AmLegend();" & vbCrLf)
        fsT.Writetext("               legend.marginLeft = 110;" & vbCrLf)
        fsT.Writetext("               legend.useGraphSettings = true;" & vbCrLf)
        fsT.Writetext("               chart.addLegend(legend);" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("               // WRITE" & vbCrLf)
        fsT.Writetext("               chart.write('chartdiv');" & vbCrLf)
        fsT.Writetext("           });" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           // generate some random data, quite different range" & vbCrLf)
        fsT.Writetext("           function generateChartData() {" & vbCrLf)

        fsT.Writetext("" & vbCrLf)

        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("                   chartData.push(" & vbCrLf)

        For timeIncrementer = ((rawData.DailyReports.Count - 1) Mod 7) To rawData.DailyReports.Count - 1 Step 1
            If timeIncrementer + 6 < 90 Then
                fsT.Writetext("                       {date: '" & rawData.getHTMLdataString_AMCharts_Dateobj_Weekly(timeIncrementer, timeIncrementer + 6) & "'," & vbCrLf)
                fsT.Writetext("                       SPD: " & Math.Round(rawData.getHTMLdataString_AMCharts_SPD_Weekly(timeIncrementer, timeIncrementer + 6), 1).ToString("######0.0", us) & vbCrLf)
                If timeIncrementer + 6 < 83 Then
                    fsT.Writetext("}," & vbCrLf)
                End If
                timeIncrementer = timeIncrementer + 6
            End If
        Next
        fsT.Writetext("                   });" & vbCrLf)


        'fsT.Writetext("               }" & vbCrLf)
        fsT.Writetext("           }" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("           // this method is called when chart is first inited as we listen for 'dataUpdated' event" & vbCrLf)
        fsT.Writetext("           function zoomChart() {" & vbCrLf)
        fsT.Writetext("               // different zoom methods can be used - zoomToIndexes, zoomToDates, zoomToCategoryValues" & vbCrLf)
        'fsT.Writetext("               chart.zoomToIndexes(10, 20);" & vbCrLf)
        fsT.Writetext("           }" & vbCrLf)
        fsT.Writetext("        </script>" & vbCrLf)
        fsT.Writetext("    </head>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("    <body>" & vbCrLf)
        fsT.Writetext("        <div id='chartdiv' style='width: 100%; height: 400px;'></div>" & vbCrLf)
        fsT.Writetext("    </body>" & vbCrLf)
        fsT.Writetext("" & vbCrLf)
        fsT.Writetext("</html>" & vbCrLf)

        'fin
        Try
            fsT.SaveToFile(fileName, 2) 'Save binary data To disk
        Catch ex As Exception
        End Try
        fsT = Nothing
    End Sub

End Module


Module CSS_JS_HTML_AmCharts

    Public Sub CreateAMCharts_JS()


        Dim fsT As Object
        Dim fileName As String

        fsT = CreateObject("ADODB.Stream")
        fsT.Type = 2 'Specify stream type - we want To save text/string data.
        fsT.Charset = "utf-8" 'Specify charset For the source text data.
        fsT.Open() 'Open the stream And write binary data To the object

        fileName = SERVER_FOLDER_PATH & "amcharts.js"


        fsT.Writetext("(function () {" & vbCrLf)
        fsT.Writetext("    var d;" & vbCrLf)
        fsT.Writetext("    window.AmCharts ? d = window.AmCharts : (d = {}, window.AmCharts = d, d.themes = {}, d.maps = {}, d.inheriting = {}, d.charts = [], d.onReadyArray = [], d.useUTC = !1, d.updateRate = 30, d.uid = 0, d.lang = {}, d.translations = {}, d.mapTranslations = {}, d.windows = {}, d.initHandlers = []);" & vbCrLf)
        fsT.Writetext("    d.Class = function (a) {" & vbCrLf)
        fsT.Writetext("        var b = function () {" & vbCrLf)
        fsT.Writetext("            arguments[0] !== d.inheriting && (this.events = {}, this.construct.apply(this, arguments))" & vbCrLf)
        fsT.Writetext("        };" & vbCrLf)
        fsT.Writetext("        a.inherits ? (b.prototype = new a.inherits(d.inheriting), b.base = a.inherits.prototype, delete a.inherits) : (b.prototype.createEvents = function () {" & vbCrLf)
        fsT.Writetext("            for (var a = 0, b = arguments.length; a < b; a++) this.events[arguments[a]] = []" & vbCrLf)
        fsT.Writetext("        }, b.prototype.listenTo = function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            this.removeListener(a, b, c);" & vbCrLf)
        fsT.Writetext("            a.events[b].push({" & vbCrLf)
        fsT.Writetext("                handler: c," & vbCrLf)
        fsT.Writetext("                scope: this" & vbCrLf)
        fsT.Writetext("            })" & vbCrLf)
        fsT.Writetext("        }, b.prototype.addListener = function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            this.removeListener(this, a, b);" & vbCrLf)
        fsT.Writetext("            this.events[a].push({" & vbCrLf)
        fsT.Writetext("                handler: b," & vbCrLf)
        fsT.Writetext("                scope: c" & vbCrLf)
        fsT.Writetext("            })" & vbCrLf)
        fsT.Writetext("        }, b.prototype.removeListener = function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            if (a && a.events) for (a = a.events[b], b = a.length - 1; 0 <= b; b--) a[b].handler === c && a.splice(b, 1)" & vbCrLf)
        fsT.Writetext("        }, b.prototype.fire = function (a, b) {" & vbCrLf)
        fsT.Writetext("            for (var c = this.events[a], d = 0, k = c.length; d < k; d++) {" & vbCrLf)
        fsT.Writetext("                var l = c[d];" & vbCrLf)
        fsT.Writetext("                l.handler.call(l.scope, b)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        });" & vbCrLf)
        fsT.Writetext("        for (var c in a) b.prototype[c] = a[c];" & vbCrLf)
        fsT.Writetext("        return b" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.addChart = function (a) {" & vbCrLf)
        fsT.Writetext("        d.updateInt || (d.updateInt = setInterval(function () {" & vbCrLf)
        fsT.Writetext("            d.update()" & vbCrLf)
        fsT.Writetext("        }, Math.round(1E3 / d.updateRate)));" & vbCrLf)
        fsT.Writetext("        d.charts.push(a)" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.removeChart = function (a) {" & vbCrLf)
        fsT.Writetext("        for (var b = d.charts, c = b.length - 1; 0 <= c; c--) b[c] == a && b.splice(c, 1);" & vbCrLf)
        fsT.Writetext("        0 === b.length && d.updateInt && (clearInterval(d.updateInt), d.updateInt = NaN)" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.isModern = !0;" & vbCrLf)
        fsT.Writetext("    d.getIEVersion = function () {" & vbCrLf)
        fsT.Writetext("        var a = 0," & vbCrLf)
        fsT.Writetext("            b, c;" & vbCrLf)
        fsT.Writetext("        " & Chr(34) & "Microsoft Internet Explorer" & Chr(34) & " == navigator.appName && (b = navigator.userAgent," & vbCrLf)
        fsT.Writetext("        c = /MSIE ([0-9]{1,}[.0-9]{0,})/, null !== c.exec(b) && (a = parseFloat(RegExp.$1)));" & vbCrLf)
        fsT.Writetext("        return a" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.applyLang = function (a, b) {" & vbCrLf)
        fsT.Writetext("        var c = d.translations;" & vbCrLf)
        fsT.Writetext("        b.dayNames = d.extend({}, d.dayNames);" & vbCrLf)
        fsT.Writetext("        b.shortDayNames = d.extend({}, d.shortDayNames);" & vbCrLf)
        fsT.Writetext("        b.monthNames = d.extend({}, d.monthNames);" & vbCrLf)
        fsT.Writetext("        b.shortMonthNames = d.extend({}, d.shortMonthNames);" & vbCrLf)
        fsT.Writetext("        c && (c = c[a]) && (d.lang = c, c.monthNames && (b.dayNames = d.extend({}, c.dayNames), b.shortDayNames = d.extend({}, c.shortDayNames), b.monthNames = d.extend({}, c.monthNames), b.shortMonthNames = d.extend({}, c.shortMonthNames)))" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.IEversion = d.getIEVersion();" & vbCrLf)
        fsT.Writetext("    9 > d.IEversion && 0 < d.IEversion && (d.isModern = !1, d.isIE = !0);" & vbCrLf)
        fsT.Writetext("    d.dx = 0;" & vbCrLf)
        fsT.Writetext("    d.dy = 0;" & vbCrLf)
        fsT.Writetext("    if (document.addEventListener || window.opera) d.isNN = !0, d.isIE = !1, d.dx = .5, d.dy = .5;" & vbCrLf)
        fsT.Writetext("    document.attachEvent && (d.isNN = !1, d.isIE = !0, d.isModern || (d.dx = 0, d.dy = 0));" & vbCrLf)
        fsT.Writetext("    window.chrome && (d.chrome = !0);" & vbCrLf)
        fsT.Writetext("    d.handleMouseUp = function (a) {" & vbCrLf)
        fsT.Writetext("        for (var b = d.charts, c = 0; c < b.length; c++) {" & vbCrLf)
        fsT.Writetext("            var e = b[c];" & vbCrLf)
        fsT.Writetext("            e && e.handleReleaseOutside && e.handleReleaseOutside(a)" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.handleMouseMove = function (a) {" & vbCrLf)
        fsT.Writetext("        for (var b = d.charts, c = 0; c < b.length; c++) {" & vbCrLf)
        fsT.Writetext("            var e = b[c];" & vbCrLf)
        fsT.Writetext("            e && e.handleMouseMove && e.handleMouseMove(a)" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.handleWheel = function (a) {" & vbCrLf)
        fsT.Writetext("        for (var b = d.charts, c = 0; c < b.length; c++) {" & vbCrLf)
        fsT.Writetext("            var e = b[c];" & vbCrLf)
        fsT.Writetext("            if (e && e.mouseIsOver) {" & vbCrLf)
        fsT.Writetext("                e.mouseWheelScrollEnabled || e.mouseWheelZoomEnabled ? e.handleWheel && e.handleWheel(a) : a.stopPropagation && a.stopPropagation();" & vbCrLf)
        fsT.Writetext("                break" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.resetMouseOver = function () {" & vbCrLf)
        fsT.Writetext("        for (var a = d.charts, b = 0; b < a.length; b++) {" & vbCrLf)
        fsT.Writetext("            var c = a[b];" & vbCrLf)
        fsT.Writetext("            c && (c.mouseIsOver = !1)" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.ready = function (a) {" & vbCrLf)
        fsT.Writetext("        d.onReadyArray.push(a)" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.handleLoad = function () {" & vbCrLf)
        fsT.Writetext("        d.isReady = !0;" & vbCrLf)
        fsT.Writetext("        for (var a = d.onReadyArray, b = 0; b < a.length; b++) {" & vbCrLf)
        fsT.Writetext("            var c = a[b];" & vbCrLf)
        fsT.Writetext("            isNaN(d.processDelay) ? c() : setTimeout(c, d.processDelay * b)" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.addInitHandler = function (a, b) {" & vbCrLf)
        fsT.Writetext("        d.initHandlers.push({" & vbCrLf)
        fsT.Writetext("            method: a," & vbCrLf)
        fsT.Writetext("            types: b" & vbCrLf)
        fsT.Writetext("        })" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.callInitHandler = function (a) {" & vbCrLf)
        fsT.Writetext("        var b = d.initHandlers;" & vbCrLf)
        fsT.Writetext("        if (d.initHandlers) for (var c = 0; c < b.length; c++) {" & vbCrLf)
        fsT.Writetext("            var e = b[c];" & vbCrLf)
        fsT.Writetext("            e.types ? d.isInArray(e.types, a.type) && e.method(a) : e.method(a)" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.getUniqueId = function () {" & vbCrLf)
        fsT.Writetext("        d.uid++;" & vbCrLf)
        fsT.Writetext("        return " & Chr(34) & "AmChartsEl-" & Chr(34) & " + d.uid" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.isNN && (document.addEventListener(" & Chr(34) & "mousemove" & Chr(34) & ", d.handleMouseMove, !0), document.addEventListener(" & Chr(34) & "mouseup" & Chr(34) & ", d.handleMouseUp, !0), window.addEventListener(" & Chr(34) & "load" & Chr(34) & ", d.handleLoad, !0), window.addEventListener(" & Chr(34) & "DOMMouseScroll" & Chr(34) & ", d.handleWheel, !0), document.addEventListener(" & Chr(34) & "mousewheel" & Chr(34) & ", d.handleWheel, !0));" & vbCrLf)
        fsT.Writetext("    d.isIE && (document.attachEvent(" & Chr(34) & "onmousemove" & Chr(34) & ", d.handleMouseMove), document.attachEvent(" & Chr(34) & "onmouseup" & Chr(34) & ", d.handleMouseUp), window.attachEvent(" & Chr(34) & "onload" & Chr(34) & ", d.handleLoad));" & vbCrLf)
        fsT.Writetext("    d.clear = function () {" & vbCrLf)
        fsT.Writetext("        var a = d.charts;" & vbCrLf)
        fsT.Writetext("        if (a) for (var b = a.length - 1; 0 <= b; b--) a[b].clear();" & vbCrLf)
        fsT.Writetext("        d.updateInt && clearInterval(d.updateInt);" & vbCrLf)
        fsT.Writetext("        d.charts = [];" & vbCrLf)
        fsT.Writetext("        d.isNN && (document.removeEventListener(" & Chr(34) & "mousemove" & Chr(34) & ", d.handleMouseMove, !0), document.removeEventListener(" & Chr(34) & "mouseup" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("        d.handleMouseUp, !0), window.removeEventListener(" & Chr(34) & "load" & Chr(34) & ", d.handleLoad, !0), window.removeEventListener(" & Chr(34) & "DOMMouseScroll" & Chr(34) & ", d.handleWheel, !0), document.removeEventListener(" & Chr(34) & "mousewheel" & Chr(34) & ", d.handleWheel, !0));" & vbCrLf)
        fsT.Writetext("        d.isIE && (document.detachEvent(" & Chr(34) & "onmousemove" & Chr(34) & ", d.handleMouseMove), document.detachEvent(" & Chr(34) & "onmouseup" & Chr(34) & ", d.handleMouseUp), window.detachEvent(" & Chr(34) & "onload" & Chr(34) & ", d.handleLoad))" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.makeChart = function (a, b, c) {" & vbCrLf)
        fsT.Writetext("        var e = b.type," & vbCrLf)
        fsT.Writetext("            h = b.theme;" & vbCrLf)
        fsT.Writetext("        d.isString(h) && (h = d.themes[h], b.theme = h);" & vbCrLf)
        fsT.Writetext("        var f;" & vbCrLf)
        fsT.Writetext("        switch (e) {" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "serial" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                f = new d.AmSerialChart(h);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "xy" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                f = new d.AmXYChart(h);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "pie" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                f = new d.AmPieChart(h);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "radar" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                f = new d.AmRadarChart(h);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "gauge" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                f = new d.AmAngularGauge(h);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "funnel" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                f = new d.AmFunnelChart(h);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "map" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                f = new d.AmMap(h);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "stock" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                f = new d.AmStockChart(h);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "gantt" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                f = new d.AmGanttChart(h)" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("        d.extend(f, b);" & vbCrLf)
        fsT.Writetext("        d.isReady ? isNaN(c) ? f.write(a) : setTimeout(function () {" & vbCrLf)
        fsT.Writetext("            d.realWrite(f, a)" & vbCrLf)
        fsT.Writetext("        }, c) : d.ready(function () {" & vbCrLf)
        fsT.Writetext("            isNaN(c) ? f.write(a) : setTimeout(function () {" & vbCrLf)
        fsT.Writetext("                d.realWrite(f, a)" & vbCrLf)
        fsT.Writetext("            }, c)" & vbCrLf)
        fsT.Writetext("        });" & vbCrLf)
        fsT.Writetext("        return f" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.realWrite = function (a, b) {" & vbCrLf)
        fsT.Writetext("        a.write(b)" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.updateCount = 0;" & vbCrLf)
        fsT.Writetext("    d.validateAt = Math.round(d.updateRate / 5);" & vbCrLf)
        fsT.Writetext("    d.update = function () {" & vbCrLf)
        fsT.Writetext("        var a = d.charts;" & vbCrLf)
        fsT.Writetext("        d.updateCount++;" & vbCrLf)
        fsT.Writetext("        var b = !1;" & vbCrLf)
        fsT.Writetext("        d.updateCount == d.validateAt && (b = !0, d.updateCount = 0);" & vbCrLf)
        fsT.Writetext("        if (a) for (var c = 0; c < a.length; c++) a[c].update && a[c].update(), b && a[c].autoResize && a[c].validateSize && a[c].validateSize()" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.bezierX = 3;" & vbCrLf)
        fsT.Writetext("    d.bezierY = 6" & vbCrLf)
        fsT.Writetext("})();" & vbCrLf)
        fsT.Writetext("(function () {" & vbCrLf)
        fsT.Writetext("    var d = window.AmCharts;" & vbCrLf)
        fsT.Writetext("    d.toBoolean = function (a, b) {" & vbCrLf)
        fsT.Writetext("        if (void 0 === a) return b;" & vbCrLf)
        fsT.Writetext("        switch (String(a).toLowerCase()) {" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "true" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "yes" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "1" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                return !0;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "false" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "no" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "0" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("            case null:" & vbCrLf)
        fsT.Writetext("                return !1;" & vbCrLf)
        fsT.Writetext("            default:" & vbCrLf)
        fsT.Writetext("                return Boolean(a)" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.removeFromArray = function (a, b) {" & vbCrLf)
        fsT.Writetext("        var c;" & vbCrLf)
        fsT.Writetext("        if (void 0 !== b && void 0 !== a) for (c = a.length - 1; 0 <= c; c--) a[c] == b && a.splice(c, 1)" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.getPath = function () {" & vbCrLf)
        fsT.Writetext("        var a = document.getElementsByTagName(" & Chr(34) & "script" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        if (a) for (var b = 0; b < a.length; b++) {" & vbCrLf)
        fsT.Writetext("            var c = a[b].src;" & vbCrLf)
        fsT.Writetext("            if (-1 !== c.search(/\/(amcharts|ammap)\.js/)) return c.replace(/\/(amcharts|ammap)\.js.*/," & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "/" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.normalizeUrl = function (a) {" & vbCrLf)
        fsT.Writetext("        return " & Chr(34) & "" & Chr(34) & " !== a && -1 === a.search(/\/$/) ? a + " & Chr(34) & "/" & Chr(34) & " : a" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.isAbsolute = function (a) {" & vbCrLf)
        fsT.Writetext("        return 0 === a.search(/^http[s]?:|^\//)" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.isInArray = function (a, b) {" & vbCrLf)
        fsT.Writetext("        for (var c = 0; c < a.length; c++) if (a[c] == b) return !0;" & vbCrLf)
        fsT.Writetext("        return !1" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.getDecimals = function (a) {" & vbCrLf)
        fsT.Writetext("        var b = 0;" & vbCrLf)
        fsT.Writetext("        isNaN(a) || (a = String(a), -1 != a.indexOf(" & Chr(34) & "e-" & Chr(34) & ") ? b = Number(a.split(" & Chr(34) & "-" & Chr(34) & ")[1]) : -1 != a.indexOf(" & Chr(34) & "." & Chr(34) & ") && (b = a.split(" & Chr(34) & "." & Chr(34) & ")[1].length));" & vbCrLf)
        fsT.Writetext("        return b" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.wrappedText = function (a, b, c, e, h, f, g, k, l) {" & vbCrLf)
        fsT.Writetext("        var m = d.text(a, b, c, e, h, f, g)," & vbCrLf)
        fsT.Writetext("            n = " & Chr(34) & "\n" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("        d.isModern || (n = " & Chr(34) & "<br>" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        if (10 < l) return m;" & vbCrLf)
        fsT.Writetext("        if (m) {" & vbCrLf)
        fsT.Writetext("            var q = m.getBBox();" & vbCrLf)
        fsT.Writetext("            if (q.width > k) {" & vbCrLf)
        fsT.Writetext("                q = Math.ceil(q.width / k);" & vbCrLf)
        fsT.Writetext("                m.remove();" & vbCrLf)
        fsT.Writetext("                for (var m = [], p = 0; - 1 < (p = b.indexOf(" & Chr(34) & " " & Chr(34) & ", p));) m.push(p), p += 1;" & vbCrLf)
        fsT.Writetext("                for (var r, p = 0; p < m.length; p += Math.ceil(m.length / q)) r = m[p], b = b.substr(0, r) + n + b.substr(r + 1);" & vbCrLf)
        fsT.Writetext("                if (isNaN(r)) {" & vbCrLf)
        fsT.Writetext("                    if (0 === l) for (p = 1; p < q; p++) r = Math.round(b.length / q * p), b = b.substr(0, r) + n + b.substr(r);" & vbCrLf)
        fsT.Writetext("                    return d.text(a, b, c, e, h, f, g)" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("                return d.wrappedText(a, b, c, e, h, f, g, k, l + 1)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            return m" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.getStyle = function (a, b) {" & vbCrLf)
        fsT.Writetext("        var c = " & Chr(34) & "" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("        document.defaultView && document.defaultView.getComputedStyle ? c = document.defaultView.getComputedStyle(a," & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "" & Chr(34) & ").getPropertyValue(b) : a.currentStyle && (b = b.replace(/\-(\w)/g, function (a, b) {" & vbCrLf)
        fsT.Writetext("            return b.toUpperCase()" & vbCrLf)
        fsT.Writetext("        }), c = a.currentStyle[b]);" & vbCrLf)
        fsT.Writetext("        return c" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.removePx = function (a) {" & vbCrLf)
        fsT.Writetext("        if (void 0 !== a) return Number(a.substring(0, a.length - 2))" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.getURL = function (a, b) {" & vbCrLf)
        fsT.Writetext("        if (a) if (" & Chr(34) & "_self" & Chr(34) & " != b && b) if (" & Chr(34) & "_top" & Chr(34) & " == b && window.top) window.top.location.href = a;" & vbCrLf)
        fsT.Writetext("        else if (" & Chr(34) & "_parent" & Chr(34) & " == b && window.parent) window.parent.location.href = a;" & vbCrLf)
        fsT.Writetext("        else if (" & Chr(34) & "_blank" & Chr(34) & " == b) window.open(a);" & vbCrLf)
        fsT.Writetext("        else {" & vbCrLf)
        fsT.Writetext("            var c = document.getElementsByName(b)[0];" & vbCrLf)
        fsT.Writetext("            c ? c.src = a : (c = d.windows[b]) ? c.opener && !c.opener.closed ? c.location.href = a : d.windows[b] = window.open(a) : d.windows[b] = window.open(a)" & vbCrLf)
        fsT.Writetext("        } else window.location.href = a" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.ifArray = function (a) {" & vbCrLf)
        fsT.Writetext("        return a && 0 < a.length ? !0 : !1" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.callMethod = function (a, b) {" & vbCrLf)
        fsT.Writetext("        var c;" & vbCrLf)
        fsT.Writetext("        for (c = 0; c < b.length; c++) {" & vbCrLf)
        fsT.Writetext("            var e = b[c];" & vbCrLf)
        fsT.Writetext("            if (e) {" & vbCrLf)
        fsT.Writetext("                if (e[a]) e[a]();" & vbCrLf)
        fsT.Writetext("                var h = e.length;" & vbCrLf)
        fsT.Writetext("                if (0 < h) {" & vbCrLf)
        fsT.Writetext("                    var d;" & vbCrLf)
        fsT.Writetext("                    for (d = 0; d < h; d++) {" & vbCrLf)
        fsT.Writetext("                        var g = e[d];" & vbCrLf)
        fsT.Writetext("                        if (g && g[a]) g[a]()" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.toNumber = function (a) {" & vbCrLf)
        fsT.Writetext("        return " & Chr(34) & "number" & Chr(34) & " == typeof a ? a : Number(String(a).replace(/[^0-9\-.]+/g, " & Chr(34) & "" & Chr(34) & "))" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.toColor = function (a) {" & vbCrLf)
        fsT.Writetext("        if (" & Chr(34) & "" & Chr(34) & " !== a && void 0 !== a) if (-1 != a.indexOf(" & Chr(34) & "," & Chr(34) & ")) {" & vbCrLf)
        fsT.Writetext("            a = a.split(" & Chr(34) & "," & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            var b;" & vbCrLf)
        fsT.Writetext("            for (b = 0; b < a.length; b++) {" & vbCrLf)
        fsT.Writetext("                var c = a[b].substring(a[b].length - 6, a[b].length);" & vbCrLf)
        fsT.Writetext("                a[b] = " & Chr(34) & "#" & Chr(34) & " + c" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        } else a = a.substring(a.length - 6, a.length), a = " & Chr(34) & "#" & Chr(34) & " + a;" & vbCrLf)
        fsT.Writetext("        return a" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.toCoordinate = function (a, b, c) {" & vbCrLf)
        fsT.Writetext("        var e;" & vbCrLf)
        fsT.Writetext("        void 0 !== a && (a = String(a), c && c < b && (b = c), e = Number(a), -1 != a.indexOf(" & Chr(34) & "!" & Chr(34) & ") && (e = b - Number(a.substr(1))), -1 != a.indexOf(" & Chr(34) & "%" & Chr(34) & ") && (e = b * Number(a.substr(0, a.length - 1)) / 100));" & vbCrLf)
        fsT.Writetext("        return e" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.fitToBounds = function (a, b, c) {" & vbCrLf)
        fsT.Writetext("        a < b && (a = b);" & vbCrLf)
        fsT.Writetext("        a > c && (a = c);" & vbCrLf)
        fsT.Writetext("        return a" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.isDefined = function (a) {" & vbCrLf)
        fsT.Writetext("        return void 0 === a ? !1 : !0" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.stripNumbers = function (a) {" & vbCrLf)
        fsT.Writetext("        return a.replace(/[0-9]+/g," & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.roundTo = function (a, b) {" & vbCrLf)
        fsT.Writetext("        if (0 > b) return a;" & vbCrLf)
        fsT.Writetext("        var c = Math.pow(10, b);" & vbCrLf)
        fsT.Writetext("        return Math.round(a * c) / c" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.toFixed = function (a, b) {" & vbCrLf)
        fsT.Writetext("        var c = String(Math.round(a * Math.pow(10, b)));" & vbCrLf)
        fsT.Writetext("        if (0 < b) {" & vbCrLf)
        fsT.Writetext("            var e = c.length;" & vbCrLf)
        fsT.Writetext("            if (e < b) {" & vbCrLf)
        fsT.Writetext("                var h;" & vbCrLf)
        fsT.Writetext("                for (h = 0; h < b - e; h++) c = " & Chr(34) & "0" & Chr(34) & " + c" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            e = c.substring(0, c.length - b);" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "" & Chr(34) & " === e && (e = 0);" & vbCrLf)
        fsT.Writetext("            return e + " & Chr(34) & "." & Chr(34) & " + c.substring(c.length - b, c.length)" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("        return String(c)" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.formatDuration = function (a, b, c, e, h, f) {" & vbCrLf)
        fsT.Writetext("        var g = d.intervals," & vbCrLf)
        fsT.Writetext("            k = f.decimalSeparator;" & vbCrLf)
        fsT.Writetext("        if (a >= g[b].contains) {" & vbCrLf)
        fsT.Writetext("            var l = a - Math.floor(a / g[b].contains) * g[b].contains;" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "ss" & Chr(34) & " == b && (l = d.formatNumber(l," & vbCrLf)
        fsT.Writetext("            f), 1 == l.split(k)[0].length && (l = " & Chr(34) & "0" & Chr(34) & " + l));" & vbCrLf)
        fsT.Writetext("            (" & Chr(34) & "mm" & Chr(34) & " == b || " & Chr(34) & "hh" & Chr(34) & " == b) && 10 > l && (l = " & Chr(34) & "0" & Chr(34) & " + l);" & vbCrLf)
        fsT.Writetext("            c = l + " & Chr(34) & "" & Chr(34) & " + e[b] + " & Chr(34) & "" & Chr(34) & " + c;" & vbCrLf)
        fsT.Writetext("            a = Math.floor(a / g[b].contains);" & vbCrLf)
        fsT.Writetext("            b = g[b].nextInterval;" & vbCrLf)
        fsT.Writetext("            return d.formatDuration(a, b, c, e, h, f)" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("        " & Chr(34) & "ss" & Chr(34) & " == b && (a = d.formatNumber(a, f), 1 == a.split(k)[0].length && (a = " & Chr(34) & "0" & Chr(34) & " + a));" & vbCrLf)
        fsT.Writetext("        (" & Chr(34) & "mm" & Chr(34) & " == b || " & Chr(34) & "hh" & Chr(34) & " == b) && 10 > a && (a = " & Chr(34) & "0" & Chr(34) & " + a);" & vbCrLf)
        fsT.Writetext("        c = a + " & Chr(34) & "" & Chr(34) & " + e[b] + " & Chr(34) & "" & Chr(34) & " + c;" & vbCrLf)
        fsT.Writetext("        if (g[h].count > g[b].count) for (a = g[b].count; a < g[h].count; a++) b = g[b].nextInterval, " & Chr(34) & "ss" & Chr(34) & " == b || " & Chr(34) & "mm" & Chr(34) & " == b || " & Chr(34) & "hh" & Chr(34) & " == b ? c = " & Chr(34) & "00" & Chr(34) & " + e[b] + " & Chr(34) & "" & Chr(34) & " + c : " & Chr(34) & "DD" & Chr(34) & " == b && (c = " & Chr(34) & "0" & Chr(34) & " + e[b] + " & Chr(34) & "" & Chr(34) & " + c);" & vbCrLf)
        fsT.Writetext("        " & Chr(34) & ":" & Chr(34) & " == c.charAt(c.length - 1) && (c = c.substring(0, c.length - 1));" & vbCrLf)
        fsT.Writetext("        return c" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.formatNumber = function (a, b, c, e, h) {" & vbCrLf)
        fsT.Writetext("        a = d.roundTo(a, b.precision);" & vbCrLf)
        fsT.Writetext("        isNaN(c) && (c = b.precision);" & vbCrLf)
        fsT.Writetext("        var f = b.decimalSeparator;" & vbCrLf)
        fsT.Writetext("        b = b.thousandsSeparator;" & vbCrLf)
        fsT.Writetext("        var g;" & vbCrLf)
        fsT.Writetext("        g = 0 > a ? " & Chr(34) & "-" & Chr(34) & " : " & Chr(34) & "" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("        a = Math.abs(a);" & vbCrLf)
        fsT.Writetext("        var k = String(a)," & vbCrLf)
        fsT.Writetext("            l = !1; - 1 != k.indexOf(" & Chr(34) & "e" & Chr(34) & ") && (l = !0);" & vbCrLf)
        fsT.Writetext("        0 <= c && !l && (k = d.toFixed(a, c));" & vbCrLf)
        fsT.Writetext("        var m = " & Chr(34) & "" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("        if (l) m = k;" & vbCrLf)
        fsT.Writetext("        else {" & vbCrLf)
        fsT.Writetext("            var k = k.split(" & Chr(34) & "." & Chr(34) & ")," & vbCrLf)
        fsT.Writetext("                l = String(k[0])," & vbCrLf)
        fsT.Writetext("                n;" & vbCrLf)
        fsT.Writetext("            for (n = l.length; 0 <= n; n -= 3) m = n != l.length ? 0 !== n ? l.substring(n - 3, n) + b + m : l.substring(n - 3, n) + m : l.substring(n - 3, n);" & vbCrLf)
        fsT.Writetext("            void 0 !== k[1] && (m = m + f + k[1]);" & vbCrLf)
        fsT.Writetext("            void 0 !== c && 0 < c && " & Chr(34) & "0" & Chr(34) & " != m && (m = d.addZeroes(m, f, c))" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("        m = g + m;" & vbCrLf)
        fsT.Writetext("        " & Chr(34) & "" & Chr(34) & " === g && !0 === e && 0 !== a && (m = " & Chr(34) & "+" & Chr(34) & " + m);" & vbCrLf)
        fsT.Writetext("        !0 === h && (m += " & Chr(34) & "%" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        return m" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.addZeroes = function (a, b, c) {" & vbCrLf)
        fsT.Writetext("        a = a.split(b);" & vbCrLf)
        fsT.Writetext("        void 0 === a[1] && 0 < c && (a[1] = " & Chr(34) & "0" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        return a[1].length < c ? (a[1] += " & Chr(34) & "0" & Chr(34) & ", d.addZeroes(a[0] + b + a[1], b, c)) : void 0 !== a[1] ? a[0] + b + a[1] : a[0]" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.scientificToNormal = function (a) {" & vbCrLf)
        fsT.Writetext("        var b;" & vbCrLf)
        fsT.Writetext("        a = String(a).split(" & Chr(34) & "e" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        var c;" & vbCrLf)
        fsT.Writetext("        if (" & Chr(34) & "-" & Chr(34) & " == a[1].substr(0, 1)) {" & vbCrLf)
        fsT.Writetext("            b = " & Chr(34) & "0." & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            for (c = 0; c < Math.abs(Number(a[1])) - 1; c++) b += " & Chr(34) & "0" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            b += a[0].split(" & Chr(34) & "." & Chr(34) & ").join(" & Chr(34) & "" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("        } else {" & vbCrLf)
        fsT.Writetext("            var e = 0;" & vbCrLf)
        fsT.Writetext("            b = a[0].split(" & Chr(34) & "." & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            b[1] && (e = b[1].length);" & vbCrLf)
        fsT.Writetext("            b = a[0].split(" & Chr(34) & "." & Chr(34) & ").join(" & Chr(34) & "" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            for (c = 0; c < Math.abs(Number(a[1])) - e; c++) b += " & Chr(34) & "0" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("        return b" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.toScientific = function (a, b) {" & vbCrLf)
        fsT.Writetext("        if (0 === a) return " & Chr(34) & "0" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("        var c = Math.floor(Math.log(Math.abs(a)) * Math.LOG10E)," & vbCrLf)
        fsT.Writetext("            e = String(e).split(" & Chr(34) & "." & Chr(34) & ").join(b);" & vbCrLf)
        fsT.Writetext("        return String(e) + " & Chr(34) & "e" & Chr(34) & " + c" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.randomColor = function () {" & vbCrLf)
        fsT.Writetext("        return " & Chr(34) & "#" & Chr(34) & " + (" & Chr(34) & "00000" & Chr(34) & " + (16777216 * Math.random() << 0).toString(16)).substr(-6)" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.hitTest = function (a, b, c) {" & vbCrLf)
        fsT.Writetext("        var e = !1," & vbCrLf)
        fsT.Writetext("            h = a.x," & vbCrLf)
        fsT.Writetext("            f = a.x + a.width," & vbCrLf)
        fsT.Writetext("            g = a.y," & vbCrLf)
        fsT.Writetext("            k = a.y + a.height," & vbCrLf)
        fsT.Writetext("            l = d.isInRectangle;" & vbCrLf)
        fsT.Writetext("        e || (e = l(h, g, b));" & vbCrLf)
        fsT.Writetext("        e || (e = l(h, k, b));" & vbCrLf)
        fsT.Writetext("        e || (e = l(f, g, b));" & vbCrLf)
        fsT.Writetext("        e || (e = l(f, k, b));" & vbCrLf)
        fsT.Writetext("        e || !0 === c || (e = d.hitTest(b, a, !0));" & vbCrLf)
        fsT.Writetext("        return e" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.isInRectangle = function (a," & vbCrLf)
        fsT.Writetext("    b, c) {" & vbCrLf)
        fsT.Writetext("        return a >= c.x - 5 && a <= c.x + c.width + 5 && b >= c.y - 5 && b <= c.y + c.height + 5 ? !0 : !1" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.isPercents = function (a) {" & vbCrLf)
        fsT.Writetext("        if (-1 != String(a).indexOf(" & Chr(34) & "%" & Chr(34) & ")) return !0" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.findPosX = function (a) {" & vbCrLf)
        fsT.Writetext("        var b = a," & vbCrLf)
        fsT.Writetext("            c = a.offsetLeft;" & vbCrLf)
        fsT.Writetext("        if (a.offsetParent) {" & vbCrLf)
        fsT.Writetext("            for (; a = a.offsetParent;) c += a.offsetLeft;" & vbCrLf)
        fsT.Writetext("            for (;" & vbCrLf)
        fsT.Writetext("            (b = b.parentNode) && b != document.body;) c -= b.scrollLeft || 0" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("        return c" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.findPosY = function (a) {" & vbCrLf)
        fsT.Writetext("        var b = a," & vbCrLf)
        fsT.Writetext("            c = a.offsetTop;" & vbCrLf)
        fsT.Writetext("        if (a.offsetParent) {" & vbCrLf)
        fsT.Writetext("            for (; a = a.offsetParent;) c += a.offsetTop;" & vbCrLf)
        fsT.Writetext("            for (;" & vbCrLf)
        fsT.Writetext("            (b = b.parentNode) && b != document.body;) c -= b.scrollTop || 0" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("        return c" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.findIfFixed = function (a) {" & vbCrLf)
        fsT.Writetext("        if (a.offsetParent) for (; a = a.offsetParent;) if (" & Chr(34) & "fixed" & Chr(34) & " == d.getStyle(a, " & Chr(34) & "position" & Chr(34) & ")) return !0;" & vbCrLf)
        fsT.Writetext("        return !1" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.findIfAuto = function (a) {" & vbCrLf)
        fsT.Writetext("        return a.style && " & Chr(34) & "auto" & Chr(34) & " == d.getStyle(a, " & Chr(34) & "overflow" & Chr(34) & ") ? !0 : a.parentNode ? d.findIfAuto(a.parentNode) : !1" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.findScrollLeft = function (a, b) {" & vbCrLf)
        fsT.Writetext("        a.scrollLeft && (b += a.scrollLeft);" & vbCrLf)
        fsT.Writetext("        return a.parentNode ? d.findScrollLeft(a.parentNode, b) : b" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.findScrollTop = function (a, b) {" & vbCrLf)
        fsT.Writetext("        a.scrollTop && (b += a.scrollTop);" & vbCrLf)
        fsT.Writetext("        return a.parentNode ? d.findScrollTop(a.parentNode, b) : b" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.formatValue = function (a, b, c, e, h, f, g, k) {" & vbCrLf)
        fsT.Writetext("        if (b) {" & vbCrLf)
        fsT.Writetext("            void 0 === h && (h = " & Chr(34) & "" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            var l;" & vbCrLf)
        fsT.Writetext("            for (l = 0; l < c.length; l++) {" & vbCrLf)
        fsT.Writetext("                var m = c[l]," & vbCrLf)
        fsT.Writetext("                    n = b[m];" & vbCrLf)
        fsT.Writetext("                void 0 !== n && (n = f ? d.addPrefix(n, k, g, e) : d.formatNumber(n, e), a = a.replace(new RegExp(" & Chr(34) & "\\[\\[" & Chr(34) & " + h + " & Chr(34) & "" & Chr(34) & " + m + " & Chr(34) & "\\]\\]" & Chr(34) & ", " & Chr(34) & "g" & Chr(34) & "), n))" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("        return a" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.formatDataContextValue = function (a, b) {" & vbCrLf)
        fsT.Writetext("        if (a) {" & vbCrLf)
        fsT.Writetext("            var c = a.match(/\[\[.*?\]\]/g)," & vbCrLf)
        fsT.Writetext("                e;" & vbCrLf)
        fsT.Writetext("            for (e = 0; e < c.length; e++) {" & vbCrLf)
        fsT.Writetext("                var h = c[e]," & vbCrLf)
        fsT.Writetext("                    h = h.substr(2, h.length - 4);" & vbCrLf)
        fsT.Writetext("                void 0 !== b[h] && (a = a.replace(new RegExp(" & Chr(34) & "\\[\\[" & Chr(34) & " + h + " & Chr(34) & "\\]\\]" & Chr(34) & ", " & Chr(34) & "g" & Chr(34) & "), b[h]))" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("        return a" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.massReplace = function (a, b) {" & vbCrLf)
        fsT.Writetext("        for (var c in b) if (b.hasOwnProperty(c)) {" & vbCrLf)
        fsT.Writetext("            var e = b[c];" & vbCrLf)
        fsT.Writetext("            void 0 === e && (e = " & Chr(34) & "" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            a = a.replace(c, e)" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("        return a" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.cleanFromEmpty = function (a) {" & vbCrLf)
        fsT.Writetext("        return a.replace(/\[\[[^\]]*\]\]/g, " & Chr(34) & "" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.addPrefix = function (a, b, c, e, h) {" & vbCrLf)
        fsT.Writetext("        var f = d.formatNumber(a, e)," & vbCrLf)
        fsT.Writetext("            g = " & Chr(34) & "" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            k, l, m;" & vbCrLf)
        fsT.Writetext("        if (0 === a) return " & Chr(34) & "0" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("        0 > a && (g = " & Chr(34) & "-" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        a = Math.abs(a);" & vbCrLf)
        fsT.Writetext("        if (1 < a) for (k = b.length - 1; - 1 < k; k--) {" & vbCrLf)
        fsT.Writetext("            if (a >= b[k].number && (l = a / b[k].number, m = Number(e.precision), 1 > m && (m = 1), c = d.roundTo(l, m), m = d.formatNumber(c, {" & vbCrLf)
        fsT.Writetext("                precision: -1," & vbCrLf)
        fsT.Writetext("                decimalSeparator: e.decimalSeparator," & vbCrLf)
        fsT.Writetext("                thousandsSeparator: e.thousandsSeparator" & vbCrLf)
        fsT.Writetext("            }), !h || l == c)) {" & vbCrLf)
        fsT.Writetext("                f = g + " & Chr(34) & "" & Chr(34) & " + m + " & Chr(34) & "" & Chr(34) & " + b[k].prefix;" & vbCrLf)
        fsT.Writetext("                break" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        } else for (k = 0; k < c.length; k++) if (a <= c[k].number) {" & vbCrLf)
        fsT.Writetext("            l = a / c[k].number;" & vbCrLf)
        fsT.Writetext("            m = Math.abs(Math.round(Math.log(l) * Math.LOG10E));" & vbCrLf)
        fsT.Writetext("            l = d.roundTo(l, m);" & vbCrLf)
        fsT.Writetext("            f = g + " & Chr(34) & "" & Chr(34) & " + l + " & Chr(34) & "" & Chr(34) & " + c[k].prefix;" & vbCrLf)
        fsT.Writetext("            break" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("        return f" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.remove = function (a) {" & vbCrLf)
        fsT.Writetext("        a && a.remove()" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.getEffect = function (a) {" & vbCrLf)
        fsT.Writetext("        " & Chr(34) & ">" & Chr(34) & " == a && (a = " & Chr(34) & "easeOutSine" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        " & Chr(34) & "<" & Chr(34) & " == a && (a = " & Chr(34) & "easeInSine" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        " & Chr(34) & "elastic" & Chr(34) & " == a && (a = " & Chr(34) & "easeOutElastic" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        return a" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.getObjById = function (a, b) {" & vbCrLf)
        fsT.Writetext("        var c, e;" & vbCrLf)
        fsT.Writetext("        for (e = 0; e < a.length; e++) {" & vbCrLf)
        fsT.Writetext("            var h = a[e];" & vbCrLf)
        fsT.Writetext("            h.id == b && (c = h)" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("        return c" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.applyTheme = function (a, b, c) {" & vbCrLf)
        fsT.Writetext("        b || (b = d.theme);" & vbCrLf)
        fsT.Writetext("        b && b[c] && d.extend(a, b[c])" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.isString = function (a) {" & vbCrLf)
        fsT.Writetext("        return " & Chr(34) & "string" & Chr(34) & " == typeof a ? !0 : !1" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.extend = function (a, b, c) {" & vbCrLf)
        fsT.Writetext("        var e;" & vbCrLf)
        fsT.Writetext("        a || (a = {});" & vbCrLf)
        fsT.Writetext("        for (e in b) c ? a.hasOwnProperty(e) || (a[e] = b[e]) : a[e] = b[e];" & vbCrLf)
        fsT.Writetext("        return a" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.copyProperties = function (a, b) {" & vbCrLf)
        fsT.Writetext("        for (var c in a) a.hasOwnProperty(c) && " & Chr(34) & "events" & Chr(34) & " != c && void 0 !== a[c] && " & Chr(34) & "function" & Chr(34) & " != typeof a[c] && " & Chr(34) & "cname" & Chr(34) & " != c && (b[c] = a[c])" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.processObject = function (a, b, c, e) {" & vbCrLf)
        fsT.Writetext("        !1 === a instanceof b && (a = e ? d.extend(new b(c), a) : d.extend(a, new b(c), !0));" & vbCrLf)
        fsT.Writetext("        return a" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.fixNewLines = function (a) {" & vbCrLf)
        fsT.Writetext("        var b = RegExp(" & Chr(34) & "\\n" & Chr(34) & ", " & Chr(34) & "g" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        a && (a = a.replace(b, " & Chr(34) & "<br />" & Chr(34) & "));" & vbCrLf)
        fsT.Writetext("        return a" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.fixBrakes = function (a) {" & vbCrLf)
        fsT.Writetext("        if (d.isModern) {" & vbCrLf)
        fsT.Writetext("            var b = RegExp(" & Chr(34) & "<br>" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "g" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            a && (a = a.replace(b, " & Chr(34) & "\n" & Chr(34) & "))" & vbCrLf)
        fsT.Writetext("        } else a = d.fixNewLines(a);" & vbCrLf)
        fsT.Writetext("        return a" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.deleteObject = function (a, b) {" & vbCrLf)
        fsT.Writetext("        if (a) {" & vbCrLf)
        fsT.Writetext("            if (void 0 === b || null === b) b = 20;" & vbCrLf)
        fsT.Writetext("            if (0 !== b) if (" & Chr(34) & "[object Array]" & Chr(34) & " === Object.prototype.toString.call(a)) for (var c = 0; c < a.length; c++) d.deleteObject(a[c], b - 1), a[c] = null;" & vbCrLf)
        fsT.Writetext("            else if (a && !a.tagName) try {" & vbCrLf)
        fsT.Writetext("                for (c in a) a[c] && (" & Chr(34) & "object" & Chr(34) & " == typeof a[c] && d.deleteObject(a[c], b - 1), " & Chr(34) & "function" & Chr(34) & " != typeof a[c] && (a[c] = null))" & vbCrLf)
        fsT.Writetext("            } catch (e) {}" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.bounce = function (a, b, c, e, h) {" & vbCrLf)
        fsT.Writetext("        return (b /= h) < 1 / 2.75 ? 7.5625 * e * b * b + c : b < 2 / 2.75 ? e * (7.5625 * (b -= 1.5 / 2.75) * b + .75) + c : b < 2.5 / 2.75 ? e * (7.5625 * (b -= 2.25 / 2.75) * b + .9375) + c : e * (7.5625 * (b -= 2.625 / 2.75) * b + .984375) + c" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.easeInSine = function (a, b, c, e, h) {" & vbCrLf)
        fsT.Writetext("        return -e * Math.cos(b / h * (Math.PI / 2)) + e + c" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.easeOutSine = function (a, b, c, e, h) {" & vbCrLf)
        fsT.Writetext("        return e * Math.sin(b / h * (Math.PI / 2)) + c" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.easeOutElastic = function (a, b, c, e, h) {" & vbCrLf)
        fsT.Writetext("        a = 1.70158;" & vbCrLf)
        fsT.Writetext("        var d = 0," & vbCrLf)
        fsT.Writetext("            g = e;" & vbCrLf)
        fsT.Writetext("        if (0 === b) return c;" & vbCrLf)
        fsT.Writetext("        if (1 == (b /= h)) return c + e;" & vbCrLf)
        fsT.Writetext("        d || (d = .3 * h);" & vbCrLf)
        fsT.Writetext("        g < Math.abs(e) ? (g = e, a = d / 4) : a = d / (2 * Math.PI) * Math.asin(e / g);" & vbCrLf)
        fsT.Writetext("        return g * Math.pow(2, -10 * b) * Math.sin(2 * (b * h - a) * Math.PI / d) + e + c" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.fixStepE = function (a) {" & vbCrLf)
        fsT.Writetext("        a = a.toExponential(0).split(" & Chr(34) & "e" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        var b = Number(a[1]);" & vbCrLf)
        fsT.Writetext("        9 == Number(a[0]) && b++;" & vbCrLf)
        fsT.Writetext("        return d.generateNumber(1, b)" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.generateNumber = function (a, b) {" & vbCrLf)
        fsT.Writetext("        var c = " & Chr(34) & "" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            e;" & vbCrLf)
        fsT.Writetext("        e = 0 > b ? Math.abs(b) - 1 : Math.abs(b);" & vbCrLf)
        fsT.Writetext("        var h;" & vbCrLf)
        fsT.Writetext("        for (h = 0; h < e; h++) c += " & Chr(34) & "0" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("        return 0 > b ? Number(" & Chr(34) & "0." & Chr(34) & " + c + String(a)) : Number(String(a) + c)" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.setCN = function (a, b, c, e) {" & vbCrLf)
        fsT.Writetext("        if (a.addClassNames && b && (b = b.node) && c) {" & vbCrLf)
        fsT.Writetext("            var h = b.getAttribute(" & Chr(34) & "class" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            a = a.classNamePrefix + " & Chr(34) & "-" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            e && (a = " & Chr(34) & "" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            h ? b.setAttribute(" & Chr(34) & "class" & Chr(34) & ", h + " & Chr(34) & " " & Chr(34) & " + a + c) : b.setAttribute(" & Chr(34) & "class" & Chr(34) & ", a + c)" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.parseDefs = function (a, b) {" & vbCrLf)
        fsT.Writetext("        for (var c in a) {" & vbCrLf)
        fsT.Writetext("            var e = typeof a[c];" & vbCrLf)
        fsT.Writetext("            if (0 < a[c].length &&" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "object" & Chr(34) & " == e) for (var h = 0; h < a[c].length; h++) e = document.createElementNS(d.SVG_NS, c), b.appendChild(e), d.parseDefs(a[c][h], e);" & vbCrLf)
        fsT.Writetext("            else " & Chr(34) & "object" & Chr(34) & " == e ? (e = document.createElementNS(d.SVG_NS, c), b.appendChild(e), d.parseDefs(a[c], e)) : b.setAttribute(c, a[c])" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    }" & vbCrLf)
        fsT.Writetext("})();" & vbCrLf)
        fsT.Writetext("(function () {" & vbCrLf)
        fsT.Writetext("    var d = window.AmCharts;" & vbCrLf)
        fsT.Writetext("    d.AxisBase = d.Class({" & vbCrLf)
        fsT.Writetext("        construct: function (a) {" & vbCrLf)
        fsT.Writetext("            this.createEvents(" & Chr(34) & "clickItem" & Chr(34) & ", " & Chr(34) & "rollOverItem" & Chr(34) & ", " & Chr(34) & "rollOutItem" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            this.viY = this.viX = this.y = this.x = this.dy = this.dx = 0;" & vbCrLf)
        fsT.Writetext("            this.axisThickness = 1;" & vbCrLf)
        fsT.Writetext("            this.axisColor = " & Chr(34) & "#000000" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.axisAlpha = 1;" & vbCrLf)
        fsT.Writetext("            this.gridCount = this.tickLength = 5;" & vbCrLf)
        fsT.Writetext("            this.gridAlpha = .15;" & vbCrLf)
        fsT.Writetext("            this.gridThickness = 1;" & vbCrLf)
        fsT.Writetext("            this.gridColor = " & Chr(34) & "#000000" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.dashLength = 0;" & vbCrLf)
        fsT.Writetext("            this.labelFrequency = 1;" & vbCrLf)
        fsT.Writetext("            this.showLastLabel = this.showFirstLabel = !0;" & vbCrLf)
        fsT.Writetext("            this.fillColor = " & Chr(34) & "#FFFFFF" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.fillAlpha = 0;" & vbCrLf)
        fsT.Writetext("            this.labelsEnabled = !0;" & vbCrLf)
        fsT.Writetext("            this.labelRotation = 0;" & vbCrLf)
        fsT.Writetext("            this.autoGridCount = !0;" & vbCrLf)
        fsT.Writetext("            this.offset = 0;" & vbCrLf)
        fsT.Writetext("            this.guides = [];" & vbCrLf)
        fsT.Writetext("            this.visible = !0;" & vbCrLf)
        fsT.Writetext("            this.counter = 0;" & vbCrLf)
        fsT.Writetext("            this.guides = [];" & vbCrLf)
        fsT.Writetext("            this.ignoreAxisWidth = this.inside = !1;" & vbCrLf)
        fsT.Writetext("            this.minHorizontalGap = 75;" & vbCrLf)
        fsT.Writetext("            this.minVerticalGap = 35;" & vbCrLf)
        fsT.Writetext("            this.titleBold = !0;" & vbCrLf)
        fsT.Writetext("            this.minorGridEnabled = !1;" & vbCrLf)
        fsT.Writetext("            this.minorGridAlpha = .07;" & vbCrLf)
        fsT.Writetext("            this.autoWrap = !1;" & vbCrLf)
        fsT.Writetext("            this.titleAlign = " & Chr(34) & "middle" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.labelOffset = 0;" & vbCrLf)
        fsT.Writetext("            this.bcn = " & Chr(34) & "axis-" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.periods = [{" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "ss" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                count: 1" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "ss" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                count: 5" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "ss" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                count: 10" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "ss" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                count: 30" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "mm" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                count: 1" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "mm" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                count: 5" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "mm" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                count: 10" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "mm" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                count: 30" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "hh" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                count: 1" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "hh" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                count: 3" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "hh" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                count: 6" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "hh" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                count: 12" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "DD" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                count: 1" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "DD" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                count: 2" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "DD" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                count: 3" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "DD" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                count: 4" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "DD" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                count: 5" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "WW" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                count: 1" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "MM" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                count: 1" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "MM" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                count: 2" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "MM" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                count: 3" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "MM" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                count: 6" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "YYYY" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                count: 1" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "YYYY" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                count: 2" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "YYYY" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                count: 5" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "YYYY" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                count: 10" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "YYYY" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                count: 50" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "YYYY" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                count: 100" & vbCrLf)
        fsT.Writetext("            }];" & vbCrLf)
        fsT.Writetext("            this.dateFormats = [{" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "fff" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                format: " & Chr(34) & "JJ:NN:SS" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "ss" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                format: " & Chr(34) & "JJ:NN:SS" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "mm" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                format: " & Chr(34) & "JJ:NN" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "hh" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                format: " & Chr(34) & "JJ:NN" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "DD" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                format: " & Chr(34) & "MMM DD" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "WW" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                format: " & Chr(34) & "MMM DD" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "MM" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                format: " & Chr(34) & "MMM" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                period: " & Chr(34) & "YYYY" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                format: " & Chr(34) & "YYYY" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }];" & vbCrLf)
        fsT.Writetext("            this.nextPeriod = {" & vbCrLf)
        fsT.Writetext("                fff: " & Chr(34) & "ss" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                ss: " & Chr(34) & "mm" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                mm: " & Chr(34) & "hh" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                hh: " & Chr(34) & "DD" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                DD: " & Chr(34) & "MM" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                MM: " & Chr(34) & "YYYY" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            };" & vbCrLf)
        fsT.Writetext("            d.applyTheme(this, a, " & Chr(34) & "AxisBase" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        zoom: function (a, b) {" & vbCrLf)
        fsT.Writetext("            this.start = a;" & vbCrLf)
        fsT.Writetext("            this.end = b;" & vbCrLf)
        fsT.Writetext("            this.dataChanged = !0;" & vbCrLf)
        fsT.Writetext("            this.draw()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        fixAxisPosition: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.position;" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "H" & Chr(34) & " == this.orientation ? (" & Chr(34) & "left" & Chr(34) & " == a && (a = " & Chr(34) & "bottom" & Chr(34) & "), " & Chr(34) & "right" & Chr(34) & " == a && (a = " & Chr(34) & "top" & Chr(34) & ")) : (" & Chr(34) & "bottom" & Chr(34) & " == a && (a = " & Chr(34) & "left" & Chr(34) & "), " & Chr(34) & "top" & Chr(34) & " == a && (a = " & Chr(34) & "right" & Chr(34) & "));" & vbCrLf)
        fsT.Writetext("            this.position = a" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        draw: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.chart;" & vbCrLf)
        fsT.Writetext("            this.allLabels = [];" & vbCrLf)
        fsT.Writetext("            this.counter = 0;" & vbCrLf)
        fsT.Writetext("            this.destroy();" & vbCrLf)
        fsT.Writetext("            this.fixAxisPosition();" & vbCrLf)
        fsT.Writetext("            this.labels = [];" & vbCrLf)
        fsT.Writetext("            var b = a.container," & vbCrLf)
        fsT.Writetext("                c = b.set();" & vbCrLf)
        fsT.Writetext("            a.gridSet.push(c);" & vbCrLf)
        fsT.Writetext("            this.set = c;" & vbCrLf)
        fsT.Writetext("            b = b.set();" & vbCrLf)
        fsT.Writetext("            a.axesLabelsSet.push(b);" & vbCrLf)
        fsT.Writetext("            this.labelsSet = b;" & vbCrLf)
        fsT.Writetext("            this.axisLine = new this.axisRenderer(this);" & vbCrLf)
        fsT.Writetext("            this.autoGridCount ? (" & Chr(34) & "V" & Chr(34) & " == this.orientation ? (a = this.height / this.minVerticalGap, 3 > a && (a = 3)) : a = this.width / this.minHorizontalGap, this.gridCountR = Math.max(a, 1)) : this.gridCountR = this.gridCount;" & vbCrLf)
        fsT.Writetext("            this.axisWidth = this.axisLine.axisWidth;" & vbCrLf)
        fsT.Writetext("            this.addTitle()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        setOrientation: function (a) {" & vbCrLf)
        fsT.Writetext("            this.orientation = a ? " & Chr(34) & "H" & Chr(34) & " : " & Chr(34) & "V" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        addTitle: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.title;" & vbCrLf)
        fsT.Writetext("            this.titleLabel = null;" & vbCrLf)
        fsT.Writetext("            if (a) {" & vbCrLf)
        fsT.Writetext("                var b = this.chart," & vbCrLf)
        fsT.Writetext("                    c = this.titleColor;" & vbCrLf)
        fsT.Writetext("                void 0 === c && (c = b.color);" & vbCrLf)
        fsT.Writetext("                var e = this.titleFontSize;" & vbCrLf)
        fsT.Writetext("                isNaN(e) && (e = b.fontSize + 1);" & vbCrLf)
        fsT.Writetext("                a = d.text(b.container, a, c, b.fontFamily, e, this.titleAlign, this.titleBold);" & vbCrLf)
        fsT.Writetext("                d.setCN(b, a, this.bcn + " & Chr(34) & "title" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                this.titleLabel = a" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        positionTitle: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.titleLabel;" & vbCrLf)
        fsT.Writetext("            if (a) {" & vbCrLf)
        fsT.Writetext("                var b, c, e = this.labelsSet," & vbCrLf)
        fsT.Writetext("                    h = {};" & vbCrLf)
        fsT.Writetext("                0 < e.length() ? h = e.getBBox() : (h.x = 0, h.y = 0, h.width = this.viW, h.height = this.viH, d.VML && (h.y += this.y, h.x += this.x));" & vbCrLf)
        fsT.Writetext("                e.push(a);" & vbCrLf)
        fsT.Writetext("                var e = h.x," & vbCrLf)
        fsT.Writetext("                    f = h.y;" & vbCrLf)
        fsT.Writetext("                d.VML && (this.rotate ? e -= this.x : f -= this.y);" & vbCrLf)
        fsT.Writetext("                var g = h.width," & vbCrLf)
        fsT.Writetext("                    h = h.height," & vbCrLf)
        fsT.Writetext("                    k = this.viW," & vbCrLf)
        fsT.Writetext("                    l = this.viH," & vbCrLf)
        fsT.Writetext("                    m = 0," & vbCrLf)
        fsT.Writetext("                    n = a.getBBox().height / 2," & vbCrLf)
        fsT.Writetext("                    q = this.inside," & vbCrLf)
        fsT.Writetext("                    p = this.titleAlign;" & vbCrLf)
        fsT.Writetext("                switch (this.position) {" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "top" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        b = " & Chr(34) & "left" & Chr(34) & " == p ? -1 : " & Chr(34) & "right" & Chr(34) & " == p ? k : k / 2;" & vbCrLf)
        fsT.Writetext("                        c = f - 10 - n;" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "bottom" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        b = " & Chr(34) & "left" & Chr(34) & " == p ? -1 : " & Chr(34) & "right" & Chr(34) & " == p ? k : k / 2;" & vbCrLf)
        fsT.Writetext("                        c = f + h + 10 + n;" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "left" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        b = e - 10 - n;" & vbCrLf)
        fsT.Writetext("                        q && (b -= 5);" & vbCrLf)
        fsT.Writetext("                        c = " & Chr(34) & "left" & Chr(34) & " == p ? l + 1 : " & Chr(34) & "right" & Chr(34) & " == p ? -1 : l / 2;" & vbCrLf)
        fsT.Writetext("                        m = -90;" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "right" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        b = e + g + 10 + n - 3, q && (b += 7), c = " & Chr(34) & "left" & Chr(34) & " == p ? l + 2 : " & Chr(34) & "right" & Chr(34) & " == p ? -2 : l / 2, m = -90" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("                this.marginsChanged ? (a.translate(b, c), this.tx = b, this.ty = c) : a.translate(this.tx, this.ty);" & vbCrLf)
        fsT.Writetext("                this.marginsChanged = !1;" & vbCrLf)
        fsT.Writetext("                0 !== m && a.rotate(m)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        pushAxisItem: function (a, b) {" & vbCrLf)
        fsT.Writetext("            var c = this," & vbCrLf)
        fsT.Writetext("                e = a.graphics();" & vbCrLf)
        fsT.Writetext("            0 < e.length() && (b ? c.labelsSet.push(e) : c.set.push(e));" & vbCrLf)
        fsT.Writetext("            if (e = a.getLabel()) this.labelsSet.push(e), e.click(function (b) {" & vbCrLf)
        fsT.Writetext("                c.handleMouse(b, a, " & Chr(34) & "clickItem" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("            }).mouseover(function (b) {" & vbCrLf)
        fsT.Writetext("                c.handleMouse(b, a, " & Chr(34) & "rollOverItem" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("            }).mouseout(function (b) {" & vbCrLf)
        fsT.Writetext("                c.handleMouse(b," & vbCrLf)
        fsT.Writetext("                a, " & Chr(34) & "rollOutItem" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("            })" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleMouse: function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            this.fire(c, {" & vbCrLf)
        fsT.Writetext("                type: c," & vbCrLf)
        fsT.Writetext("                value: b.value," & vbCrLf)
        fsT.Writetext("                serialDataItem: b.serialDataItem," & vbCrLf)
        fsT.Writetext("                axis: this," & vbCrLf)
        fsT.Writetext("                target: b.label," & vbCrLf)
        fsT.Writetext("                chart: this.chart," & vbCrLf)
        fsT.Writetext("                event: a" & vbCrLf)
        fsT.Writetext("            })" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        addGuide: function (a) {" & vbCrLf)
        fsT.Writetext("            for (var b = this.guides, c = !1, e = b.length, h = 0; h < b.length; h++) b[h] == a && (c = !0, e = h);" & vbCrLf)
        fsT.Writetext("            a = d.processObject(a, d.Guide, this.theme);" & vbCrLf)
        fsT.Writetext("            a.id || (a.id = " & Chr(34) & "guideAuto" & Chr(34) & " + e + " & Chr(34) & "_" & Chr(34) & " + (new Date).getTime());" & vbCrLf)
        fsT.Writetext("            c || b.push(a)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        removeGuide: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = this.guides," & vbCrLf)
        fsT.Writetext("                c;" & vbCrLf)
        fsT.Writetext("            for (c = 0; c < b.length; c++) b[c] == a && b.splice(c, 1)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleGuideOver: function (a) {" & vbCrLf)
        fsT.Writetext("            clearTimeout(this.chart.hoverInt);" & vbCrLf)
        fsT.Writetext("            var b = a.graphics.getBBox()," & vbCrLf)
        fsT.Writetext("                c = b.x + b.width / 2," & vbCrLf)
        fsT.Writetext("                b = b.y + b.height / 2," & vbCrLf)
        fsT.Writetext("                e = a.fillColor;" & vbCrLf)
        fsT.Writetext("            void 0 === e && (e = a.lineColor);" & vbCrLf)
        fsT.Writetext("            this.chart.showBalloon(a.balloonText, e, !0, c, b)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleGuideOut: function () {" & vbCrLf)
        fsT.Writetext("            this.chart.hideBalloon()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        addEventListeners: function (a, b) {" & vbCrLf)
        fsT.Writetext("            var c = this;" & vbCrLf)
        fsT.Writetext("            a.mouseover(function () {" & vbCrLf)
        fsT.Writetext("                c.handleGuideOver(b)" & vbCrLf)
        fsT.Writetext("            });" & vbCrLf)
        fsT.Writetext("            a.touchstart(function () {" & vbCrLf)
        fsT.Writetext("                c.handleGuideOver(b)" & vbCrLf)
        fsT.Writetext("            });" & vbCrLf)
        fsT.Writetext("            a.mouseout(function () {" & vbCrLf)
        fsT.Writetext("                c.handleGuideOut(b)" & vbCrLf)
        fsT.Writetext("            })" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getBBox: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.labelsSet.getBBox();" & vbCrLf)
        fsT.Writetext("            d.VML || (a = {" & vbCrLf)
        fsT.Writetext("                x: a.x + this.x," & vbCrLf)
        fsT.Writetext("                y: a.y + this.y," & vbCrLf)
        fsT.Writetext("                width: a.width," & vbCrLf)
        fsT.Writetext("                height: a.height" & vbCrLf)
        fsT.Writetext("            });" & vbCrLf)
        fsT.Writetext("            return a" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        destroy: function () {" & vbCrLf)
        fsT.Writetext("            d.remove(this.set);" & vbCrLf)
        fsT.Writetext("            d.remove(this.labelsSet);" & vbCrLf)
        fsT.Writetext("            var a = this.axisLine;" & vbCrLf)
        fsT.Writetext("            a && d.remove(a.set);" & vbCrLf)
        fsT.Writetext("            d.remove(this.grid0)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        chooseMinorFrequency: function (a) {" & vbCrLf)
        fsT.Writetext("            for (var b = 10; 0 < b; b--) if (a / b == Math.round(a / b)) return a / b" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        parseDatesDraw: function () {" & vbCrLf)
        fsT.Writetext("            var a, b = this.chart," & vbCrLf)
        fsT.Writetext("                c = this.showFirstLabel," & vbCrLf)
        fsT.Writetext("                e = this.showLastLabel," & vbCrLf)
        fsT.Writetext("                h, f = " & Chr(34) & "" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                g = d.extractPeriod(this.minPeriod)," & vbCrLf)
        fsT.Writetext("                k = d.getPeriodDuration(g.period, g.count)," & vbCrLf)
        fsT.Writetext("                l, m, n, q, p, r = this.firstDayOfWeek," & vbCrLf)
        fsT.Writetext("                t = this.boldPeriodBeginning;" & vbCrLf)
        fsT.Writetext("            a = this.minorGridEnabled;" & vbCrLf)
        fsT.Writetext("            var u, z = this.gridAlpha," & vbCrLf)
        fsT.Writetext("                v," & vbCrLf)
        fsT.Writetext("                w = this.choosePeriod(0)," & vbCrLf)
        fsT.Writetext("                x = w.period," & vbCrLf)
        fsT.Writetext("                w = w.count," & vbCrLf)
        fsT.Writetext("                A = d.getPeriodDuration(x, w);" & vbCrLf)
        fsT.Writetext("            A < k && (x = g.period, w = g.count, A = k);" & vbCrLf)
        fsT.Writetext("            g = x;" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "WW" & Chr(34) & " == g && (g = " & Chr(34) & "DD" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            this.stepWidth = this.getStepWidth(this.timeDifference);" & vbCrLf)
        fsT.Writetext("            var B = Math.ceil(this.timeDifference / A) + 5," & vbCrLf)
        fsT.Writetext("                D = l = d.resetDateToMin(new Date(this.startTime - A), x, w, r).getTime();" & vbCrLf)
        fsT.Writetext("            g == x && 1 == w && this.centerLabelOnFullPeriod && (n = A * this.stepWidth);" & vbCrLf)
        fsT.Writetext("            this.cellWidth = k * this.stepWidth;" & vbCrLf)
        fsT.Writetext("            q = Math.round(l / A);" & vbCrLf)
        fsT.Writetext("            k = -1;" & vbCrLf)
        fsT.Writetext("            q / 2 == Math.round(q / 2) && (k = -2, l -= A);" & vbCrLf)
        fsT.Writetext("            q = this.firstTime;" & vbCrLf)
        fsT.Writetext("            var C = 0;" & vbCrLf)
        fsT.Writetext("            a && 1 < w && (u = this.chooseMinorFrequency(w)," & vbCrLf)
        fsT.Writetext("            v = d.getPeriodDuration(x, u));" & vbCrLf)
        fsT.Writetext("            if (0 < this.gridCountR) for (a = k; a <= B; a++) {" & vbCrLf)
        fsT.Writetext("                p = q + A * (a + Math.floor((D - q) / A)) - C;" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "DD" & Chr(34) & " == x && (p += 36E5);" & vbCrLf)
        fsT.Writetext("                p = d.resetDateToMin(new Date(p), x, w, r).getTime();" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "MM" & Chr(34) & " == x && (h = (p - l) / A, 1.5 <= (p - l) / A && (p = p - (h - 1) * A + d.getPeriodDuration(" & Chr(34) & "DD" & Chr(34) & ", 3), p = d.resetDateToMin(new Date(p), x, 1).getTime(), C += A));" & vbCrLf)
        fsT.Writetext("                h = (p - this.startTime) * this.stepWidth;" & vbCrLf)
        fsT.Writetext("                h = this.rotate ? h + (this.x - this.viX) : " & Chr(34) & "date" & Chr(34) & " == this.type ? this.axisWidth - h + (this.y - this.viY) : h + (this.y - this.viY);" & vbCrLf)
        fsT.Writetext("                f = !1;" & vbCrLf)
        fsT.Writetext("                this.nextPeriod[g] && (f = this.checkPeriodChange(this.nextPeriod[g]," & vbCrLf)
        fsT.Writetext("                1, p, l, g));" & vbCrLf)
        fsT.Writetext("                l = !1;" & vbCrLf)
        fsT.Writetext("                f && this.markPeriodChange ? (f = this.dateFormatsObject[this.nextPeriod[g]], this.twoLineMode && (f = this.dateFormatsObject[g] + " & Chr(34) & "\n" & Chr(34) & " + f, f = d.fixBrakes(f)), l = !0) : f = this.dateFormatsObject[g];" & vbCrLf)
        fsT.Writetext("                t || (l = !1);" & vbCrLf)
        fsT.Writetext("                this.currentDateFormat = f;" & vbCrLf)
        fsT.Writetext("                f = d.formatDate(new Date(p), f, b);" & vbCrLf)
        fsT.Writetext("                if (a == k && !c || a == B && !e) f = " & Chr(34) & " " & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                this.labelFunction && (f = this.labelFunction(f, new Date(p), this, x, w, m).toString());" & vbCrLf)
        fsT.Writetext("                this.boldLabels && (l = !0);" & vbCrLf)
        fsT.Writetext("                m = new this.axisItemRenderer(this, h, f, !1, n, 0, !1, l);" & vbCrLf)
        fsT.Writetext("                this.pushAxisItem(m);" & vbCrLf)
        fsT.Writetext("                m = l = p;" & vbCrLf)
        fsT.Writetext("                if (!isNaN(u)) for (h = 1; h < w; h += u) this.gridAlpha = this.minorGridAlpha, f = p + v * h, f = d.resetDateToMin(new Date(f), x, u, r).getTime(), f = new this.axisItemRenderer(this, (f - this.startTime) * this.stepWidth, void 0, void 0, void 0, void 0, void 0, void 0, void 0, !0), this.pushAxisItem(f);" & vbCrLf)
        fsT.Writetext("                this.gridAlpha = z" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        choosePeriod: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = d.getPeriodDuration(this.periods[a].period, this.periods[a].count)," & vbCrLf)
        fsT.Writetext("                c = Math.ceil(this.timeDifference / b)," & vbCrLf)
        fsT.Writetext("                e = this.periods;" & vbCrLf)
        fsT.Writetext("            return this.timeDifference < b && 0 < a ? e[a - 1] : c <= this.gridCountR ? e[a] : a + 1 < e.length ? this.choosePeriod(a + 1) : e[a]" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getStepWidth: function (a) {" & vbCrLf)
        fsT.Writetext("            var b;" & vbCrLf)
        fsT.Writetext("            this.startOnAxis ? (b = this.axisWidth / (a - 1), 1 == a && (b = this.axisWidth)) : b = this.axisWidth / a;" & vbCrLf)
        fsT.Writetext("            return b" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        timeZoom: function (a, b) {" & vbCrLf)
        fsT.Writetext("            this.startTime = a;" & vbCrLf)
        fsT.Writetext("            this.endTime = b" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        minDuration: function () {" & vbCrLf)
        fsT.Writetext("            var a = d.extractPeriod(this.minPeriod);" & vbCrLf)
        fsT.Writetext("            return d.getPeriodDuration(a.period, a.count)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        checkPeriodChange: function (a, b, c, e, h) {" & vbCrLf)
        fsT.Writetext("            c = new Date(c);" & vbCrLf)
        fsT.Writetext("            var f = new Date(e)," & vbCrLf)
        fsT.Writetext("                g = this.firstDayOfWeek;" & vbCrLf)
        fsT.Writetext("            e = b;" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "DD" & Chr(34) & " == a && (b = 1);" & vbCrLf)
        fsT.Writetext("            c = d.resetDateToMin(c, a, b, g).getTime();" & vbCrLf)
        fsT.Writetext("            b = d.resetDateToMin(f, a, b, g).getTime();" & vbCrLf)
        fsT.Writetext("            return " & Chr(34) & "DD" & Chr(34) & " == a && " & Chr(34) & "hh" & Chr(34) & " != h && c - b <= d.getPeriodDuration(a, e) ? !1 : c != b ? !0 : !1" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        generateDFObject: function () {" & vbCrLf)
        fsT.Writetext("            this.dateFormatsObject = {};" & vbCrLf)
        fsT.Writetext("            var a;" & vbCrLf)
        fsT.Writetext("            for (a = 0; a < this.dateFormats.length; a++) {" & vbCrLf)
        fsT.Writetext("                var b = this.dateFormats[a];" & vbCrLf)
        fsT.Writetext("                this.dateFormatsObject[b.period] = b.format" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    })" & vbCrLf)
        fsT.Writetext("})();" & vbCrLf)
        fsT.Writetext("(function () {" & vbCrLf)
        fsT.Writetext("    var d = window.AmCharts;" & vbCrLf)
        fsT.Writetext("    d.ValueAxis = d.Class({" & vbCrLf)
        fsT.Writetext("        inherits: d.AxisBase," & vbCrLf)
        fsT.Writetext("        construct: function (a) {" & vbCrLf)
        fsT.Writetext("            this.cname = " & Chr(34) & "ValueAxis" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.createEvents(" & Chr(34) & "axisChanged" & Chr(34) & ", " & Chr(34) & "logarithmicAxisFailed" & Chr(34) & ", " & Chr(34) & "axisSelfZoomed" & Chr(34) & ", " & Chr(34) & "axisZoomed" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            d.ValueAxis.base.construct.call(this, a);" & vbCrLf)
        fsT.Writetext("            this.dataChanged = !0;" & vbCrLf)
        fsT.Writetext("            this.stackType = " & Chr(34) & "none" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.position = " & Chr(34) & "left" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.unitPosition = " & Chr(34) & "right" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.recalculateToPercents = this.includeHidden = this.includeGuidesInMinMax = this.integersOnly = !1;" & vbCrLf)
        fsT.Writetext("            this.durationUnits = {" & vbCrLf)
        fsT.Writetext("                DD: " & Chr(34) & "d. " & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                hh: " & Chr(34) & ":" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                mm: " & Chr(34) & ":" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                ss: " & Chr(34) & "" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            };" & vbCrLf)
        fsT.Writetext("            this.scrollbar = !1;" & vbCrLf)
        fsT.Writetext("            this.baseValue = 0;" & vbCrLf)
        fsT.Writetext("            this.radarCategoriesEnabled = !0;" & vbCrLf)
        fsT.Writetext("            this.gridType = " & Chr(34) & "polygons" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.useScientificNotation = !1;" & vbCrLf)
        fsT.Writetext("            this.axisTitleOffset = 10;" & vbCrLf)
        fsT.Writetext("            this.minMaxMultiplier = 1;" & vbCrLf)
        fsT.Writetext("            this.logGridLimit = 2;" & vbCrLf)
        fsT.Writetext("            this.totalTextOffset = this.treatZeroAs = 0;" & vbCrLf)
        fsT.Writetext("            this.minPeriod = " & Chr(34) & "ss" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            d.applyTheme(this, a, this.cname)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateData: function () {" & vbCrLf)
        fsT.Writetext("            0 >= this.gridCountR && (this.gridCountR = 1);" & vbCrLf)
        fsT.Writetext("            this.totals = [];" & vbCrLf)
        fsT.Writetext("            this.data = this.chart.chartData;" & vbCrLf)
        fsT.Writetext("            var a = this.chart;" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "xy" & Chr(34) & " != a.type && (this.stackGraphs(" & Chr(34) & "smoothedLine" & Chr(34) & "), this.stackGraphs(" & Chr(34) & "line" & Chr(34) & "), this.stackGraphs(" & Chr(34) & "column" & Chr(34) & "), this.stackGraphs(" & Chr(34) & "step" & Chr(34) & "));" & vbCrLf)
        fsT.Writetext("            this.recalculateToPercents && this.recalculate();" & vbCrLf)
        fsT.Writetext("            this.synchronizationMultiplier && this.synchronizeWith ? (d.isString(this.synchronizeWith) && (this.synchronizeWith = a.getValueAxisById(this.synchronizeWith)), this.synchronizeWith && (this.synchronizeWithAxis(this.synchronizeWith), this.foundGraphs = !0)) : (this.foundGraphs = !1, this.getMinMax())" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        draw: function () {" & vbCrLf)
        fsT.Writetext("            d.ValueAxis.base.draw.call(this);" & vbCrLf)
        fsT.Writetext("            var a = this.chart," & vbCrLf)
        fsT.Writetext("                b = this.set;" & vbCrLf)
        fsT.Writetext("            d.setCN(a, this.set, " & Chr(34) & "value-axis value-axis-" & Chr(34) & " + this.id);" & vbCrLf)
        fsT.Writetext("            d.setCN(a, this.labelsSet, " & Chr(34) & "value-axis value-axis-" & Chr(34) & " + this.id);" & vbCrLf)
        fsT.Writetext("            d.setCN(a," & vbCrLf)
        fsT.Writetext("            this.axisLine.axisSet, " & Chr(34) & "value-axis value-axis-" & Chr(34) & " + this.id);" & vbCrLf)
        fsT.Writetext("            var c = this.type;" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "duration" & Chr(34) & " == c && (this.duration = " & Chr(34) & "ss" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            !0 === this.dataChanged && (this.updateData(), this.dataChanged = !1);" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "date" & Chr(34) & " == c && (this.logarithmic = !1, this.min = this.minRR, this.max = this.maxRR, this.minimumDate && (this.min = this.minimumDate.getTime()), this.maximumDate && (this.max = this.maximumDate.getTime()));" & vbCrLf)
        fsT.Writetext("            if (this.logarithmic) {" & vbCrLf)
        fsT.Writetext("                var e = this.treatZeroAs," & vbCrLf)
        fsT.Writetext("                    h = this.getMin(0, this.data.length - 1);" & vbCrLf)
        fsT.Writetext("                this.minReal < h && (this.minReal = h);" & vbCrLf)
        fsT.Writetext("                isNaN(this.minReal) && (this.minReal = h);" & vbCrLf)
        fsT.Writetext("                0 < e && 0 === h && (this.minReal = h = e);" & vbCrLf)
        fsT.Writetext("                if (0 >= h || 0 >= this.minimum) {" & vbCrLf)
        fsT.Writetext("                    this.fire(" & Chr(34) & "logarithmicAxisFailed" & Chr(34) & ", {" & vbCrLf)
        fsT.Writetext("                        type: " & Chr(34) & "logarithmicAxisFailed" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                        chart: a" & vbCrLf)
        fsT.Writetext("                    });" & vbCrLf)
        fsT.Writetext("                    return" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            this.grid0 = null;" & vbCrLf)
        fsT.Writetext("            var f, g, k = a.dx," & vbCrLf)
        fsT.Writetext("                l = a.dy," & vbCrLf)
        fsT.Writetext("                e = !1," & vbCrLf)
        fsT.Writetext("                h = this.logarithmic;" & vbCrLf)
        fsT.Writetext("            if (isNaN(this.min) || isNaN(this.max) || !this.foundGraphs || Infinity == this.min || -Infinity == this.max) e = !0;" & vbCrLf)
        fsT.Writetext("            else {" & vbCrLf)
        fsT.Writetext("                var m = this.labelFrequency," & vbCrLf)
        fsT.Writetext("                    n = this.showFirstLabel," & vbCrLf)
        fsT.Writetext("                    q = this.showLastLabel," & vbCrLf)
        fsT.Writetext("                    p = 1;" & vbCrLf)
        fsT.Writetext("                f = 0;" & vbCrLf)
        fsT.Writetext("                this.minCalc = this.min;" & vbCrLf)
        fsT.Writetext("                this.maxCalc = this.max;" & vbCrLf)
        fsT.Writetext("                this.strictMinMax && (isNaN(this.minimum) || (this.min = this.minimum), isNaN(this.maximum) || (this.max = this.maximum));" & vbCrLf)
        fsT.Writetext("                isNaN(this.minZoom) || (this.min = this.minZoom);" & vbCrLf)
        fsT.Writetext("                isNaN(this.maxZoom) || (this.max = this.maxZoom);" & vbCrLf)
        fsT.Writetext("                var r = Math.round((this.maxCalc - this.minCalc) / this.step) + 1," & vbCrLf)
        fsT.Writetext("                    t;" & vbCrLf)
        fsT.Writetext("                !0 === h ? (t = Math.log(this.max) * Math.LOG10E - Math.log(this.minReal) * Math.LOG10E, this.stepWidth = this.axisWidth / t, t > this.logGridLimit && (r = Math.ceil(Math.log(this.max) * Math.LOG10E) + 1, f = Math.round(Math.log(this.minReal) * Math.LOG10E), r > this.gridCountR && (p = Math.ceil(r / this.gridCountR)))) : this.stepWidth = this.axisWidth / (this.max - this.min);" & vbCrLf)
        fsT.Writetext("                var u = 0;" & vbCrLf)
        fsT.Writetext("                1 > this.step && -1 < this.step && (u = d.getDecimals(this.step));" & vbCrLf)
        fsT.Writetext("                this.integersOnly && (u = 0);" & vbCrLf)
        fsT.Writetext("                u > this.maxDecCount && (u = this.maxDecCount);" & vbCrLf)
        fsT.Writetext("                var z = this.precision;" & vbCrLf)
        fsT.Writetext("                isNaN(z) || (u = z);" & vbCrLf)
        fsT.Writetext("                this.max = d.roundTo(this.max, this.maxDecCount);" & vbCrLf)
        fsT.Writetext("                this.min = d.roundTo(this.min, this.maxDecCount);" & vbCrLf)
        fsT.Writetext("                g = {};" & vbCrLf)
        fsT.Writetext("                g.precision = u;" & vbCrLf)
        fsT.Writetext("                g.decimalSeparator = a.nf.decimalSeparator;" & vbCrLf)
        fsT.Writetext("                g.thousandsSeparator = a.nf.thousandsSeparator;" & vbCrLf)
        fsT.Writetext("                this.numberFormatter = g;" & vbCrLf)
        fsT.Writetext("                var v, w = this.guides," & vbCrLf)
        fsT.Writetext("                    x = w.length;" & vbCrLf)
        fsT.Writetext("                if (0 < x) {" & vbCrLf)
        fsT.Writetext("                    var A = this.fillAlpha;" & vbCrLf)
        fsT.Writetext("                    for (g = this.fillAlpha = 0; g < x; g++) {" & vbCrLf)
        fsT.Writetext("                        var B = w[g]," & vbCrLf)
        fsT.Writetext("                            D = NaN," & vbCrLf)
        fsT.Writetext("                            C = B.above;" & vbCrLf)
        fsT.Writetext("                        isNaN(B.toValue) || (D = this.getCoordinate(B.toValue), v = new this.axisItemRenderer(this, D, " & Chr(34) & "" & Chr(34) & ", !0, NaN, NaN, B), this.pushAxisItem(v, C));" & vbCrLf)
        fsT.Writetext("                        var I = NaN;" & vbCrLf)
        fsT.Writetext("                        isNaN(B.value) || (I = this.getCoordinate(B.value), v = new this.axisItemRenderer(this, I, B.label, !0, NaN, (D - I) / 2, B), this.pushAxisItem(v, C));" & vbCrLf)
        fsT.Writetext("                        isNaN(D - I) || (v = new this.guideFillRenderer(this, I, D, B), this.pushAxisItem(v, C), v = v.graphics(), B.graphics = v, B.balloonText && this.addEventListeners(v, B))" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                    this.fillAlpha = A" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("                this.exponential = !1;" & vbCrLf)
        fsT.Writetext("                for (g = f; g < r; g += p) w = d.roundTo(this.step * g + this.min," & vbCrLf)
        fsT.Writetext("                u), -1 != String(w).indexOf(" & Chr(34) & "e" & Chr(34) & ") && (this.exponential = !0);" & vbCrLf)
        fsT.Writetext("                this.duration && (this.maxInterval = d.getMaxInterval(this.max, this.duration));" & vbCrLf)
        fsT.Writetext("                var u = this.step," & vbCrLf)
        fsT.Writetext("                    H, w = this.minorGridAlpha;" & vbCrLf)
        fsT.Writetext("                this.minorGridEnabled && (H = this.getMinorGridStep(u, this.stepWidth * u));" & vbCrLf)
        fsT.Writetext("                if (" & Chr(34) & "date" & Chr(34) & " == c) this.generateDFObject(), this.timeDifference = this.max - this.min, this.maxTime = this.lastTime = this.max, this.startTime = this.firstTime = this.min, this.parseDatesDraw();" & vbCrLf)
        fsT.Writetext("                else for (g = f; g < r; g += p) if (c = u * g + this.minCalc, h && this.max - this.min > 10 * this.min && (c -= this.min)," & vbCrLf)
        fsT.Writetext("                c = d.roundTo(c, this.maxDecCount + 1), !this.integersOnly || Math.round(c) == c) if (isNaN(z) || Number(d.toFixed(c, z)) == c) {" & vbCrLf)
        fsT.Writetext("                    !0 === h && (0 === c && (c = this.minReal), t > this.logGridLimit && (c = Math.pow(10, g)));" & vbCrLf)
        fsT.Writetext("                    v = this.formatValue(c, !1, g);" & vbCrLf)
        fsT.Writetext("                    Math.round(g / m) != g / m && (v = void 0);" & vbCrLf)
        fsT.Writetext("                    if (0 === g && !n || g == r - 1 && !q) v = " & Chr(34) & " " & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                    f = this.getCoordinate(c);" & vbCrLf)
        fsT.Writetext("                    v = new this.axisItemRenderer(this, f, v, void 0, void 0, void 0, void 0, this.boldLabels);" & vbCrLf)
        fsT.Writetext("                    this.pushAxisItem(v);" & vbCrLf)
        fsT.Writetext("                    if (c == this.baseValue && " & Chr(34) & "radar" & Chr(34) & " != a.type) {" & vbCrLf)
        fsT.Writetext("                        var O, J, A = this.viW," & vbCrLf)
        fsT.Writetext("                            B = this.viH;" & vbCrLf)
        fsT.Writetext("                        v = this.viX;" & vbCrLf)
        fsT.Writetext("                        x = this.viY;" & vbCrLf)
        fsT.Writetext("                        " & Chr(34) & "H" & Chr(34) & " == this.orientation ? 0 <= f && f <= A + 1 && (O = [f, f, f + k], J = [B, 0, l]) : 0 <= f && f <= B + 1 && (O = [0, A, A + k], J = [f, f, f + l]);" & vbCrLf)
        fsT.Writetext("                        O && (f = d.fitToBounds(2 * this.gridAlpha, 0, 1), f = d.line(a.container, O, J, this.gridColor, f, 1, this.dashLength), f.translate(v, x), this.grid0 = f, a.axesSet.push(f), f.toBack(), d.setCN(a, f, this.bcn + " & Chr(34) & "zero-grid-" & Chr(34) & " + this.id), d.setCN(a, f, this.bcn + " & Chr(34) & "zero-grid" & Chr(34) & "))" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                    if (!isNaN(H) && 0 < w && g < r - 1) {" & vbCrLf)
        fsT.Writetext("                        f = this.gridAlpha;" & vbCrLf)
        fsT.Writetext("                        this.gridAlpha = this.minorGridAlpha;" & vbCrLf)
        fsT.Writetext("                        for (v = 1; v < u / H; v++) x = this.getCoordinate(c + H * v), x = new this.axisItemRenderer(this, x, " & Chr(34) & "" & Chr(34) & ", !1, 0, 0, !1, !1, 0, !0), this.pushAxisItem(x);" & vbCrLf)
        fsT.Writetext("                        this.gridAlpha = f" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("                t = this.baseValue;" & vbCrLf)
        fsT.Writetext("                this.min > this.baseValue && this.max > this.baseValue && (t = this.min);" & vbCrLf)
        fsT.Writetext("                this.min < this.baseValue && this.max < this.baseValue && (t = this.max);" & vbCrLf)
        fsT.Writetext("                h && t < this.minReal && (t = this.minReal);" & vbCrLf)
        fsT.Writetext("                this.baseCoord = this.getCoordinate(t);" & vbCrLf)
        fsT.Writetext("                t = {" & vbCrLf)
        fsT.Writetext("                    type: " & Chr(34) & "axisChanged" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                    target: this," & vbCrLf)
        fsT.Writetext("                    chart: a" & vbCrLf)
        fsT.Writetext("                };" & vbCrLf)
        fsT.Writetext("                t.min = h ? this.minReal : this.min;" & vbCrLf)
        fsT.Writetext("                t.max = this.max;" & vbCrLf)
        fsT.Writetext("                this.fire(" & Chr(34) & "axisChanged" & Chr(34) & ", t);" & vbCrLf)
        fsT.Writetext("                this.axisCreated = !0" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            h = this.axisLine.set;" & vbCrLf)
        fsT.Writetext("            t = this.labelsSet;" & vbCrLf)
        fsT.Writetext("            this.positionTitle();" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "radar" & Chr(34) & " != a.type ? (a = this.viX, H = this.viY, b.translate(a, H), t.translate(a, H)) : h.toFront();" & vbCrLf)
        fsT.Writetext("            !this.visible || e ? (b.hide(), h.hide(), t.hide()) : (b.show(), h.show(), t.show());" & vbCrLf)
        fsT.Writetext("            this.axisY = this.y - this.viY;" & vbCrLf)
        fsT.Writetext("            this.axisX = this.x - this.viX" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        formatValue: function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            var e = this.exponential," & vbCrLf)
        fsT.Writetext("                h = this.logarithmic," & vbCrLf)
        fsT.Writetext("                f = this.numberFormatter," & vbCrLf)
        fsT.Writetext("                g = this.chart;" & vbCrLf)
        fsT.Writetext("            !0 === this.logarithmic && (e = -1 != String(a).indexOf(" & Chr(34) & "e" & Chr(34) & ") ? !0 : !1);" & vbCrLf)
        fsT.Writetext("            this.useScientificNotation && (e = !0);" & vbCrLf)
        fsT.Writetext("            this.usePrefixes && (e = !1);" & vbCrLf)
        fsT.Writetext("            e ? (b = -1 == String(a).indexOf(" & Chr(34) & "e" & Chr(34) & ") ? a.toExponential(15) : String(a), c = b.split(" & Chr(34) & "e" & Chr(34) & "), b = Number(c[0]), c = Number(c[1]), b = d.roundTo(b, 14), 10 == b && (b = 1, c += 1), b = b + " & Chr(34) & "e" & Chr(34) & " + c, 0 === a && (b = " & Chr(34) & "0" & Chr(34) & "), 1 == a && (b = " & Chr(34) & "1" & Chr(34) & ")) : (h && (e = String(a).split(" & Chr(34) & "." & Chr(34) & "), e[1] ? (f.precision = e[1].length, 0 > c && (f.precision = Math.abs(c)), b && 1 < a && (f.precision = 0)) : f.precision = -1), b = this.usePrefixes ? d.addPrefix(a, g.prefixesOfBigNumbers, g.prefixesOfSmallNumbers, f, !b) : d.formatNumber(a, f, f.precision));" & vbCrLf)
        fsT.Writetext("            this.duration && (b = d.formatDuration(a, this.duration, " & Chr(34) & "" & Chr(34) & ", this.durationUnits, this.maxInterval, f));" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "date" & Chr(34) & " == this.type && (b = d.formatDate(new Date(a), this.currentDateFormat, g));" & vbCrLf)
        fsT.Writetext("            this.recalculateToPercents ? b += " & Chr(34) & "%" & Chr(34) & " : (f = this.unit) && (b = " & Chr(34) & "left" & Chr(34) & " == this.unitPosition ? f + b : b + f);" & vbCrLf)
        fsT.Writetext("            this.labelFunction && (b = this.labelFunction(a, b, this).toString());" & vbCrLf)
        fsT.Writetext("            return b" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getMinorGridStep: function (a, b) {" & vbCrLf)
        fsT.Writetext("            var c = [5, 4, 2];" & vbCrLf)
        fsT.Writetext("            60 > b && c.shift();" & vbCrLf)
        fsT.Writetext("            for (var e = Math.floor(Math.log(Math.abs(a)) * Math.LOG10E), h = 0; h < c.length; h++) {" & vbCrLf)
        fsT.Writetext("                var d = a / c[h]," & vbCrLf)
        fsT.Writetext("                    g = Math.floor(Math.log(Math.abs(d)) * Math.LOG10E);" & vbCrLf)
        fsT.Writetext("                if (!(0 < Math.abs(e - g))) if (1 > a) {" & vbCrLf)
        fsT.Writetext("                    if (g = Math.pow(10, -g) * d, g == Math.round(g)) return d" & vbCrLf)
        fsT.Writetext("                } else if (d == Math.round(d)) return d" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        stackGraphs: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = this.stackType;" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "stacked" & Chr(34) & " == b && (b = " & Chr(34) & "regular" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "line" & Chr(34) & " == b && (b = " & Chr(34) & "none" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "100% stacked" & Chr(34) & " == b && (b = " & Chr(34) & "100%" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            this.stackType = b;" & vbCrLf)
        fsT.Writetext("            var c = []," & vbCrLf)
        fsT.Writetext("                e = []," & vbCrLf)
        fsT.Writetext("                h = []," & vbCrLf)
        fsT.Writetext("                f = []," & vbCrLf)
        fsT.Writetext("                g, k = this.chart.graphs," & vbCrLf)
        fsT.Writetext("                l, m, n, q, p = this.baseValue," & vbCrLf)
        fsT.Writetext("                r = !1;" & vbCrLf)
        fsT.Writetext("            if (" & Chr(34) & "line" & Chr(34) & " == a || " & Chr(34) & "step" & Chr(34) & " == a || " & Chr(34) & "smoothedLine" & Chr(34) & " == a) r = !0;" & vbCrLf)
        fsT.Writetext("            if (r && (" & Chr(34) & "regular" & Chr(34) & " == b || " & Chr(34) & "100%" & Chr(34) & " == b)) for (q = 0; q < k.length; q++) n = k[q], n.hidden || (m = n.type, n.chart == this.chart && n.valueAxis == this && a == m && n.stackable && (l && (n.stackGraph = l), l = n));" & vbCrLf)
        fsT.Writetext("            for (l = this.start; l <= this.end; l++) {" & vbCrLf)
        fsT.Writetext("                var t = 0;" & vbCrLf)
        fsT.Writetext("                for (q = 0; q < k.length; q++) if (n = k[q], n.hidden) n.newStack && (h[l] = NaN, e[l] = NaN);" & vbCrLf)
        fsT.Writetext("                else if (m = n.type, n.chart == this.chart && n.valueAxis == this && a == m && n.stackable) if (m = this.data[l].axes[this.id].graphs[n.id], g = m.values.value, isNaN(g)) n.newStack && (h[l] = NaN, e[l] = NaN);" & vbCrLf)
        fsT.Writetext("                else {" & vbCrLf)
        fsT.Writetext("                    var u = d.getDecimals(g);" & vbCrLf)
        fsT.Writetext("                    t < u && (t = u);" & vbCrLf)
        fsT.Writetext("                    isNaN(f[l]) ? f[l] = Math.abs(g) : f[l] += Math.abs(g);" & vbCrLf)
        fsT.Writetext("                    f[l] = d.roundTo(f[l], t);" & vbCrLf)
        fsT.Writetext("                    u = n.fillToGraph;" & vbCrLf)
        fsT.Writetext("                    r && u && (u = this.data[l].axes[this.id].graphs[u.id]) && (m.values.open = u.values.value);" & vbCrLf)
        fsT.Writetext("                    " & Chr(34) & "regular" & Chr(34) & " == b && (r && (isNaN(c[l]) ? (c[l] = g, m.values.close = g, m.values.open = this.baseValue) : (isNaN(g) ? m.values.close = c[l] : m.values.close = g + c[l], m.values.open = c[l], c[l] = m.values.close)), " & Chr(34) & "column" & Chr(34) & " == a && (n.newStack && (h[l] = NaN, e[l] = NaN), m.values.close = g, 0 > g ? (m.values.close = g, isNaN(e[l]) ? m.values.open = p : (m.values.close += e[l], m.values.open = e[l]), e[l] = m.values.close) : (m.values.close = g, isNaN(h[l]) ? m.values.open = p : (m.values.close += h[l], m.values.open = h[l]), h[l] = m.values.close)))" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            for (l = this.start; l <= this.end; l++) for (q = 0; q < k.length; q++)(n = k[q], n.hidden) ? n.newStack && (h[l] = NaN, e[l] = NaN) : (m = n.type, n.chart == this.chart && n.valueAxis == this && a == m && n.stackable && (m = this.data[l].axes[this.id].graphs[n.id]," & vbCrLf)
        fsT.Writetext("            g = m.values.value, isNaN(g) || (c = g / f[l] * 100, m.values.percents = c, m.values.total = f[l], n.newStack && (h[l] = NaN, e[l] = NaN), " & Chr(34) & "100%" & Chr(34) & " == b && (isNaN(e[l]) && (e[l] = 0), isNaN(h[l]) && (h[l] = 0), 0 > c ? (m.values.close = d.fitToBounds(c + e[l], -100, 100), m.values.open = e[l], e[l] = m.values.close) : (m.values.close = d.fitToBounds(c + h[l], -100, 100), m.values.open = h[l], h[l] = m.values.close)))))" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        recalculate: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.chart," & vbCrLf)
        fsT.Writetext("                b = a.graphs," & vbCrLf)
        fsT.Writetext("                c;" & vbCrLf)
        fsT.Writetext("            for (c = 0; c < b.length; c++) {" & vbCrLf)
        fsT.Writetext("                var e = b[c];" & vbCrLf)
        fsT.Writetext("                if (e.valueAxis == this) {" & vbCrLf)
        fsT.Writetext("                    var h = " & Chr(34) & "value" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                    if (" & Chr(34) & "candlestick" & Chr(34) & " == e.type ||" & vbCrLf)
        fsT.Writetext("                        " & Chr(34) & "ohlc" & Chr(34) & " == e.type) h = " & Chr(34) & "open" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                    var f, g, k = this.end + 2," & vbCrLf)
        fsT.Writetext("                        k = d.fitToBounds(this.end + 1, 0, this.data.length - 1)," & vbCrLf)
        fsT.Writetext("                        l = this.start;" & vbCrLf)
        fsT.Writetext("                    0 < l && l--;" & vbCrLf)
        fsT.Writetext("                    var m;" & vbCrLf)
        fsT.Writetext("                    g = this.start;" & vbCrLf)
        fsT.Writetext("                    e.compareFromStart && (g = 0);" & vbCrLf)
        fsT.Writetext("                    if (!isNaN(a.startTime) && (m = a.categoryAxis)) {" & vbCrLf)
        fsT.Writetext("                        var n = m.minDuration()," & vbCrLf)
        fsT.Writetext("                            n = new Date(a.startTime + n / 2)," & vbCrLf)
        fsT.Writetext("                            q = d.resetDateToMin(new Date(a.startTime), m.minPeriod).getTime();" & vbCrLf)
        fsT.Writetext("                        d.resetDateToMin(new Date(n), m.minPeriod).getTime() > q && g++" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                    if (m = a.recalculateFromDate) m = d.getDate(m, a.dataDateFormat, " & Chr(34) & "fff" & Chr(34) & "), g = a.getClosestIndex(a.chartData, " & Chr(34) & "time" & Chr(34) & ", m.getTime(), !0, 0, a.chartData.length)," & vbCrLf)
        fsT.Writetext("                    k = a.chartData.length - 1;" & vbCrLf)
        fsT.Writetext("                    for (m = g; m <= k && (g = this.data[m].axes[this.id].graphs[e.id], f = g.values[h], isNaN(f)); m++);" & vbCrLf)
        fsT.Writetext("                    this.recBaseValue = f;" & vbCrLf)
        fsT.Writetext("                    for (h = l; h <= k; h++) {" & vbCrLf)
        fsT.Writetext("                        g = this.data[h].axes[this.id].graphs[e.id];" & vbCrLf)
        fsT.Writetext("                        g.percents = {};" & vbCrLf)
        fsT.Writetext("                        var l = g.values," & vbCrLf)
        fsT.Writetext("                            p;" & vbCrLf)
        fsT.Writetext("                        for (p in l) g.percents[p] = " & Chr(34) & "percents" & Chr(34) & " != p ? l[p] / f * 100 - 100 : l[p]" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getMinMax: function () {" & vbCrLf)
        fsT.Writetext("            var a = !1," & vbCrLf)
        fsT.Writetext("                b = this.chart," & vbCrLf)
        fsT.Writetext("                c = b.graphs," & vbCrLf)
        fsT.Writetext("                e;" & vbCrLf)
        fsT.Writetext("            for (e = 0; e < c.length; e++) {" & vbCrLf)
        fsT.Writetext("                var h = c[e].type;" & vbCrLf)
        fsT.Writetext("                (" & Chr(34) & "line" & Chr(34) & " == h || " & Chr(34) & "step" & Chr(34) & " == h || " & Chr(34) & "smoothedLine" & Chr(34) & " == h) && this.expandMinMax && (a = !0)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            a && (0 < this.start && this.start--, this.end < this.data.length - 1 && this.end++);" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "serial" & Chr(34) & " == b.type && (!0 !== b.categoryAxis.parseDates || a || this.end < this.data.length - 1 && this.end++);" & vbCrLf)
        fsT.Writetext("            a = this.minMaxMultiplier;" & vbCrLf)
        fsT.Writetext("            this.min = this.getMin(this.start, this.end);" & vbCrLf)
        fsT.Writetext("            this.max = this.getMax();" & vbCrLf)
        fsT.Writetext("            this.minRR = this.min;" & vbCrLf)
        fsT.Writetext("            this.maxRR = this.max;" & vbCrLf)
        fsT.Writetext("            a = (this.max - this.min) * (a - 1);" & vbCrLf)
        fsT.Writetext("            this.min -= a;" & vbCrLf)
        fsT.Writetext("            this.max += a;" & vbCrLf)
        fsT.Writetext("            a = this.guides.length;" & vbCrLf)
        fsT.Writetext("            if (this.includeGuidesInMinMax && 0 < a) for (b = 0; b < a; b++) c = this.guides[b], c.toValue < this.min && (this.min = c.toValue), c.value < this.min && (this.min = c.value), c.toValue > this.max && (this.max = c.toValue), c.value > this.max && (this.max = c.value);" & vbCrLf)
        fsT.Writetext("            isNaN(this.minimum) || (this.min = this.minimum);" & vbCrLf)
        fsT.Writetext("            isNaN(this.maximum) || (this.max = this.maximum);" & vbCrLf)
        fsT.Writetext("            this.minimumDate && (this.min = this.minimumDate.getTime());" & vbCrLf)
        fsT.Writetext("            this.maximumDate && (this.max = this.maximumDate.getTime());" & vbCrLf)
        fsT.Writetext("            this.min > this.max && (a = this.max, this.max = this.min, this.min = a);" & vbCrLf)
        fsT.Writetext("            isNaN(this.minTemp) || (this.min = this.minTemp);" & vbCrLf)
        fsT.Writetext("            isNaN(this.maxTemp) || (this.max = this.maxTemp);" & vbCrLf)
        fsT.Writetext("            this.minReal = this.min;" & vbCrLf)
        fsT.Writetext("            this.maxReal = this.max;" & vbCrLf)
        fsT.Writetext("            0 === this.min && 0 === this.max && (this.max = 9);" & vbCrLf)
        fsT.Writetext("            this.min > this.max && (this.min = this.max - 1);" & vbCrLf)
        fsT.Writetext("            a = this.min;" & vbCrLf)
        fsT.Writetext("            b = this.max;" & vbCrLf)
        fsT.Writetext("            c = this.max - this.min;" & vbCrLf)
        fsT.Writetext("            e = 0 === c ? Math.pow(10, Math.floor(Math.log(Math.abs(this.max)) * Math.LOG10E)) / 10 : Math.pow(10, Math.floor(Math.log(Math.abs(c)) * Math.LOG10E)) / 10;" & vbCrLf)
        fsT.Writetext("            isNaN(this.maximum) && isNaN(this.maxTemp) && (this.max = Math.ceil(this.max / e) * e + e);" & vbCrLf)
        fsT.Writetext("            isNaN(this.minimum) && isNaN(this.minTemp) && (this.min = Math.floor(this.min / e) * e - e);" & vbCrLf)
        fsT.Writetext("            0 > this.min && 0 <= a && (this.min = 0);" & vbCrLf)
        fsT.Writetext("            0 < this.max && 0 >= b && (this.max = 0);" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "100%" & Chr(34) & " == this.stackType && (this.min = 0 > this.min ? -100 : 0, this.max = 0 > this.max ? 0 : 100);" & vbCrLf)
        fsT.Writetext("            c = this.max - this.min;" & vbCrLf)
        fsT.Writetext("            e = Math.pow(10, Math.floor(Math.log(Math.abs(c)) * Math.LOG10E)) / 10;" & vbCrLf)
        fsT.Writetext("            this.step = Math.ceil(c / this.gridCountR / e) * e;" & vbCrLf)
        fsT.Writetext("            c = Math.pow(10, Math.floor(Math.log(Math.abs(this.step)) * Math.LOG10E));" & vbCrLf)
        fsT.Writetext("            c = d.fixStepE(c);" & vbCrLf)
        fsT.Writetext("            e = Math.ceil(this.step / c);" & vbCrLf)
        fsT.Writetext("            5 < e && (e = 10);" & vbCrLf)
        fsT.Writetext("            5 >= e && 2 < e && (e = 5);" & vbCrLf)
        fsT.Writetext("            this.step = Math.ceil(this.step / (c * e)) * c * e;" & vbCrLf)
        fsT.Writetext("            1 > c ? (this.maxDecCount = Math.abs(Math.log(Math.abs(c)) * Math.LOG10E), this.maxDecCount = Math.round(this.maxDecCount), this.step = d.roundTo(this.step, this.maxDecCount + 1)) : this.maxDecCount = 0;" & vbCrLf)
        fsT.Writetext("            this.min = this.step * Math.floor(this.min / this.step);" & vbCrLf)
        fsT.Writetext("            this.max = this.step * Math.ceil(this.max / this.step);" & vbCrLf)
        fsT.Writetext("            0 > this.min && 0 <= a && (this.min = 0);" & vbCrLf)
        fsT.Writetext("            0 < this.max && 0 >= b && (this.max = 0);" & vbCrLf)
        fsT.Writetext("            1 < this.minReal && 1 < this.max - this.minReal && (this.minReal = Math.floor(this.minReal));" & vbCrLf)
        fsT.Writetext("            c = Math.pow(10, Math.floor(Math.log(Math.abs(this.minReal)) * Math.LOG10E));" & vbCrLf)
        fsT.Writetext("            0 === this.min && (this.minReal = c);" & vbCrLf)
        fsT.Writetext("            0 === this.min && 1 < this.minReal && (this.minReal = 1);" & vbCrLf)
        fsT.Writetext("            0 < this.min && 0 < this.minReal - this.step && (this.minReal = this.min + this.step < this.minReal ? this.min + this.step : this.min);" & vbCrLf)
        fsT.Writetext("            this.logarithmic && (2 < Math.log(b) * Math.LOG10E - Math.log(a) * Math.LOG10E ? (this.minReal = this.min = Math.pow(10, Math.floor(Math.log(Math.abs(a)) * Math.LOG10E)), this.max = Math.pow(10, Math.ceil(Math.log(Math.abs(b)) * Math.LOG10E))) : (b = Math.pow(10, Math.floor(Math.log(Math.abs(this.min)) * Math.LOG10E)) / 10, a = Math.pow(10, Math.floor(Math.log(Math.abs(a)) * Math.LOG10E)) / 10, b < a && (this.minReal = this.min = 10 * a)))" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getMin: function (a, b) {" & vbCrLf)
        fsT.Writetext("            var c, e;" & vbCrLf)
        fsT.Writetext("            for (e = a; e <= b; e++) {" & vbCrLf)
        fsT.Writetext("                var h = this.data[e].axes[this.id].graphs," & vbCrLf)
        fsT.Writetext("                    d;" & vbCrLf)
        fsT.Writetext("                for (d in h) if (h.hasOwnProperty(d)) {" & vbCrLf)
        fsT.Writetext("                    var g = this.chart.getGraphById(d);" & vbCrLf)
        fsT.Writetext("                    if (g.includeInMinMax && (!g.hidden || this.includeHidden)) {" & vbCrLf)
        fsT.Writetext("                        isNaN(c) && (c = Infinity);" & vbCrLf)
        fsT.Writetext("                        this.foundGraphs = !0;" & vbCrLf)
        fsT.Writetext("                        g = h[d].values;" & vbCrLf)
        fsT.Writetext("                        this.recalculateToPercents && (g = h[d].percents);" & vbCrLf)
        fsT.Writetext("                        var k;" & vbCrLf)
        fsT.Writetext("                        if (this.minMaxField) k = g[this.minMaxField], k < c && (c = k);" & vbCrLf)
        fsT.Writetext("                        else for (var l in g) g.hasOwnProperty(l) && " & Chr(34) & "percents" & Chr(34) & " != l && " & Chr(34) & "total" & Chr(34) & " != l && (k = g[l], k < c && (c = k))" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            return c" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getMax: function () {" & vbCrLf)
        fsT.Writetext("            var a, b;" & vbCrLf)
        fsT.Writetext("            for (b = this.start; b <= this.end; b++) {" & vbCrLf)
        fsT.Writetext("                var c = this.data[b].axes[this.id].graphs," & vbCrLf)
        fsT.Writetext("                    e;" & vbCrLf)
        fsT.Writetext("                for (e in c) if (c.hasOwnProperty(e)) {" & vbCrLf)
        fsT.Writetext("                    var d = this.chart.getGraphById(e);" & vbCrLf)
        fsT.Writetext("                    if (d.includeInMinMax && (!d.hidden || this.includeHidden)) {" & vbCrLf)
        fsT.Writetext("                        isNaN(a) && (a = -Infinity);" & vbCrLf)
        fsT.Writetext("                        this.foundGraphs = !0;" & vbCrLf)
        fsT.Writetext("                        d = c[e].values;" & vbCrLf)
        fsT.Writetext("                        this.recalculateToPercents && (d = c[e].percents);" & vbCrLf)
        fsT.Writetext("                        var f;" & vbCrLf)
        fsT.Writetext("                        if (this.minMaxField) f = d[this.minMaxField], f > a && (a = f);" & vbCrLf)
        fsT.Writetext("                        else for (var g in d) d.hasOwnProperty(g) && " & Chr(34) & "percents" & Chr(34) & " != g && " & Chr(34) & "total" & Chr(34) & " != g && (f = d[g], f > a && (a = f))" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            return a" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        dispatchZoomEvent: function (a, b) {" & vbCrLf)
        fsT.Writetext("            var c = {" & vbCrLf)
        fsT.Writetext("                type: " & Chr(34) & "axisZoomed" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                startValue: a," & vbCrLf)
        fsT.Writetext("                endValue: b," & vbCrLf)
        fsT.Writetext("                target: this," & vbCrLf)
        fsT.Writetext("                chart: this.chart" & vbCrLf)
        fsT.Writetext("            };" & vbCrLf)
        fsT.Writetext("            this.fire(c.type, c)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        zoomOut: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.chart;" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "xy" & Chr(34) & " != a.type && (this.maxZoom = this.minZoom = void 0, a.updateAfterValueZoom())" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        zoomToValues: function (a, b) {" & vbCrLf)
        fsT.Writetext("            var c = this.chart;" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "xy" & Chr(34) & " == c.type ? (b < a && (c = b, b = a, a = c), a < this.min && (a = this.min), b > this.max && (b = this.max), c = {" & vbCrLf)
        fsT.Writetext("                type: " & Chr(34) & "axisSelfZoomed" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }, c.chart = this.chart, c.valueAxis = this, c.multiplier = this.axisWidth / Math.abs(this.getCoordinate(b) - this.getCoordinate(a)), c.startValue = a, c.endValue = b, c.position = " & Chr(34) & "V" & Chr(34) & " == this.orientation ? this.reversed ? this.getCoordinate(a) : this.getCoordinate(b) : this.reversed ? this.getCoordinate(b) : this.getCoordinate(a), this.fire(c.type, c)) : (this.minZoom = a, this.maxZoom = b, c.updateAfterValueZoom())" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        coordinateToValue: function (a) {" & vbCrLf)
        fsT.Writetext("            if (isNaN(a)) return NaN;" & vbCrLf)
        fsT.Writetext("            var b = this.axisWidth," & vbCrLf)
        fsT.Writetext("                c = this.stepWidth," & vbCrLf)
        fsT.Writetext("                e = this.reversed," & vbCrLf)
        fsT.Writetext("                d = this.rotate," & vbCrLf)
        fsT.Writetext("                f = this.min," & vbCrLf)
        fsT.Writetext("                g = this.minReal;" & vbCrLf)
        fsT.Writetext("            return !0 === this.logarithmic ? Math.pow(10, (d ? !0 === e ? (b - a) / c : a / c : !0 === e ? a / c : (b - a) / c) + Math.log(g) * Math.LOG10E) : !0 === e ? d ? f - (a - b) / c : a / c + f : d ? a / c + f : f - (a - b) / c" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getCoordinate: function (a) {" & vbCrLf)
        fsT.Writetext("            if (isNaN(a)) return NaN;" & vbCrLf)
        fsT.Writetext("            var b = this.rotate," & vbCrLf)
        fsT.Writetext("                c = this.reversed," & vbCrLf)
        fsT.Writetext("                e = this.axisWidth," & vbCrLf)
        fsT.Writetext("                d = this.stepWidth," & vbCrLf)
        fsT.Writetext("                f = this.min," & vbCrLf)
        fsT.Writetext("                g = this.minReal;" & vbCrLf)
        fsT.Writetext("            !0 === this.logarithmic ? (0 === a && (a = this.treatZeroAs), a = Math.log(a) * Math.LOG10E - Math.log(g) * Math.LOG10E, b = b ? !0 === c ? e - d * a : d * a : !0 === c ? d * a : e - d * a) : b = !0 === c ? b ? e - d * (a - f) : d * (a - f) : b ? d * (a - f) : e - d * (a - f);" & vbCrLf)
        fsT.Writetext("            b = this.rotate ? b + (this.x - this.viX) : b + (this.y - this.viY);" & vbCrLf)
        fsT.Writetext("            1E7 < Math.abs(b) && (b = 1E7 * (b / Math.abs(b)));" & vbCrLf)
        fsT.Writetext("            return Math.round(b)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        synchronizeWithAxis: function (a) {" & vbCrLf)
        fsT.Writetext("            this.synchronizeWith = a;" & vbCrLf)
        fsT.Writetext("            this.listenTo(this.synchronizeWith, " & Chr(34) & "axisChanged" & Chr(34) & ", this.handleSynchronization)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleSynchronization: function () {" & vbCrLf)
        fsT.Writetext("            if (this.synchronizeWith) {" & vbCrLf)
        fsT.Writetext("                d.isString(this.synchronizeWith) && (this.synchronizeWith = this.chart.getValueAxisById(this.synchronizeWith));" & vbCrLf)
        fsT.Writetext("                var a = this.synchronizeWith," & vbCrLf)
        fsT.Writetext("                    b = a.min," & vbCrLf)
        fsT.Writetext("                    c = a.max," & vbCrLf)
        fsT.Writetext("                    a = a.step," & vbCrLf)
        fsT.Writetext("                    e = this.synchronizationMultiplier;" & vbCrLf)
        fsT.Writetext("                e && (this.min = b * e, this.max = c * e, this.step = a * e, b = Math.pow(10, Math.floor(Math.log(Math.abs(this.step)) * Math.LOG10E)), b = Math.abs(Math.log(Math.abs(b)) * Math.LOG10E), this.maxDecCount = b = Math.round(b), this.draw())" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    })" & vbCrLf)
        fsT.Writetext("})();" & vbCrLf)
        fsT.Writetext("(function () {" & vbCrLf)
        fsT.Writetext("    var d = window.AmCharts;" & vbCrLf)
        fsT.Writetext("    d.RecAxis = d.Class({" & vbCrLf)
        fsT.Writetext("        construct: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = a.chart," & vbCrLf)
        fsT.Writetext("                c = a.axisThickness," & vbCrLf)
        fsT.Writetext("                e = a.axisColor," & vbCrLf)
        fsT.Writetext("                h = a.axisAlpha," & vbCrLf)
        fsT.Writetext("                f = a.offset," & vbCrLf)
        fsT.Writetext("                g = a.dx," & vbCrLf)
        fsT.Writetext("                k = a.dy," & vbCrLf)
        fsT.Writetext("                l = a.viX," & vbCrLf)
        fsT.Writetext("                m = a.viY," & vbCrLf)
        fsT.Writetext("                n = a.viH," & vbCrLf)
        fsT.Writetext("                q = a.viW," & vbCrLf)
        fsT.Writetext("                p = b.container;" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "H" & Chr(34) & " == a.orientation ? (e = d.line(p, [0, q], [0, 0], e, h, c), this.axisWidth = a.width, " & Chr(34) & "bottom" & Chr(34) & " == a.position ? (k = c / 2 + f + n + m - 1, c = l) : (k = -c / 2 - f + m + k, c = g + l)) : (this.axisWidth = a.height, " & Chr(34) & "right" & Chr(34) & " == a.position ? (e = d.line(p, [0, 0, -g], [0, n, n - k], e, h, c), k = m + k, c = c / 2 + f + g + q + l - 1) : (e = d.line(p, [0, 0], [0, n], e, h, c), k = m, c = -c / 2 - f + l));" & vbCrLf)
        fsT.Writetext("            e.translate(c," & vbCrLf)
        fsT.Writetext("            k);" & vbCrLf)
        fsT.Writetext("            c = b.container.set();" & vbCrLf)
        fsT.Writetext("            c.push(e);" & vbCrLf)
        fsT.Writetext("            b.axesSet.push(c);" & vbCrLf)
        fsT.Writetext("            d.setCN(b, e, a.bcn + " & Chr(34) & "line" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            this.axisSet = c;" & vbCrLf)
        fsT.Writetext("            this.set = e" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    })" & vbCrLf)
        fsT.Writetext("})();" & vbCrLf)
        fsT.Writetext("(function () {" & vbCrLf)
        fsT.Writetext("    var d = window.AmCharts;" & vbCrLf)
        fsT.Writetext("    d.RecItem = d.Class({" & vbCrLf)
        fsT.Writetext("        construct: function (a, b, c, e, h, f, g, k, l, m, n, q) {" & vbCrLf)
        fsT.Writetext("            b = Math.round(b);" & vbCrLf)
        fsT.Writetext("            var p = a.chart;" & vbCrLf)
        fsT.Writetext("            this.value = c;" & vbCrLf)
        fsT.Writetext("            void 0 == c && (c = " & Chr(34) & "" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            l || (l = 0);" & vbCrLf)
        fsT.Writetext("            void 0 == e && (e = !0);" & vbCrLf)
        fsT.Writetext("            var r = p.fontFamily," & vbCrLf)
        fsT.Writetext("                t = a.fontSize;" & vbCrLf)
        fsT.Writetext("            void 0 == t && (t = p.fontSize);" & vbCrLf)
        fsT.Writetext("            var u = a.color;" & vbCrLf)
        fsT.Writetext("            void 0 == u && (u = p.color);" & vbCrLf)
        fsT.Writetext("            void 0 !== n && (u = n);" & vbCrLf)
        fsT.Writetext("            var z = a.chart.container," & vbCrLf)
        fsT.Writetext("                v = z.set();" & vbCrLf)
        fsT.Writetext("            this.set = v;" & vbCrLf)
        fsT.Writetext("            var w = a.axisThickness," & vbCrLf)
        fsT.Writetext("                x = a.axisColor," & vbCrLf)
        fsT.Writetext("                A = a.axisAlpha," & vbCrLf)
        fsT.Writetext("                B = a.tickLength," & vbCrLf)
        fsT.Writetext("                D = a.gridAlpha," & vbCrLf)
        fsT.Writetext("                C = a.gridThickness," & vbCrLf)
        fsT.Writetext("                I = a.gridColor," & vbCrLf)
        fsT.Writetext("                H = a.dashLength," & vbCrLf)
        fsT.Writetext("                O = a.fillColor," & vbCrLf)
        fsT.Writetext("                J = a.fillAlpha," & vbCrLf)
        fsT.Writetext("                da = a.labelsEnabled;" & vbCrLf)
        fsT.Writetext("            n = a.labelRotation;" & vbCrLf)
        fsT.Writetext("            var pa = a.counter," & vbCrLf)
        fsT.Writetext("                U = a.inside," & vbCrLf)
        fsT.Writetext("                na = a.labelOffset," & vbCrLf)
        fsT.Writetext("                qa = a.dx," & vbCrLf)
        fsT.Writetext("                ja = a.dy," & vbCrLf)
        fsT.Writetext("                Pa = a.orientation," & vbCrLf)
        fsT.Writetext("                aa = a.position," & vbCrLf)
        fsT.Writetext("                Z = a.previousCoord," & vbCrLf)
        fsT.Writetext("                V = a.viH," & vbCrLf)
        fsT.Writetext("                sa = a.viW," & vbCrLf)
        fsT.Writetext("                ba = a.offset," & vbCrLf)
        fsT.Writetext("                ca, ta;" & vbCrLf)
        fsT.Writetext("            g ? (void 0 !== g.id && (q = p.classNamePrefix + " & Chr(34) & "-guide-" & Chr(34) & " + g.id), da = !0, isNaN(g.tickLength) || (B = g.tickLength), void 0 != g.lineColor && (I = g.lineColor), void 0 != g.color && (u = g.color), isNaN(g.lineAlpha) || (D = g.lineAlpha), isNaN(g.dashLength) || (H = g.dashLength), isNaN(g.lineThickness) || (C = g.lineThickness), !0 === g.inside && (U = !0), isNaN(g.labelRotation) || (n = g.labelRotation)," & vbCrLf)
        fsT.Writetext("            isNaN(g.fontSize) || (t = g.fontSize), g.position && (aa = g.position), void 0 !== g.boldLabel && (k = g.boldLabel), isNaN(g.labelOffset) || (na = g.labelOffset)) : " & Chr(34) & "" & Chr(34) & " === c && (B = 0);" & vbCrLf)
        fsT.Writetext("            m && !isNaN(a.minorTickLength) && (B = a.minorTickLength);" & vbCrLf)
        fsT.Writetext("            var ia = " & Chr(34) & "start" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            h && (ia = " & Chr(34) & "middle" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            var Q = n * Math.PI / 180," & vbCrLf)
        fsT.Writetext("                W, wa, G = 0," & vbCrLf)
        fsT.Writetext("                y = 0," & vbCrLf)
        fsT.Writetext("                ka = 0," & vbCrLf)
        fsT.Writetext("                ea = W = 0," & vbCrLf)
        fsT.Writetext("                Qa = 0;" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "V" & Chr(34) & " == Pa && (n = 0);" & vbCrLf)
        fsT.Writetext("            var Y;" & vbCrLf)
        fsT.Writetext("            da && " & Chr(34) & "" & Chr(34) & " !== c && (Y = a.autoWrap && 0 === n ? d.wrappedText(z, c, u, r, t, ia, k, h, 0) : d.text(z, c, u, r, t, ia, k), ia = Y.getBBox(), ea = ia.width, Qa = ia.height);" & vbCrLf)
        fsT.Writetext("            if (" & Chr(34) & "H" & Chr(34) & " == Pa) {" & vbCrLf)
        fsT.Writetext("                if (0 <= b && b <= sa + 1 && (0 < B && 0 < A && b + l <= sa + 1 && (ca = d.line(z, [b + l, b + l], [0, B], x, A, C), v.push(ca)), 0 < D && (ta = d.line(z, [b, b + qa, b + qa], [V, V + ja, ja], I, D, C, H), v.push(ta))), y = 0, G = b, g && 90 == n && U && (G -= t), !1 === e ? (ia = " & Chr(34) & "start" & Chr(34) & ", y = " & Chr(34) & "bottom" & Chr(34) & " == aa ? U ? y + B : y - B : U ? y - B : y + B, G += 3, h && (G += h / 2 - 3, ia = " & Chr(34) & "middle" & Chr(34) & "), 0 < n && (ia = " & Chr(34) & "middle" & Chr(34) & ")) : ia = " & Chr(34) & "middle" & Chr(34) & ", 1 == pa && 0 < J && !g && !m && Z < sa && (e = d.fitToBounds(b, 0, sa), Z = d.fitToBounds(Z, 0, sa), W = e - Z, 0 < W && (wa = d.rect(z, W, a.height, O, J), wa.translate(e - W + qa, ja), v.push(wa))), " & Chr(34) & "bottom" & Chr(34) & " == aa ? (y += V + t / 2 + ba, U ? (0 < n ? (y = V - ea / 2 * Math.sin(Q) - B - 3, G += ea / 2 * Math.cos(Q) - 4 + 2) : 0 > n ? (y = V + ea * Math.sin(Q) - B - 3 + 2, G += -ea * Math.cos(Q) - Qa * Math.sin(Q) - 4) : y -= B + t + 3 + 3, y -= na) : (0 < n ? (y = V + ea / 2 * Math.sin(Q) + B + 3, G -= ea / 2 * Math.cos(Q)) : 0 > n ? (y = V + B + 3 - ea / 2 * Math.sin(Q) + 2, G += ea / 2 * Math.cos(Q)) : y += B + w + 3 + 3, y += na)) : (y += ja + t / 2 - ba, G += qa, U ? (0 < n ? (y = ea / 2 * Math.sin(Q) + B + 3, G -= ea / 2 * Math.cos(Q)) : y += B + 3, y += na) : (0 < n ? (y = -(ea / 2) * Math.sin(Q) - B - 6, G += ea / 2 * Math.cos(Q)) : y -= B + t + 3 + w + 3, y -= na)), " & Chr(34) & "bottom" & Chr(34) & " == aa ? W = (U ? V - B - 1 : V + w - 1) + ba : (ka = qa, W = (U ? ja : ja - B - w + 1) - ba), f && (G += f), f = G, 0 < n && (f += ea / 2 * Math.cos(Q)), Y && (t = 0, U && (t = ea / 2 * Math.cos(Q)), f + t > sa + 2 || 0 > f)) Y.remove()," & vbCrLf)
        fsT.Writetext("                Y = null" & vbCrLf)
        fsT.Writetext("            } else {" & vbCrLf)
        fsT.Writetext("                0 <= b && b <= V + 1 && (0 < B && 0 < A && b + l <= V + 1 && (ca = d.line(z, [0, B], [b + l, b + l], x, A, C), v.push(ca)), 0 < D && (ta = d.line(z, [0, qa, sa + qa], [b, b + ja, b + ja], I, D, C, H), v.push(ta)));" & vbCrLf)
        fsT.Writetext("                ia = " & Chr(34) & "end" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                if (!0 === U && " & Chr(34) & "left" & Chr(34) & " == aa || !1 === U && " & Chr(34) & "right" & Chr(34) & " == aa) ia = " & Chr(34) & "start" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                y = b - t / 2;" & vbCrLf)
        fsT.Writetext("                1 == pa && 0 < J && !g && !m && (e = d.fitToBounds(b, 0, V), Z = d.fitToBounds(Z, 0, V), Q = e - Z, wa = d.polygon(z, [0, a.width, a.width, 0], [0, 0, Q, Q], O, J), wa.translate(qa, e - Q + ja), v.push(wa));" & vbCrLf)
        fsT.Writetext("                y += t / 2;" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "right" & Chr(34) & " == aa ? (G += qa + sa + ba, y += ja, U ? (f || (y -= t / 2 + 3), G = G - (B + 4) - na) : (G += B + 4 + w, y -= 2, G += na)) : U ? (G += B + 4 - ba, f || (y -= t / 2 + 3), g && (G += qa, y += ja), G += na) : (G += -B - w - 4 - 2 - ba, y -= 2, G -= na);" & vbCrLf)
        fsT.Writetext("                ca && (" & Chr(34) & "right" & Chr(34) & " == aa ? (ka += qa + ba + sa, W += ja, ka = U ? ka - w : ka + w) : (ka -= ba, U || (ka -= B + w)));" & vbCrLf)
        fsT.Writetext("                f && (y += f);" & vbCrLf)
        fsT.Writetext("                U = -3;" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "right" & Chr(34) & " == aa && (U += ja);" & vbCrLf)
        fsT.Writetext("                Y && (y > V + 1 || y < U) && (Y.remove(), Y = null)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            ca && (ca.translate(ka, W), d.setCN(p, ca, a.bcn + " & Chr(34) & "tick" & Chr(34) & "), d.setCN(p, ca, q, !0), g && d.setCN(p, ca, " & Chr(34) & "guide" & Chr(34) & "));" & vbCrLf)
        fsT.Writetext("            !1 === a.visible && (ca && ca.remove(), Y && (Y.remove(), Y = null));" & vbCrLf)
        fsT.Writetext("            Y && (Y.attr({" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "text-anchor" & Chr(34) & ": ia" & vbCrLf)
        fsT.Writetext("            }), Y.translate(G, y), 0 !== n && Y.rotate(-n, a.chart.backgroundColor), a.allLabels.push(Y), this.label = Y, d.setCN(p, Y," & vbCrLf)
        fsT.Writetext("            a.bcn + " & Chr(34) & "label" & Chr(34) & "), d.setCN(p, Y, q, !0), g && d.setCN(p, Y, " & Chr(34) & "guide" & Chr(34) & "));" & vbCrLf)
        fsT.Writetext("            ta && (d.setCN(p, ta, a.bcn + " & Chr(34) & "grid" & Chr(34) & "), d.setCN(p, ta, q, !0), g && d.setCN(p, ta, " & Chr(34) & "guide" & Chr(34) & "));" & vbCrLf)
        fsT.Writetext("            wa && (d.setCN(p, wa, a.bcn + " & Chr(34) & "fill" & Chr(34) & "), d.setCN(p, wa, q, !0));" & vbCrLf)
        fsT.Writetext("            m ? ta && d.setCN(p, ta, a.bcn + " & Chr(34) & "grid-minor" & Chr(34) & ") : (a.counter = 0 === pa ? 1 : 0, a.previousCoord = b);" & vbCrLf)
        fsT.Writetext("            0 === this.set.node.childNodes.length && this.set.remove()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        graphics: function () {" & vbCrLf)
        fsT.Writetext("            return this.set" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getLabel: function () {" & vbCrLf)
        fsT.Writetext("            return this.label" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    })" & vbCrLf)
        fsT.Writetext("})();" & vbCrLf)
        fsT.Writetext("(function () {" & vbCrLf)
        fsT.Writetext("    var d = window.AmCharts;" & vbCrLf)
        fsT.Writetext("    d.RecFill = d.Class({" & vbCrLf)
        fsT.Writetext("        construct: function (a, b, c, e) {" & vbCrLf)
        fsT.Writetext("            var h = a.dx," & vbCrLf)
        fsT.Writetext("                f = a.dy," & vbCrLf)
        fsT.Writetext("                g = a.orientation," & vbCrLf)
        fsT.Writetext("                k = 0;" & vbCrLf)
        fsT.Writetext("            if (c < b) {" & vbCrLf)
        fsT.Writetext("                var l = b;" & vbCrLf)
        fsT.Writetext("                b = c;" & vbCrLf)
        fsT.Writetext("                c = l" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            var m = e.fillAlpha;" & vbCrLf)
        fsT.Writetext("            isNaN(m) && (m = 0);" & vbCrLf)
        fsT.Writetext("            var l = a.chart.container," & vbCrLf)
        fsT.Writetext("                n = e.fillColor;" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "V" & Chr(34) & " == g ? (b = d.fitToBounds(b, 0, a.viH), c = d.fitToBounds(c, 0, a.viH)) : (b = d.fitToBounds(b, 0, a.viW), c = d.fitToBounds(c, 0, a.viW));" & vbCrLf)
        fsT.Writetext("            c -= b;" & vbCrLf)
        fsT.Writetext("            isNaN(c) && (c = 4, k = 2, m = 0);" & vbCrLf)
        fsT.Writetext("            0 > c && " & Chr(34) & "object" & Chr(34) & " == typeof n && (n = n.join(" & Chr(34) & "," & Chr(34) & ").split(" & Chr(34) & "," & Chr(34) & ").reverse());" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "V" & Chr(34) & " == g ? (g = d.rect(l, a.viW, c, n, m), g.translate(h, b - k + f)) : (g = d.rect(l, c, a.viH, n," & vbCrLf)
        fsT.Writetext("            m), g.translate(b - k + h, f));" & vbCrLf)
        fsT.Writetext("            d.setCN(a.chart, g, " & Chr(34) & "guide-fill" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            e.id && d.setCN(a.chart, g, " & Chr(34) & "guide-fill-" & Chr(34) & " + e.id);" & vbCrLf)
        fsT.Writetext("            this.set = l.set([g])" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        graphics: function () {" & vbCrLf)
        fsT.Writetext("            return this.set" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getLabel: function () {}" & vbCrLf)
        fsT.Writetext("    })" & vbCrLf)
        fsT.Writetext("})();" & vbCrLf)
        fsT.Writetext("(function () {" & vbCrLf)
        fsT.Writetext("    var d = window.AmCharts;" & vbCrLf)
        fsT.Writetext("    d.AmChart = d.Class({" & vbCrLf)
        fsT.Writetext("        construct: function (a) {" & vbCrLf)
        fsT.Writetext("            this.theme = a;" & vbCrLf)
        fsT.Writetext("            this.classNamePrefix = " & Chr(34) & "amcharts" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.addClassNames = !1;" & vbCrLf)
        fsT.Writetext("            this.version = " & Chr(34) & "3.14.5" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            d.addChart(this);" & vbCrLf)
        fsT.Writetext("            this.createEvents(" & Chr(34) & "dataUpdated" & Chr(34) & ", " & Chr(34) & "init" & Chr(34) & ", " & Chr(34) & "rendered" & Chr(34) & ", " & Chr(34) & "drawn" & Chr(34) & ", " & Chr(34) & "failed" & Chr(34) & ", " & Chr(34) & "resized" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            this.height = this.width = " & Chr(34) & "100%" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.dataChanged = !0;" & vbCrLf)
        fsT.Writetext("            this.chartCreated = !1;" & vbCrLf)
        fsT.Writetext("            this.previousWidth = this.previousHeight = 0;" & vbCrLf)
        fsT.Writetext("            this.backgroundColor = " & Chr(34) & "#FFFFFF" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.borderAlpha = this.backgroundAlpha = 0;" & vbCrLf)
        fsT.Writetext("            this.color = this.borderColor = " & Chr(34) & "#000000" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.fontFamily = " & Chr(34) & "Verdana" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.fontSize = 11;" & vbCrLf)
        fsT.Writetext("            this.usePrefixes = !1;" & vbCrLf)
        fsT.Writetext("            this.addCodeCredits = this.autoResize = !0;" & vbCrLf)
        fsT.Writetext("            this.precision = -1;" & vbCrLf)
        fsT.Writetext("            this.percentPrecision = 2;" & vbCrLf)
        fsT.Writetext("            this.decimalSeparator = " & Chr(34) & "." & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.thousandsSeparator = " & Chr(34) & "," & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.labels = [];" & vbCrLf)
        fsT.Writetext("            this.allLabels = [];" & vbCrLf)
        fsT.Writetext("            this.titles = [];" & vbCrLf)
        fsT.Writetext("            this.marginRight = this.marginLeft = this.autoMarginOffset = 0;" & vbCrLf)
        fsT.Writetext("            this.timeOuts = [];" & vbCrLf)
        fsT.Writetext("            this.creditsPosition = " & Chr(34) & "top-left" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            var b = document.createElement(" & Chr(34) & "div" & Chr(34) & ")," & vbCrLf)
        fsT.Writetext("                c = b.style;" & vbCrLf)
        fsT.Writetext("            c.overflow = " & Chr(34) & "hidden" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            c.position = " & Chr(34) & "relative" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            c.textAlign = " & Chr(34) & "left" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.chartDiv = b;" & vbCrLf)
        fsT.Writetext("            b = document.createElement(" & Chr(34) & "div" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            c = b.style;" & vbCrLf)
        fsT.Writetext("            c.overflow =" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "hidden" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            c.position = " & Chr(34) & "relative" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            c.textAlign = " & Chr(34) & "left" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.legendDiv = b;" & vbCrLf)
        fsT.Writetext("            this.titleHeight = 0;" & vbCrLf)
        fsT.Writetext("            this.hideBalloonTime = 150;" & vbCrLf)
        fsT.Writetext("            this.handDrawScatter = 2;" & vbCrLf)
        fsT.Writetext("            this.handDrawThickness = 1;" & vbCrLf)
        fsT.Writetext("            this.prefixesOfBigNumbers = [{" & vbCrLf)
        fsT.Writetext("                number: 1E3," & vbCrLf)
        fsT.Writetext("                prefix: " & Chr(34) & "k" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                number: 1E6," & vbCrLf)
        fsT.Writetext("                prefix: " & Chr(34) & "M" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                number: 1E9," & vbCrLf)
        fsT.Writetext("                prefix: " & Chr(34) & "G" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                number: 1E12," & vbCrLf)
        fsT.Writetext("                prefix: " & Chr(34) & "T" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                number: 1E15," & vbCrLf)
        fsT.Writetext("                prefix: " & Chr(34) & "P" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                number: 1E18," & vbCrLf)
        fsT.Writetext("                prefix: " & Chr(34) & "E" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                number: 1E21," & vbCrLf)
        fsT.Writetext("                prefix: " & Chr(34) & "Z" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                number: 1E24," & vbCrLf)
        fsT.Writetext("                prefix: " & Chr(34) & "Y" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }];" & vbCrLf)
        fsT.Writetext("            this.prefixesOfSmallNumbers = [{" & vbCrLf)
        fsT.Writetext("                number: 1E-24," & vbCrLf)
        fsT.Writetext("                prefix: " & Chr(34) & "y" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                number: 1E-21," & vbCrLf)
        fsT.Writetext("                prefix: " & Chr(34) & "z" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                number: 1E-18," & vbCrLf)
        fsT.Writetext("                prefix: " & Chr(34) & "a" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                number: 1E-15," & vbCrLf)
        fsT.Writetext("                prefix: " & Chr(34) & "f" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                number: 1E-12," & vbCrLf)
        fsT.Writetext("                prefix: " & Chr(34) & "p" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                number: 1E-9," & vbCrLf)
        fsT.Writetext("                prefix: " & Chr(34) & "n" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                number: 1E-6," & vbCrLf)
        fsT.Writetext("                prefix: " & Chr(34) & "\u03bc" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }, {" & vbCrLf)
        fsT.Writetext("                number: .001," & vbCrLf)
        fsT.Writetext("                prefix: " & Chr(34) & "m" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }];" & vbCrLf)
        fsT.Writetext("            this.panEventsEnabled = !0;" & vbCrLf)
        fsT.Writetext("            this.product = " & Chr(34) & "amcharts" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.animations = [];" & vbCrLf)
        fsT.Writetext("            this.balloon = new d.AmBalloon(this.theme);" & vbCrLf)
        fsT.Writetext("            this.balloon.chart = this;" & vbCrLf)
        fsT.Writetext("            d.applyTheme(this, a, " & Chr(34) & "AmChart" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        drawChart: function () {" & vbCrLf)
        fsT.Writetext("            this.drawBackground();" & vbCrLf)
        fsT.Writetext("            this.redrawLabels();" & vbCrLf)
        fsT.Writetext("            this.drawTitles();" & vbCrLf)
        fsT.Writetext("            this.brr()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        drawBackground: function () {" & vbCrLf)
        fsT.Writetext("            d.remove(this.background);" & vbCrLf)
        fsT.Writetext("            var a = this.container," & vbCrLf)
        fsT.Writetext("                b = this.backgroundColor," & vbCrLf)
        fsT.Writetext("                c = this.backgroundAlpha," & vbCrLf)
        fsT.Writetext("                e = this.set;" & vbCrLf)
        fsT.Writetext("            d.isModern || 0 !== c || (c = .001);" & vbCrLf)
        fsT.Writetext("            var h = this.updateWidth();" & vbCrLf)
        fsT.Writetext("            this.realWidth = h;" & vbCrLf)
        fsT.Writetext("            var f = this.updateHeight();" & vbCrLf)
        fsT.Writetext("            this.realHeight = f;" & vbCrLf)
        fsT.Writetext("            b = d.polygon(a, [0, h - 1, h - 1, 0], [0, 0, f - 1, f - 1], b, c, 1, this.borderColor, this.borderAlpha);" & vbCrLf)
        fsT.Writetext("            d.setCN(this, b, " & Chr(34) & "bg" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            this.background = b;" & vbCrLf)
        fsT.Writetext("            e.push(b);" & vbCrLf)
        fsT.Writetext("            if (b = this.backgroundImage) a = a.image(b, 0, 0, h, f), d.setCN(this, b, " & Chr(34) & "bg-image" & Chr(34) & "), this.bgImg = a, e.push(a)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        drawTitles: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.titles;" & vbCrLf)
        fsT.Writetext("            if (d.ifArray(a)) {" & vbCrLf)
        fsT.Writetext("                var b = 20," & vbCrLf)
        fsT.Writetext("                    c;" & vbCrLf)
        fsT.Writetext("                for (c = 0; c < a.length; c++) {" & vbCrLf)
        fsT.Writetext("                    var e = a[c]," & vbCrLf)
        fsT.Writetext("                        e = d.processObject(e, d.Title, this.theme);" & vbCrLf)
        fsT.Writetext("                    if (!1 !== e.enabled) {" & vbCrLf)
        fsT.Writetext("                        var h = e.color;" & vbCrLf)
        fsT.Writetext("                        void 0 === h && (h = this.color);" & vbCrLf)
        fsT.Writetext("                        var f = e.size;" & vbCrLf)
        fsT.Writetext("                        isNaN(f) && (f = this.fontSize + 2);" & vbCrLf)
        fsT.Writetext("                        isNaN(e.alpha);" & vbCrLf)
        fsT.Writetext("                        var g = this.marginLeft," & vbCrLf)
        fsT.Writetext("                            h = d.text(this.container, e.text, h, this.fontFamily, f);" & vbCrLf)
        fsT.Writetext("                        h.translate(g + (this.realWidth - this.marginRight - g) / 2, b);" & vbCrLf)
        fsT.Writetext("                        h.node.style.pointerEvents = " & Chr(34) & "none" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                        d.setCN(this, h, " & Chr(34) & "title" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                        e.id && d.setCN(this, h, " & Chr(34) & "title-" & Chr(34) & " + e.id);" & vbCrLf)
        fsT.Writetext("                        g = !0;" & vbCrLf)
        fsT.Writetext("                        void 0 !== e.bold && (g = e.bold);" & vbCrLf)
        fsT.Writetext("                        g && h.attr({" & vbCrLf)
        fsT.Writetext("                            " & Chr(34) & "font-weight" & Chr(34) & ": " & Chr(34) & "bold" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("                        });" & vbCrLf)
        fsT.Writetext("                        h.attr({" & vbCrLf)
        fsT.Writetext("                            opacity: e.alpha" & vbCrLf)
        fsT.Writetext("                        });" & vbCrLf)
        fsT.Writetext("                        b += f + 6;" & vbCrLf)
        fsT.Writetext("                        this.freeLabelsSet.push(h)" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        write: function (a) {" & vbCrLf)
        fsT.Writetext("            if (a = " & Chr(34) & "object" & Chr(34) & " != typeof a ? document.getElementById(a) : a) {" & vbCrLf)
        fsT.Writetext("                for (; a.firstChild;) a.removeChild(a.firstChild);" & vbCrLf)
        fsT.Writetext("                this.div = a;" & vbCrLf)
        fsT.Writetext("                a.style.overflow = " & Chr(34) & "hidden" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                a.style.textAlign = " & Chr(34) & "left" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                var b = this.chartDiv," & vbCrLf)
        fsT.Writetext("                    c = this.legendDiv," & vbCrLf)
        fsT.Writetext("                    e = this.legend," & vbCrLf)
        fsT.Writetext("                    h = c.style," & vbCrLf)
        fsT.Writetext("                    f = b.style;" & vbCrLf)
        fsT.Writetext("                this.measure();" & vbCrLf)
        fsT.Writetext("                this.previousHeight = this.divRealHeight;" & vbCrLf)
        fsT.Writetext("                this.previousWidth = this.divRealWidth;" & vbCrLf)
        fsT.Writetext("                var g, k = document.createElement(" & Chr(34) & "div" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                g = k.style;" & vbCrLf)
        fsT.Writetext("                g.position = " & Chr(34) & "relative" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                this.containerDiv = k;" & vbCrLf)
        fsT.Writetext("                k.className = this.classNamePrefix + " & Chr(34) & "-main-div" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                b.className = this.classNamePrefix + " & Chr(34) & "-chart-div" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                a.appendChild(k);" & vbCrLf)
        fsT.Writetext("                var l = this.exportConfig;" & vbCrLf)
        fsT.Writetext("                l && d.AmExport && !this.AmExport && (this.AmExport = new d.AmExport(this, l));" & vbCrLf)
        fsT.Writetext("                this.amExport && d.AmExport && (this.AmExport = d.extend(this.amExport, new d.AmExport(this), !0));" & vbCrLf)
        fsT.Writetext("                this.AmExport && this.AmExport.init && this.AmExport.init();" & vbCrLf)
        fsT.Writetext("                if (e) if (e = this.addLegend(e, e.divId), e.enabled) switch (e.position) {" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "bottom" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        k.appendChild(b);" & vbCrLf)
        fsT.Writetext("                        k.appendChild(c);" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "top" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        k.appendChild(c);" & vbCrLf)
        fsT.Writetext("                        k.appendChild(b);" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "absolute" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        g.width = a.style.width;" & vbCrLf)
        fsT.Writetext("                        g.height = a.style.height;" & vbCrLf)
        fsT.Writetext("                        h.position = " & Chr(34) & "absolute" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                        f.position = " & Chr(34) & "absolute" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                        void 0 !== e.left && (h.left = e.left + " & Chr(34) & "px" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                        void 0 !== e.right && (h.right = e.right + " & Chr(34) & "px" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                        void 0 !== e.top && (h.top = e.top + " & Chr(34) & "px" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                        void 0 !== e.bottom && (h.bottom = e.bottom + " & Chr(34) & "px" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                        e.marginLeft = 0;" & vbCrLf)
        fsT.Writetext("                        e.marginRight = 0;" & vbCrLf)
        fsT.Writetext("                        k.appendChild(b);" & vbCrLf)
        fsT.Writetext("                        k.appendChild(c);" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "right" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        g.width = a.style.width;" & vbCrLf)
        fsT.Writetext("                        g.height = a.style.height;" & vbCrLf)
        fsT.Writetext("                        h.position = " & Chr(34) & "relative" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                        f.position = " & Chr(34) & "absolute" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                        k.appendChild(b);" & vbCrLf)
        fsT.Writetext("                        k.appendChild(c);" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "left" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        g.width = a.style.width;" & vbCrLf)
        fsT.Writetext("                        g.height = a.style.height;" & vbCrLf)
        fsT.Writetext("                        h.position = " & Chr(34) & "absolute" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                        f.position = " & Chr(34) & "relative" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                        k.appendChild(b);" & vbCrLf)
        fsT.Writetext("                        k.appendChild(c);" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "outside" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        k.appendChild(b)" & vbCrLf)
        fsT.Writetext("                } else k.appendChild(b);" & vbCrLf)
        fsT.Writetext("                else k.appendChild(b);" & vbCrLf)
        fsT.Writetext("                this.listenersAdded || (this.addListeners(), this.listenersAdded = !0);" & vbCrLf)
        fsT.Writetext("                this.initChart()" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        createLabelsSet: function () {" & vbCrLf)
        fsT.Writetext("            d.remove(this.labelsSet);" & vbCrLf)
        fsT.Writetext("            this.labelsSet = this.container.set();" & vbCrLf)
        fsT.Writetext("            this.freeLabelsSet.push(this.labelsSet)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        initChart: function () {" & vbCrLf)
        fsT.Writetext("            window.AmCharts_path && (this.path = window.AmCharts_path);" & vbCrLf)
        fsT.Writetext("            void 0 === this.path && (this.path = d.getPath());" & vbCrLf)
        fsT.Writetext("            void 0 === this.path && (this.path = " & Chr(34) & "" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            this.path = d.normalizeUrl(this.path);" & vbCrLf)
        fsT.Writetext("            void 0 === this.pathToImages && (this.pathToImages = this.path + " & Chr(34) & "" & Chr(34) & ");" & vbCrLf)  'LG Code
        fsT.Writetext("            this.initHC || (d.callInitHandler(this), this.initHC = !0);" & vbCrLf)
        fsT.Writetext("            this.renderFix();" & vbCrLf)
        fsT.Writetext("            d.applyLang(this.language, this);" & vbCrLf)
        fsT.Writetext("            var a = this.numberFormatter;" & vbCrLf)
        fsT.Writetext("            a && (isNaN(a.precision) || (this.precision = a.precision), void 0 !== a.thousandsSeparator && (this.thousandsSeparator = a.thousandsSeparator), void 0 !== a.decimalSeparator && (this.decimalSeparator = a.decimalSeparator));" & vbCrLf)
        fsT.Writetext("            (a = this.percentFormatter) && !isNaN(a.precision) && (this.percentPrecision = a.precision);" & vbCrLf)
        fsT.Writetext("            this.nf = {" & vbCrLf)
        fsT.Writetext("                precision: this.precision," & vbCrLf)
        fsT.Writetext("                thousandsSeparator: this.thousandsSeparator," & vbCrLf)
        fsT.Writetext("                decimalSeparator: this.decimalSeparator" & vbCrLf)
        fsT.Writetext("            };" & vbCrLf)
        fsT.Writetext("            this.pf = {" & vbCrLf)
        fsT.Writetext("                precision: this.percentPrecision," & vbCrLf)
        fsT.Writetext("                thousandsSeparator: this.thousandsSeparator," & vbCrLf)
        fsT.Writetext("                decimalSeparator: this.decimalSeparator" & vbCrLf)
        fsT.Writetext("            };" & vbCrLf)
        fsT.Writetext("            this.divIsFixed = d.findIfFixed(this.chartDiv);" & vbCrLf)
        fsT.Writetext("            this.destroy();" & vbCrLf)
        fsT.Writetext("            a = 0;" & vbCrLf)
        fsT.Writetext("            document.attachEvent && !window.opera && (a = 1);" & vbCrLf)
        fsT.Writetext("            this.dmouseX = this.dmouseY = 0;" & vbCrLf)
        fsT.Writetext("            var b = document.getElementsByTagName(" & Chr(34) & "html" & Chr(34) & ")[0];" & vbCrLf)
        fsT.Writetext("            b && window.getComputedStyle && (b = window.getComputedStyle(b, null)) && (this.dmouseY = d.removePx(b.getPropertyValue(" & Chr(34) & "margin-top" & Chr(34) & ")), this.dmouseX = d.removePx(b.getPropertyValue(" & Chr(34) & "margin-left" & Chr(34) & ")));" & vbCrLf)
        fsT.Writetext("            this.mouseMode = a;" & vbCrLf)
        fsT.Writetext("            (a = this.container) ? (a.container.innerHTML = " & Chr(34) & "" & Chr(34) & ", a.width = this.realWidth, a.height = this.realHeight, a.addDefs(this), this.chartDiv.appendChild(a.container)) : a = new d.AmDraw(this.chartDiv, this.realWidth, this.realHeight, this);" & vbCrLf)
        fsT.Writetext("            a.chart = this;" & vbCrLf)
        fsT.Writetext("            d.VML || d.SVG ? (a.handDrawn = this.handDrawn, a.handDrawScatter = this.handDrawScatter, a.handDrawThickness = this.handDrawThickness, this.container = a, this.set && this.set.remove(), this.set = a.set(), this.gridSet && this.gridSet.remove(), this.gridSet = a.set(), this.cursorLineSet && this.cursorLineSet.remove()," & vbCrLf)
        fsT.Writetext("            this.cursorLineSet = a.set(), this.graphsBehindSet && this.graphsBehindSet.remove(), this.graphsBehindSet = a.set(), this.bulletBehindSet && this.bulletBehindSet.remove(), this.bulletBehindSet = a.set(), this.columnSet && this.columnSet.remove(), this.columnSet = a.set(), this.graphsSet && this.graphsSet.remove(), this.graphsSet = a.set(), this.trendLinesSet && this.trendLinesSet.remove(), this.trendLinesSet = a.set(), this.axesSet && this.axesSet.remove(), this.axesSet = a.set(), this.cursorSet && this.cursorSet.remove(), this.cursorSet = a.set(), this.scrollbarsSet && this.scrollbarsSet.remove(), this.scrollbarsSet = a.set(), this.bulletSet && this.bulletSet.remove(), this.bulletSet = a.set(), this.freeLabelsSet && this.freeLabelsSet.remove(), this.axesLabelsSet && this.axesLabelsSet.remove(), this.axesLabelsSet = a.set(), this.freeLabelsSet = a.set(), this.balloonsSet && this.balloonsSet.remove(), this.balloonsSet = a.set(), this.zoomButtonSet && this.zoomButtonSet.remove(), this.zbSet && (this.zbSet.remove(), this.zbSet = null), this.zoomButtonSet = a.set(), this.linkSet && this.linkSet.remove(), this.linkSet = a.set()) : this.fire(" & Chr(34) & "failed" & Chr(34) & ", {" & vbCrLf)
        fsT.Writetext("                type: " & Chr(34) & "failed" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                chart: this" & vbCrLf)
        fsT.Writetext("            })" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        premeasure: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.div;" & vbCrLf)
        fsT.Writetext("            if (a) {" & vbCrLf)
        fsT.Writetext("                var b = a.offsetWidth," & vbCrLf)
        fsT.Writetext("                    c = a.offsetHeight;" & vbCrLf)
        fsT.Writetext("                a.clientHeight && (b = a.clientWidth, c = a.clientHeight);" & vbCrLf)
        fsT.Writetext("                if (b != this.mw || c != this.mh) this.mw = b, this.mh = c, this.measure()" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        measure: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.div;" & vbCrLf)
        fsT.Writetext("            if (a) {" & vbCrLf)
        fsT.Writetext("                var b = this.chartDiv," & vbCrLf)
        fsT.Writetext("                    c = a.offsetWidth," & vbCrLf)
        fsT.Writetext("                    e = a.offsetHeight," & vbCrLf)
        fsT.Writetext("                    h = this.container;" & vbCrLf)
        fsT.Writetext("                a.clientHeight && (c = a.clientWidth, e = a.clientHeight);" & vbCrLf)
        fsT.Writetext("                var f = d.removePx(d.getStyle(a, " & Chr(34) & "padding-left" & Chr(34) & "))," & vbCrLf)
        fsT.Writetext("                    g = d.removePx(d.getStyle(a," & vbCrLf)
        fsT.Writetext("                        " & Chr(34) & "padding-right" & Chr(34) & "))," & vbCrLf)
        fsT.Writetext("                    k = d.removePx(d.getStyle(a, " & Chr(34) & "padding-top" & Chr(34) & "))," & vbCrLf)
        fsT.Writetext("                    l = d.removePx(d.getStyle(a, " & Chr(34) & "padding-bottom" & Chr(34) & "));" & vbCrLf)
        fsT.Writetext("                isNaN(f) || (c -= f);" & vbCrLf)
        fsT.Writetext("                isNaN(g) || (c -= g);" & vbCrLf)
        fsT.Writetext("                isNaN(k) || (e -= k);" & vbCrLf)
        fsT.Writetext("                isNaN(l) || (e -= l);" & vbCrLf)
        fsT.Writetext("                f = a.style;" & vbCrLf)
        fsT.Writetext("                a = f.width;" & vbCrLf)
        fsT.Writetext("                f = f.height; - 1 != a.indexOf(" & Chr(34) & "px" & Chr(34) & ") && (c = d.removePx(a)); - 1 != f.indexOf(" & Chr(34) & "px" & Chr(34) & ") && (e = d.removePx(f));" & vbCrLf)
        fsT.Writetext("                e = Math.round(e);" & vbCrLf)
        fsT.Writetext("                c = Math.round(c);" & vbCrLf)
        fsT.Writetext("                a = Math.round(d.toCoordinate(this.width, c));" & vbCrLf)
        fsT.Writetext("                f = Math.round(d.toCoordinate(this.height, e));" & vbCrLf)
        fsT.Writetext("                (c != this.previousWidth || e != this.previousHeight) && 0 < a && 0 < f && (b.style.width = a + " & Chr(34) & "px" & Chr(34) & ", b.style.height = f + " & Chr(34) & "px" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                h && h.setSize(a, f), this.balloon = d.processObject(this.balloon, d.AmBalloon, this.theme), this.balloon.setBounds(2, 2, a - 2, f));" & vbCrLf)
        fsT.Writetext("                this.balloon.chart = this;" & vbCrLf)
        fsT.Writetext("                this.realWidth = a;" & vbCrLf)
        fsT.Writetext("                this.realHeight = f;" & vbCrLf)
        fsT.Writetext("                this.divRealWidth = c;" & vbCrLf)
        fsT.Writetext("                this.divRealHeight = e" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        destroy: function () {" & vbCrLf)
        fsT.Writetext("            this.chartDiv.innerHTML = " & Chr(34) & "" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.clearTimeOuts();" & vbCrLf)
        fsT.Writetext("            this.legend && this.legend.destroy()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        clearTimeOuts: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.timeOuts;" & vbCrLf)
        fsT.Writetext("            if (a) {" & vbCrLf)
        fsT.Writetext("                var b;" & vbCrLf)
        fsT.Writetext("                for (b = 0; b < a.length; b++) clearTimeout(a[b])" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            this.timeOuts = []" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        clear: function (a) {" & vbCrLf)
        fsT.Writetext("            d.callMethod(" & Chr(34) & "clear" & Chr(34) & ", [this.chartScrollbar," & vbCrLf)
        fsT.Writetext("            this.scrollbarV, this.scrollbarH, this.chartCursor]);" & vbCrLf)
        fsT.Writetext("            this.chartCursor = this.scrollbarH = this.scrollbarV = this.chartScrollbar = null;" & vbCrLf)
        fsT.Writetext("            this.clearTimeOuts();" & vbCrLf)
        fsT.Writetext("            this.container && (this.container.remove(this.chartDiv), this.container.remove(this.legendDiv));" & vbCrLf)
        fsT.Writetext("            a || d.removeChart(this);" & vbCrLf)
        fsT.Writetext("            if (a = this.div) for (; a.firstChild;) a.removeChild(a.firstChild);" & vbCrLf)
        fsT.Writetext("            this.legend && this.legend.destroy()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        setMouseCursor: function (a) {" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "auto" & Chr(34) & " == a && d.isNN && (a = " & Chr(34) & "default" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            this.chartDiv.style.cursor = a;" & vbCrLf)
        fsT.Writetext("            this.legendDiv.style.cursor = a" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        redrawLabels: function () {" & vbCrLf)
        fsT.Writetext("            this.labels = [];" & vbCrLf)
        fsT.Writetext("            var a = this.allLabels;" & vbCrLf)
        fsT.Writetext("            this.createLabelsSet();" & vbCrLf)
        fsT.Writetext("            var b;" & vbCrLf)
        fsT.Writetext("            for (b = 0; b < a.length; b++) this.drawLabel(a[b])" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        drawLabel: function (a) {" & vbCrLf)
        fsT.Writetext("            if (this.container && !1 !== a.enabled) {" & vbCrLf)
        fsT.Writetext("                a = d.processObject(a, d.Label, this.theme);" & vbCrLf)
        fsT.Writetext("                var b = a.y," & vbCrLf)
        fsT.Writetext("                    c = a.text," & vbCrLf)
        fsT.Writetext("                    e = a.align," & vbCrLf)
        fsT.Writetext("                    h = a.size," & vbCrLf)
        fsT.Writetext("                    f = a.color," & vbCrLf)
        fsT.Writetext("                    g = a.rotation," & vbCrLf)
        fsT.Writetext("                    k = a.alpha," & vbCrLf)
        fsT.Writetext("                    l = a.bold," & vbCrLf)
        fsT.Writetext("                    m = d.toCoordinate(a.x, this.realWidth)," & vbCrLf)
        fsT.Writetext("                    b = d.toCoordinate(b, this.realHeight);" & vbCrLf)
        fsT.Writetext("                m || (m = 0);" & vbCrLf)
        fsT.Writetext("                b || (b = 0);" & vbCrLf)
        fsT.Writetext("                void 0 === f && (f = this.color);" & vbCrLf)
        fsT.Writetext("                isNaN(h) && (h = this.fontSize);" & vbCrLf)
        fsT.Writetext("                e || (e = " & Chr(34) & "start" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "left" & Chr(34) & " == e && (e = " & Chr(34) & "start" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "right" & Chr(34) & " == e && (e = " & Chr(34) & "end" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "center" & Chr(34) & " == e && (e = " & Chr(34) & "middle" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                g ? b = this.realHeight - b + b / 2 : m = this.realWidth / 2 - m);" & vbCrLf)
        fsT.Writetext("                void 0 === k && (k = 1);" & vbCrLf)
        fsT.Writetext("                void 0 === g && (g = 0);" & vbCrLf)
        fsT.Writetext("                b += h / 2;" & vbCrLf)
        fsT.Writetext("                c = d.text(this.container, c, f, this.fontFamily, h, e, l, k);" & vbCrLf)
        fsT.Writetext("                c.translate(m, b);" & vbCrLf)
        fsT.Writetext("                d.setCN(this, c, " & Chr(34) & "label" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                a.id && d.setCN(this, c, " & Chr(34) & "label-" & Chr(34) & " + a.id);" & vbCrLf)
        fsT.Writetext("                0 !== g && c.rotate(g);" & vbCrLf)
        fsT.Writetext("                a.url ? (c.setAttr(" & Chr(34) & "cursor" & Chr(34) & ", " & Chr(34) & "pointer" & Chr(34) & "), c.click(function () {" & vbCrLf)
        fsT.Writetext("                    d.getURL(a.url)" & vbCrLf)
        fsT.Writetext("                })) : c.node.style.pointerEvents = " & Chr(34) & "none" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                this.labelsSet.push(c);" & vbCrLf)
        fsT.Writetext("                this.labels.push(c)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        addLabel: function (a, b, c, e, d, f, g, k, l, m) {" & vbCrLf)
        fsT.Writetext("            a = {" & vbCrLf)
        fsT.Writetext("                x: a," & vbCrLf)
        fsT.Writetext("                y: b," & vbCrLf)
        fsT.Writetext("                text: c," & vbCrLf)
        fsT.Writetext("                align: e," & vbCrLf)
        fsT.Writetext("                size: d," & vbCrLf)
        fsT.Writetext("                color: f," & vbCrLf)
        fsT.Writetext("                alpha: k," & vbCrLf)
        fsT.Writetext("                rotation: g," & vbCrLf)
        fsT.Writetext("                bold: l," & vbCrLf)
        fsT.Writetext("                url: m," & vbCrLf)
        fsT.Writetext("                enabled: !0" & vbCrLf)
        fsT.Writetext("            };" & vbCrLf)
        fsT.Writetext("            this.container && this.drawLabel(a);" & vbCrLf)
        fsT.Writetext("            this.allLabels.push(a)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        clearLabels: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.labels," & vbCrLf)
        fsT.Writetext("                b;" & vbCrLf)
        fsT.Writetext("            for (b = a.length - 1; 0 <= b; b--) a[b].remove();" & vbCrLf)
        fsT.Writetext("            this.labels = [];" & vbCrLf)
        fsT.Writetext("            this.allLabels = []" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateHeight: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.divRealHeight," & vbCrLf)
        fsT.Writetext("                b = this.legend;" & vbCrLf)
        fsT.Writetext("            if (b) {" & vbCrLf)
        fsT.Writetext("                var c = this.legendDiv.offsetHeight," & vbCrLf)
        fsT.Writetext("                    b = b.position;" & vbCrLf)
        fsT.Writetext("                if (" & Chr(34) & "top" & Chr(34) & " == b || " & Chr(34) & "bottom" & Chr(34) & " == b) {" & vbCrLf)
        fsT.Writetext("                    a -= c;" & vbCrLf)
        fsT.Writetext("                    if (0 > a || isNaN(a)) a = 0;" & vbCrLf)
        fsT.Writetext("                    this.chartDiv.style.height = a + " & Chr(34) & "px" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            return a" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateWidth: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.divRealWidth," & vbCrLf)
        fsT.Writetext("                b = this.divRealHeight," & vbCrLf)
        fsT.Writetext("                c = this.legend;" & vbCrLf)
        fsT.Writetext("            if (c) {" & vbCrLf)
        fsT.Writetext("                var e = this.legendDiv," & vbCrLf)
        fsT.Writetext("                    d = e.offsetWidth;" & vbCrLf)
        fsT.Writetext("                isNaN(c.width) || (d = c.width);" & vbCrLf)
        fsT.Writetext("                c.ieW && (d = c.ieW);" & vbCrLf)
        fsT.Writetext("                var f = e.offsetHeight," & vbCrLf)
        fsT.Writetext("                    e = e.style," & vbCrLf)
        fsT.Writetext("                    g = this.chartDiv.style," & vbCrLf)
        fsT.Writetext("                    c = c.position;" & vbCrLf)
        fsT.Writetext("                if (" & Chr(34) & "right" & Chr(34) & " == c || " & Chr(34) & "left" & Chr(34) & " == c) {" & vbCrLf)
        fsT.Writetext("                    a -= d;" & vbCrLf)
        fsT.Writetext("                    if (0 > a || isNaN(a)) a = 0;" & vbCrLf)
        fsT.Writetext("                    g.width = a + " & Chr(34) & "px" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                    " & Chr(34) & "left" & Chr(34) & " == c ? (g.left = d + " & Chr(34) & "px" & Chr(34) & ", e.left = " & Chr(34) & "0px" & Chr(34) & ") : (g.left = " & Chr(34) & "0px" & Chr(34) & ", e.left = a + " & Chr(34) & "px" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                    b > f && (e.top = (b - f) / 2 + " & Chr(34) & "px" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            return a" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getTitleHeight: function () {" & vbCrLf)
        fsT.Writetext("            var a = 0," & vbCrLf)
        fsT.Writetext("                b = this.titles," & vbCrLf)
        fsT.Writetext("                c = !0;" & vbCrLf)
        fsT.Writetext("            if (0 < b.length) {" & vbCrLf)
        fsT.Writetext("                var a = 20," & vbCrLf)
        fsT.Writetext("                    e;" & vbCrLf)
        fsT.Writetext("                for (e = 0; e < b.length; e++) {" & vbCrLf)
        fsT.Writetext("                    var d = b[e];" & vbCrLf)
        fsT.Writetext("                    !1 !== d.enabled && (c = !1, d = d.size, isNaN(d) && (d = this.fontSize + 2), a += d + 6)" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("                c && (a = 0)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            return a" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        addTitle: function (a, b, c, e, d) {" & vbCrLf)
        fsT.Writetext("            isNaN(b) && (b = this.fontSize + 2);" & vbCrLf)
        fsT.Writetext("            a = {" & vbCrLf)
        fsT.Writetext("                text: a," & vbCrLf)
        fsT.Writetext("                size: b," & vbCrLf)
        fsT.Writetext("                color: c," & vbCrLf)
        fsT.Writetext("                alpha: e," & vbCrLf)
        fsT.Writetext("                bold: d," & vbCrLf)
        fsT.Writetext("                enabled: !0" & vbCrLf)
        fsT.Writetext("            };" & vbCrLf)
        fsT.Writetext("            this.titles.push(a);" & vbCrLf)
        fsT.Writetext("            return a" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleWheel: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = 0;" & vbCrLf)
        fsT.Writetext("            a || (a = window.event);" & vbCrLf)
        fsT.Writetext("            a.wheelDelta ? b = a.wheelDelta / 120 : a.detail && (b = -a.detail / 3);" & vbCrLf)
        fsT.Writetext("            b && this.handleWheelReal(b, a.shiftKey);" & vbCrLf)
        fsT.Writetext("            a.preventDefault && a.preventDefault()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleWheelReal: function () {}," & vbCrLf)
        fsT.Writetext("        addListeners: function () {" & vbCrLf)
        fsT.Writetext("            var a = this," & vbCrLf)
        fsT.Writetext("                b = a.chartDiv;" & vbCrLf)
        fsT.Writetext("            document.addEventListener ? (a.panEventsEnabled && (b.style.msTouchAction = " & Chr(34) & "none" & Chr(34) & "), " & Chr(34) & "ontouchstart" & Chr(34) & " in document.documentElement && (b.addEventListener(" & Chr(34) & "touchstart" & Chr(34) & ", function (b) {" & vbCrLf)
        fsT.Writetext("                a.handleTouchMove.call(a, b);" & vbCrLf)
        fsT.Writetext("                a.handleTouchStart.call(a, b)" & vbCrLf)
        fsT.Writetext("            }, !0), b.addEventListener(" & Chr(34) & "touchmove" & Chr(34) & ", function (b) {" & vbCrLf)
        fsT.Writetext("                a.handleTouchMove.call(a, b)" & vbCrLf)
        fsT.Writetext("            }, !0), b.addEventListener(" & Chr(34) & "touchend" & Chr(34) & ", function (b) {" & vbCrLf)
        fsT.Writetext("                a.handleTouchEnd.call(a, b)" & vbCrLf)
        fsT.Writetext("            }, !0)), b.addEventListener(" & Chr(34) & "mousedown" & Chr(34) & ", function (b) {" & vbCrLf)
        fsT.Writetext("                a.mouseIsOver = !0;" & vbCrLf)
        fsT.Writetext("                a.handleMouseMove.call(a, b);" & vbCrLf)
        fsT.Writetext("                a.handleMouseDown.call(a, b)" & vbCrLf)
        fsT.Writetext("            }, !0), b.addEventListener(" & Chr(34) & "mouseover" & Chr(34) & ", function (b) {" & vbCrLf)
        fsT.Writetext("                a.handleMouseOver.call(a, b)" & vbCrLf)
        fsT.Writetext("            }, !0), b.addEventListener(" & Chr(34) & "mouseout" & Chr(34) & ", function (b) {" & vbCrLf)
        fsT.Writetext("                a.handleMouseOut.call(a," & vbCrLf)
        fsT.Writetext("                b)" & vbCrLf)
        fsT.Writetext("            }, !0)) : (b.attachEvent(" & Chr(34) & "onmousedown" & Chr(34) & ", function (b) {" & vbCrLf)
        fsT.Writetext("                a.handleMouseDown.call(a, b)" & vbCrLf)
        fsT.Writetext("            }), b.attachEvent(" & Chr(34) & "onmouseover" & Chr(34) & ", function (b) {" & vbCrLf)
        fsT.Writetext("                a.handleMouseOver.call(a, b)" & vbCrLf)
        fsT.Writetext("            }), b.attachEvent(" & Chr(34) & "onmouseout" & Chr(34) & ", function (b) {" & vbCrLf)
        fsT.Writetext("                a.handleMouseOut.call(a, b)" & vbCrLf)
        fsT.Writetext("            }))" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        dispDUpd: function () {" & vbCrLf)
        fsT.Writetext("            if (!this.skipEvents) {" & vbCrLf)
        fsT.Writetext("                var a;" & vbCrLf)
        fsT.Writetext("                this.dispatchDataUpdated && (this.dispatchDataUpdated = !1, a = " & Chr(34) & "dataUpdated" & Chr(34) & ", this.fire(a, {" & vbCrLf)
        fsT.Writetext("                    type: a," & vbCrLf)
        fsT.Writetext("                    chart: this" & vbCrLf)
        fsT.Writetext("                }));" & vbCrLf)
        fsT.Writetext("                this.chartCreated || (a = " & Chr(34) & "init" & Chr(34) & ", this.fire(a, {" & vbCrLf)
        fsT.Writetext("                    type: a," & vbCrLf)
        fsT.Writetext("                    chart: this" & vbCrLf)
        fsT.Writetext("                }));" & vbCrLf)
        fsT.Writetext("                this.chartRendered || (a = " & Chr(34) & "rendered" & Chr(34) & ", this.fire(a, {" & vbCrLf)
        fsT.Writetext("                    type: a," & vbCrLf)
        fsT.Writetext("                    chart: this" & vbCrLf)
        fsT.Writetext("                })," & vbCrLf)
        fsT.Writetext("                this.chartRendered = !0);" & vbCrLf)
        fsT.Writetext("                a = " & Chr(34) & "drawn" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                this.fire(a, {" & vbCrLf)
        fsT.Writetext("                    type: a," & vbCrLf)
        fsT.Writetext("                    chart: this" & vbCrLf)
        fsT.Writetext("                })" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            this.skipEvents = !1" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        validateSize: function () {" & vbCrLf)
        fsT.Writetext("            var a = this;" & vbCrLf)
        fsT.Writetext("            a.premeasure();" & vbCrLf)
        fsT.Writetext("            if (a.divRealWidth != a.previousWidth || a.divRealHeight != a.previousHeight) {" & vbCrLf)
        fsT.Writetext("                var b = a.legend;" & vbCrLf)
        fsT.Writetext("                if (0 < a.realWidth && 0 < a.realHeight) {" & vbCrLf)
        fsT.Writetext("                    a.sizeChanged = !0;" & vbCrLf)
        fsT.Writetext("                    if (b) {" & vbCrLf)
        fsT.Writetext("                        a.legendInitTO && clearTimeout(a.legendInitTO);" & vbCrLf)
        fsT.Writetext("                        var c = setTimeout(function () {" & vbCrLf)
        fsT.Writetext("                            b.invalidateSize()" & vbCrLf)
        fsT.Writetext("                        }, 10);" & vbCrLf)
        fsT.Writetext("                        a.timeOuts.push(c);" & vbCrLf)
        fsT.Writetext("                        a.legendInitTO = c" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                    " & Chr(34) & "xy" & Chr(34) & " != a.type ? a.marginsUpdated = !1 : (a.marginsUpdated = !0, a.selfZoom = !0);" & vbCrLf)
        fsT.Writetext("                    clearTimeout(a.initTO);" & vbCrLf)
        fsT.Writetext("                    c = setTimeout(function () {" & vbCrLf)
        fsT.Writetext("                        a.initChart()" & vbCrLf)
        fsT.Writetext("                    }, 10);" & vbCrLf)
        fsT.Writetext("                    a.timeOuts.push(c);" & vbCrLf)
        fsT.Writetext("                    a.initTO = c" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("                a.fire(" & Chr(34) & "resized" & Chr(34) & ", {" & vbCrLf)
        fsT.Writetext("                    type: " & Chr(34) & "resized" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                    chart: a" & vbCrLf)
        fsT.Writetext("                });" & vbCrLf)
        fsT.Writetext("                a.renderFix();" & vbCrLf)
        fsT.Writetext("                b && b.renderFix && b.renderFix();" & vbCrLf)
        fsT.Writetext("                a.previousHeight = a.divRealHeight;" & vbCrLf)
        fsT.Writetext("                a.previousWidth = a.divRealWidth" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        invalidateSize: function () {" & vbCrLf)
        fsT.Writetext("            this.previousHeight = this.previousWidth = NaN;" & vbCrLf)
        fsT.Writetext("            this.invalidateSizeReal()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        invalidateSizeReal: function () {" & vbCrLf)
        fsT.Writetext("            var a = this;" & vbCrLf)
        fsT.Writetext("            a.marginsUpdated = !1;" & vbCrLf)
        fsT.Writetext("            clearTimeout(a.validateTO);" & vbCrLf)
        fsT.Writetext("            var b = setTimeout(function () {" & vbCrLf)
        fsT.Writetext("                a.validateSize()" & vbCrLf)
        fsT.Writetext("            }, 5);" & vbCrLf)
        fsT.Writetext("            a.timeOuts.push(b);" & vbCrLf)
        fsT.Writetext("            a.validateTO = b" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        validateData: function (a) {" & vbCrLf)
        fsT.Writetext("            this.chartCreated && (this.dataChanged = !0, this.marginsUpdated = !1, this.initChart(a))" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        validateNow: function (a, b) {" & vbCrLf)
        fsT.Writetext("            this.initTO && clearTimeout(this.initTO);" & vbCrLf)
        fsT.Writetext("            a && (this.dataChanged = !0);" & vbCrLf)
        fsT.Writetext("            this.skipEvents = b;" & vbCrLf)
        fsT.Writetext("            this.chartRendered = !1;" & vbCrLf)
        fsT.Writetext("            this.write(this.div)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        showItem: function (a) {" & vbCrLf)
        fsT.Writetext("            a.hidden = !1;" & vbCrLf)
        fsT.Writetext("            this.initChart()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        hideItem: function (a) {" & vbCrLf)
        fsT.Writetext("            a.hidden = !0;" & vbCrLf)
        fsT.Writetext("            this.initChart()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        hideBalloon: function () {" & vbCrLf)
        fsT.Writetext("            var a = this;" & vbCrLf)
        fsT.Writetext("            clearTimeout(a.hoverInt);" & vbCrLf)
        fsT.Writetext("            clearTimeout(a.balloonTO);" & vbCrLf)
        fsT.Writetext("            a.hoverInt = setTimeout(function () {" & vbCrLf)
        fsT.Writetext("                a.hideBalloonReal.call(a)" & vbCrLf)
        fsT.Writetext("            }, a.hideBalloonTime)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        cleanChart: function () {}," & vbCrLf)
        fsT.Writetext("        hideBalloonReal: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.balloon;" & vbCrLf)
        fsT.Writetext("            a && a.hide()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        showBalloon: function (a, b, c, e, d) {" & vbCrLf)
        fsT.Writetext("            var f = this;" & vbCrLf)
        fsT.Writetext("            clearTimeout(f.balloonTO);" & vbCrLf)
        fsT.Writetext("            clearTimeout(f.hoverInt);" & vbCrLf)
        fsT.Writetext("            f.balloonTO = setTimeout(function () {" & vbCrLf)
        fsT.Writetext("                f.showBalloonReal.call(f, a, b, c, e, d)" & vbCrLf)
        fsT.Writetext("            }, 1)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        showBalloonReal: function (a, b, c, e, d) {" & vbCrLf)
        fsT.Writetext("            this.handleMouseMove();" & vbCrLf)
        fsT.Writetext("            var f = this.balloon;" & vbCrLf)
        fsT.Writetext("            f.enabled && (f.followCursor(!1), f.changeColor(b), !c || f.fixedPosition ? (f.setPosition(e, d), f.followCursor(!1)) : f.followCursor(!0), a && f.showBalloon(a))" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleTouchMove: function (a) {" & vbCrLf)
        fsT.Writetext("            this.hideBalloon();" & vbCrLf)
        fsT.Writetext("            var b = this.chartDiv;" & vbCrLf)
        fsT.Writetext("            a.touches && (a = a.touches.item(0), this.mouseX = a.pageX - d.findPosX(b), this.mouseY = a.pageY - d.findPosY(b))" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleMouseOver: function () {" & vbCrLf)
        fsT.Writetext("            this.outTO && clearTimeout(this.outTO);" & vbCrLf)
        fsT.Writetext("            d.resetMouseOver();" & vbCrLf)
        fsT.Writetext("            this.mouseIsOver = !0" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleMouseOut: function () {" & vbCrLf)
        fsT.Writetext("            var a = this;" & vbCrLf)
        fsT.Writetext("            a.outTO && clearTimeout(a.outTO);" & vbCrLf)
        fsT.Writetext("            a.outTO = setTimeout(function () {" & vbCrLf)
        fsT.Writetext("                a.handleMouseOutReal()" & vbCrLf)
        fsT.Writetext("            }, 10)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleMouseOutReal: function () {" & vbCrLf)
        fsT.Writetext("            d.resetMouseOver();" & vbCrLf)
        fsT.Writetext("            this.mouseIsOver = !1" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleMouseMove: function (a) {" & vbCrLf)
        fsT.Writetext("            if (this.mouseIsOver) {" & vbCrLf)
        fsT.Writetext("                var b = this.chartDiv;" & vbCrLf)
        fsT.Writetext("                a || (a = window.event);" & vbCrLf)
        fsT.Writetext("                var c, e;" & vbCrLf)
        fsT.Writetext("                if (a) {" & vbCrLf)
        fsT.Writetext("                    this.posX = d.findPosX(b);" & vbCrLf)
        fsT.Writetext("                    this.posY = d.findPosY(b);" & vbCrLf)
        fsT.Writetext("                    switch (this.mouseMode) {" & vbCrLf)
        fsT.Writetext("                        case 1:" & vbCrLf)
        fsT.Writetext("                            c = a.clientX - this.posX;" & vbCrLf)
        fsT.Writetext("                            e = a.clientY - this.posY;" & vbCrLf)
        fsT.Writetext("                            if (!this.divIsFixed) {" & vbCrLf)
        fsT.Writetext("                                var b = document.body," & vbCrLf)
        fsT.Writetext("                                    h, f, g, k;" & vbCrLf)
        fsT.Writetext("                                b && (h = b.scrollLeft, g = b.scrollTop);" & vbCrLf)
        fsT.Writetext("                                if (b = document.documentElement) f = b.scrollLeft, k = b.scrollTop;" & vbCrLf)
        fsT.Writetext("                                h = Math.max(h, f);" & vbCrLf)
        fsT.Writetext("                                g = Math.max(g, k);" & vbCrLf)
        fsT.Writetext("                                c += h;" & vbCrLf)
        fsT.Writetext("                                e += g" & vbCrLf)
        fsT.Writetext("                            }" & vbCrLf)
        fsT.Writetext("                            break;" & vbCrLf)
        fsT.Writetext("                        case 0:" & vbCrLf)
        fsT.Writetext("                            this.divIsFixed ? (c = a.clientX - this.posX, e = a.clientY - this.posY) : (c = a.pageX - this.posX, e = a.pageY - this.posY)" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                    a.touches && (a = a.touches.item(0), c = a.pageX - this.posX, e = a.pageY - this.posY);" & vbCrLf)
        fsT.Writetext("                    this.mouseX = c - this.dmouseX;" & vbCrLf)
        fsT.Writetext("                    this.mouseY = e - this.dmouseY" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleTouchStart: function (a) {" & vbCrLf)
        fsT.Writetext("            this.handleMouseDown(a)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleTouchEnd: function (a) {" & vbCrLf)
        fsT.Writetext("            d.resetMouseOver();" & vbCrLf)
        fsT.Writetext("            this.handleReleaseOutside(a)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleReleaseOutside: function () {}," & vbCrLf)
        fsT.Writetext("        handleMouseDown: function (a) {" & vbCrLf)
        fsT.Writetext("            d.resetMouseOver();" & vbCrLf)
        fsT.Writetext("            this.mouseIsOver = !0;" & vbCrLf)
        fsT.Writetext("            a && a.preventDefault && (this.panEventsEnabled ? a.preventDefault() : a.touches || a.preventDefault())" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        addLegend: function (a, b) {" & vbCrLf)
        fsT.Writetext("            a = d.processObject(a, d.AmLegend, this.theme);" & vbCrLf)
        fsT.Writetext("            a.divId = b;" & vbCrLf)
        fsT.Writetext("            a.ieW = 0;" & vbCrLf)
        fsT.Writetext("            var c;" & vbCrLf)
        fsT.Writetext("            c = " & Chr(34) & "object" & Chr(34) & " != typeof b && b ? document.getElementById(b) : b;" & vbCrLf)
        fsT.Writetext("            this.legend = a;" & vbCrLf)
        fsT.Writetext("            a.chart = this;" & vbCrLf)
        fsT.Writetext("            c ? (a.div = c, a.position = " & Chr(34) & "outside" & Chr(34) & ", a.autoMargins = !1) : a.div = this.legendDiv;" & vbCrLf)
        fsT.Writetext("            c = this.handleLegendEvent;" & vbCrLf)
        fsT.Writetext("            this.listenTo(a, " & Chr(34) & "showItem" & Chr(34) & ", c);" & vbCrLf)
        fsT.Writetext("            this.listenTo(a, " & Chr(34) & "hideItem" & Chr(34) & ", c);" & vbCrLf)
        fsT.Writetext("            this.listenTo(a, " & Chr(34) & "clickMarker" & Chr(34) & ", c);" & vbCrLf)
        fsT.Writetext("            this.listenTo(a, " & Chr(34) & "rollOverItem" & Chr(34) & ", c);" & vbCrLf)
        fsT.Writetext("            this.listenTo(a, " & Chr(34) & "rollOutItem" & Chr(34) & ", c);" & vbCrLf)
        fsT.Writetext("            this.listenTo(a, " & Chr(34) & "rollOverMarker" & Chr(34) & ", c);" & vbCrLf)
        fsT.Writetext("            this.listenTo(a, " & Chr(34) & "rollOutMarker" & Chr(34) & ", c);" & vbCrLf)
        fsT.Writetext("            this.listenTo(a, " & Chr(34) & "clickLabel" & Chr(34) & ", c);" & vbCrLf)
        fsT.Writetext("            return a" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        removeLegend: function () {" & vbCrLf)
        fsT.Writetext("            this.legend = void 0;" & vbCrLf)
        fsT.Writetext("            this.legendDiv.innerHTML = " & Chr(34) & "" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleResize: function () {" & vbCrLf)
        fsT.Writetext("            (d.isPercents(this.width) || d.isPercents(this.height)) && this.invalidateSizeReal();" & vbCrLf)
        fsT.Writetext("            this.renderFix()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        renderFix: function () {" & vbCrLf)
        fsT.Writetext("            if (!d.VML) {" & vbCrLf)
        fsT.Writetext("                var a = this.container;" & vbCrLf)
        fsT.Writetext("                a && a.renderFix()" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getSVG: function () {" & vbCrLf)
        fsT.Writetext("            if (d.hasSVG) return this.container" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        animate: function (a, b, c, e, h, f, g) {" & vbCrLf)
        fsT.Writetext("            a[" & Chr(34) & "an_" & Chr(34) & " + b] && d.removeFromArray(this.animations, a[" & Chr(34) & "an_" & Chr(34) & " + b]);" & vbCrLf)
        fsT.Writetext("            c = {" & vbCrLf)
        fsT.Writetext("                obj: a," & vbCrLf)
        fsT.Writetext("                frame: 0," & vbCrLf)
        fsT.Writetext("                attribute: b," & vbCrLf)
        fsT.Writetext("                from: c," & vbCrLf)
        fsT.Writetext("                to: e," & vbCrLf)
        fsT.Writetext("                time: h," & vbCrLf)
        fsT.Writetext("                effect: f," & vbCrLf)
        fsT.Writetext("                suffix: g" & vbCrLf)
        fsT.Writetext("            };" & vbCrLf)
        fsT.Writetext("            a[" & Chr(34) & "an_" & Chr(34) & " + b] = c;" & vbCrLf)
        fsT.Writetext("            this.animations.push(c);" & vbCrLf)
        fsT.Writetext("            return c" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        setLegendData: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = this.legend;" & vbCrLf)
        fsT.Writetext("            b && b.setData(a)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        stopAnim: function (a) {" & vbCrLf)
        fsT.Writetext("            d.removeFromArray(this.animations," & vbCrLf)
        fsT.Writetext("            a)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateAnimations: function () {" & vbCrLf)
        fsT.Writetext("            var a;" & vbCrLf)
        fsT.Writetext("            this.container && this.container.update();" & vbCrLf)
        fsT.Writetext("            if (this.animations) for (a = this.animations.length - 1; 0 <= a; a--) {" & vbCrLf)
        fsT.Writetext("                var b = this.animations[a]," & vbCrLf)
        fsT.Writetext("                    c = 1E3 * b.time / d.updateRate," & vbCrLf)
        fsT.Writetext("                    e = b.frame + 1," & vbCrLf)
        fsT.Writetext("                    h = b.obj," & vbCrLf)
        fsT.Writetext("                    f = b.attribute;" & vbCrLf)
        fsT.Writetext("                if (e <= c) {" & vbCrLf)
        fsT.Writetext("                    b.frame++;" & vbCrLf)
        fsT.Writetext("                    var g = Number(b.from)," & vbCrLf)
        fsT.Writetext("                        k = Number(b.to) - g," & vbCrLf)
        fsT.Writetext("                        c = d[b.effect](0, e, g, k, c);" & vbCrLf)
        fsT.Writetext("                    0 === k ? (this.animations.splice(a, 1), h.node.style[f] = Number(b.to) + b.suffix) : h.node.style[f] = c + b.suffix" & vbCrLf)
        fsT.Writetext("                } else h.node.style[f] = Number(b.to) + b.suffix, this.animations.splice(a, 1)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        update: function () {" & vbCrLf)
        fsT.Writetext("            this.updateAnimations()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        inIframe: function () {" & vbCrLf)
        fsT.Writetext("            try {" & vbCrLf)
        fsT.Writetext("                return window.self !== window.top" & vbCrLf)
        fsT.Writetext("            } catch (a) {" & vbCrLf)
        fsT.Writetext("                return !0" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        brr: function () {}" & vbCrLf)
        fsT.Writetext("    });" & vbCrLf)
        fsT.Writetext("    d.Slice = d.Class({" & vbCrLf)
        fsT.Writetext("        construct: function () {}" & vbCrLf)
        fsT.Writetext("    });" & vbCrLf)
        fsT.Writetext("    d.SerialDataItem = d.Class({" & vbCrLf)
        fsT.Writetext("        construct: function () {}" & vbCrLf)
        fsT.Writetext("    });" & vbCrLf)
        fsT.Writetext("    d.GraphDataItem = d.Class({" & vbCrLf)
        fsT.Writetext("        construct: function () {}" & vbCrLf)
        fsT.Writetext("    });" & vbCrLf)
        fsT.Writetext("    d.Guide = d.Class({" & vbCrLf)
        fsT.Writetext("        construct: function (a) {" & vbCrLf)
        fsT.Writetext("            this.cname = " & Chr(34) & "Guide" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            d.applyTheme(this, a, this.cname)" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    });" & vbCrLf)
        fsT.Writetext("    d.Title = d.Class({" & vbCrLf)
        fsT.Writetext("        construct: function (a) {" & vbCrLf)
        fsT.Writetext("            this.cname = " & Chr(34) & "Title" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            d.applyTheme(this, a, this.cname)" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    });" & vbCrLf)
        fsT.Writetext("    d.Label = d.Class({" & vbCrLf)
        fsT.Writetext("        construct: function (a) {" & vbCrLf)
        fsT.Writetext("            this.cname = " & Chr(34) & "Label" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            d.applyTheme(this, a," & vbCrLf)
        fsT.Writetext("            this.cname)" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    })" & vbCrLf)
        fsT.Writetext("})();" & vbCrLf)
        fsT.Writetext("(function () {" & vbCrLf)
        fsT.Writetext("    var d = window.AmCharts;" & vbCrLf)
        fsT.Writetext("    d.AmGraph = d.Class({" & vbCrLf)
        fsT.Writetext("        construct: function (a) {" & vbCrLf)
        fsT.Writetext("            this.cname = " & Chr(34) & "AmGraph" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.createEvents(" & Chr(34) & "rollOverGraphItem" & Chr(34) & ", " & Chr(34) & "rollOutGraphItem" & Chr(34) & ", " & Chr(34) & "clickGraphItem" & Chr(34) & ", " & Chr(34) & "doubleClickGraphItem" & Chr(34) & ", " & Chr(34) & "rightClickGraphItem" & Chr(34) & ", " & Chr(34) & "clickGraph" & Chr(34) & ", " & Chr(34) & "rollOverGraph" & Chr(34) & ", " & Chr(34) & "rollOutGraph" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            this.type = " & Chr(34) & "line" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.stackable = !0;" & vbCrLf)
        fsT.Writetext("            this.columnCount = 1;" & vbCrLf)
        fsT.Writetext("            this.columnIndex = 0;" & vbCrLf)
        fsT.Writetext("            this.centerCustomBullets = this.showBalloon = !0;" & vbCrLf)
        fsT.Writetext("            this.maxBulletSize = 50;" & vbCrLf)
        fsT.Writetext("            this.minBulletSize = 4;" & vbCrLf)
        fsT.Writetext("            this.balloonText = " & Chr(34) & "[[value]]" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.hidden = this.scrollbar = this.animationPlayed = !1;" & vbCrLf)
        fsT.Writetext("            this.pointPosition = " & Chr(34) & "middle" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.depthCount = 1;" & vbCrLf)
        fsT.Writetext("            this.includeInMinMax = !0;" & vbCrLf)
        fsT.Writetext("            this.negativeBase = 0;" & vbCrLf)
        fsT.Writetext("            this.visibleInLegend = !0;" & vbCrLf)
        fsT.Writetext("            this.showAllValueLabels = !1;" & vbCrLf)
        fsT.Writetext("            this.showBulletsAt = this.showBalloonAt = " & Chr(34) & "close" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.lineThickness = 1;" & vbCrLf)
        fsT.Writetext("            this.dashLength = 0;" & vbCrLf)
        fsT.Writetext("            this.connect = !0;" & vbCrLf)
        fsT.Writetext("            this.lineAlpha = 1;" & vbCrLf)
        fsT.Writetext("            this.bullet = " & Chr(34) & "none" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.bulletBorderThickness = 2;" & vbCrLf)
        fsT.Writetext("            this.bulletBorderAlpha = 0;" & vbCrLf)
        fsT.Writetext("            this.bulletAlpha = 1;" & vbCrLf)
        fsT.Writetext("            this.bulletSize = 8;" & vbCrLf)
        fsT.Writetext("            this.cornerRadiusTop = this.hideBulletsCount = this.bulletOffset = 0;" & vbCrLf)
        fsT.Writetext("            this.cursorBulletAlpha = 1;" & vbCrLf)
        fsT.Writetext("            this.gradientOrientation = " & Chr(34) & "vertical" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.dy = this.dx = 0;" & vbCrLf)
        fsT.Writetext("            this.periodValue = " & Chr(34) & "" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.clustered = !0;" & vbCrLf)
        fsT.Writetext("            this.periodSpan = 1;" & vbCrLf)
        fsT.Writetext("            this.y = this.x = 0;" & vbCrLf)
        fsT.Writetext("            this.switchable = !0;" & vbCrLf)
        fsT.Writetext("            this.tcc = this.minDistance = 1;" & vbCrLf)
        fsT.Writetext("            this.labelRotation = 0;" & vbCrLf)
        fsT.Writetext("            this.labelAnchor = " & Chr(34) & "auto" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.labelOffset = 3;" & vbCrLf)
        fsT.Writetext("            this.bcn = " & Chr(34) & "graph-" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.dateFormat = " & Chr(34) & "MMM DD, YYYY" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            d.applyTheme(this, a, this.cname)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        draw: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.chart," & vbCrLf)
        fsT.Writetext("                b = a.type;" & vbCrLf)
        fsT.Writetext("            isNaN(this.precision) || (this.numberFormatter ? this.numberFormatter.precision = this.precision : this.numberFormatter = {" & vbCrLf)
        fsT.Writetext("                precision: this.precision," & vbCrLf)
        fsT.Writetext("                decimalSeparator: a.decimalSeparator," & vbCrLf)
        fsT.Writetext("                thousandsSeparator: a.thousandsSeparator" & vbCrLf)
        fsT.Writetext("            });" & vbCrLf)
        fsT.Writetext("            var c = a.container;" & vbCrLf)
        fsT.Writetext("            this.container = c;" & vbCrLf)
        fsT.Writetext("            this.destroy();" & vbCrLf)
        fsT.Writetext("            var e = c.set()," & vbCrLf)
        fsT.Writetext("                h = c.set();" & vbCrLf)
        fsT.Writetext("            this.behindColumns ? (a.graphsBehindSet.push(e), a.bulletBehindSet.push(h)) : (a.graphsSet.push(e), a.bulletSet.push(h));" & vbCrLf)
        fsT.Writetext("            var f = this.bulletAxis;" & vbCrLf)
        fsT.Writetext("            d.isString(f) && (this.bulletAxis = a.getValueAxisById(f));" & vbCrLf)
        fsT.Writetext("            this.bulletSet = h;" & vbCrLf)
        fsT.Writetext("            if (!this.scrollbar) {" & vbCrLf)
        fsT.Writetext("                var f = a.marginLeftReal," & vbCrLf)
        fsT.Writetext("                    g = a.marginTopReal;" & vbCrLf)
        fsT.Writetext("                e.translate(f, g);" & vbCrLf)
        fsT.Writetext("                h.translate(f, g)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            c = c.set();" & vbCrLf)
        fsT.Writetext("            d.remove(this.columnsSet);" & vbCrLf)
        fsT.Writetext("            e.push(c);" & vbCrLf)
        fsT.Writetext("            this.set = e;" & vbCrLf)
        fsT.Writetext("            d.setCN(a, e, " & Chr(34) & "graph-" & Chr(34) & " + this.type);" & vbCrLf)
        fsT.Writetext("            d.setCN(a, e, " & Chr(34) & "graph-" & Chr(34) & " + this.id);" & vbCrLf)
        fsT.Writetext("            d.setCN(a," & vbCrLf)
        fsT.Writetext("            h, " & Chr(34) & "graph-" & Chr(34) & " + this.type);" & vbCrLf)
        fsT.Writetext("            d.setCN(a, h, " & Chr(34) & "graph-" & Chr(34) & " + this.id);" & vbCrLf)
        fsT.Writetext("            this.columnsSet = c;" & vbCrLf)
        fsT.Writetext("            this.columnsArray = [];" & vbCrLf)
        fsT.Writetext("            this.ownColumns = [];" & vbCrLf)
        fsT.Writetext("            this.allBullets = [];" & vbCrLf)
        fsT.Writetext("            this.animationArray = [];" & vbCrLf)
        fsT.Writetext("            e = this.labelPosition;" & vbCrLf)
        fsT.Writetext("            e || (h = this.valueAxis.stackType, e = " & Chr(34) & "top" & Chr(34) & ", " & Chr(34) & "column" & Chr(34) & " == this.type && (a.rotate && (e = " & Chr(34) & "right" & Chr(34) & "), " & Chr(34) & "100%" & Chr(34) & " == h || " & Chr(34) & "regular" & Chr(34) & " == h) && (e = " & Chr(34) & "middle" & Chr(34) & "), this.labelPosition = e);" & vbCrLf)
        fsT.Writetext("            d.ifArray(this.data) && (a = !1, " & Chr(34) & "xy" & Chr(34) & " == b ? this.xAxis.axisCreated && this.yAxis.axisCreated && (a = !0) : this.valueAxis.axisCreated && (a = !0), !this.hidden && a && this.createGraph())" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        createGraph: function () {" & vbCrLf)
        fsT.Writetext("            var a = this," & vbCrLf)
        fsT.Writetext("                b = a.chart;" & vbCrLf)
        fsT.Writetext("            a.startAlpha = b.startAlpha;" & vbCrLf)
        fsT.Writetext("            a.seqAn = b.sequencedAnimation;" & vbCrLf)
        fsT.Writetext("            a.baseCoord = a.valueAxis.baseCoord;" & vbCrLf)
        fsT.Writetext("            void 0 === a.fillAlphas && (a.fillAlphas = 0);" & vbCrLf)
        fsT.Writetext("            a.bulletColorR = a.bulletColor;" & vbCrLf)
        fsT.Writetext("            void 0 === a.bulletColorR && (a.bulletColorR = a.lineColorR, a.bulletColorNegative = a.negativeLineColor);" & vbCrLf)
        fsT.Writetext("            void 0 === a.bulletAlpha && (a.bulletAlpha = a.lineAlpha);" & vbCrLf)
        fsT.Writetext("            b = b.type;" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "gantt" & Chr(34) & " == b && (b = " & Chr(34) & "serial" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            clearTimeout(a.playedTO);" & vbCrLf)
        fsT.Writetext("            if (!isNaN(a.valueAxis.min) && !isNaN(a.valueAxis.max)) {" & vbCrLf)
        fsT.Writetext("                switch (b) {" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "serial" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        a.categoryAxis && (a.createSerialGraph(), " & Chr(34) & "candlestick" & Chr(34) & " == a.type && 1 > a.valueAxis.minMaxMultiplier && a.positiveClip(a.set));" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "radar" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        a.createRadarGraph();" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "xy" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        a.createXYGraph(), a.positiveClip(a.set)" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("                a.playedTO = setTimeout(function () {" & vbCrLf)
        fsT.Writetext("                    a.setAnimationPlayed.call(a)" & vbCrLf)
        fsT.Writetext("                }, 500 * a.chart.startDuration)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        setAnimationPlayed: function () {" & vbCrLf)
        fsT.Writetext("            this.animationPlayed = !0" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        createXYGraph: function () {" & vbCrLf)
        fsT.Writetext("            var a = []," & vbCrLf)
        fsT.Writetext("                b = []," & vbCrLf)
        fsT.Writetext("                c = this.xAxis," & vbCrLf)
        fsT.Writetext("                e = this.yAxis;" & vbCrLf)
        fsT.Writetext("            this.pmh = e.viH + 1;" & vbCrLf)
        fsT.Writetext("            this.pmw = c.viW + 1;" & vbCrLf)
        fsT.Writetext("            this.pmy = this.pmx = 0;" & vbCrLf)
        fsT.Writetext("            var d;" & vbCrLf)
        fsT.Writetext("            for (d = this.start; d <= this.end; d++) {" & vbCrLf)
        fsT.Writetext("                var f = this.data[d].axes[c.id].graphs[this.id]," & vbCrLf)
        fsT.Writetext("                    g = f.values," & vbCrLf)
        fsT.Writetext("                    k = g.x," & vbCrLf)
        fsT.Writetext("                    l = g.y," & vbCrLf)
        fsT.Writetext("                    g = c.getCoordinate(k)," & vbCrLf)
        fsT.Writetext("                    m = e.getCoordinate(l);" & vbCrLf)
        fsT.Writetext("                !isNaN(k) && !isNaN(l) && (a.push(g), b.push(m), f.x = g, f.y = m, k = this.createBullet(f, g, m, d), l = this.labelText) && (f = this.createLabel(f, g, m, l), this.positionLabel(g, m, f, k), this.allBullets.push(f))" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            this.drawLineGraph(a, b);" & vbCrLf)
        fsT.Writetext("            this.launchAnimation()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        createRadarGraph: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.valueAxis.stackType," & vbCrLf)
        fsT.Writetext("                b = []," & vbCrLf)
        fsT.Writetext("                c = []," & vbCrLf)
        fsT.Writetext("                e, d, f;" & vbCrLf)
        fsT.Writetext("            for (f = this.start; f <= this.end; f++) {" & vbCrLf)
        fsT.Writetext("                var g = this.data[f].axes[this.valueAxis.id].graphs[this.id]," & vbCrLf)
        fsT.Writetext("                    k;" & vbCrLf)
        fsT.Writetext("                k = " & Chr(34) & "none" & Chr(34) & " == a || " & Chr(34) & "3d" & Chr(34) & " == a ? g.values.value : g.values.close;" & vbCrLf)
        fsT.Writetext("                if (isNaN(k)) this.drawLineGraph(b, c), b = [], c = [];" & vbCrLf)
        fsT.Writetext("                else {" & vbCrLf)
        fsT.Writetext("                    var l = this.y - (this.valueAxis.getCoordinate(k) - this.height)," & vbCrLf)
        fsT.Writetext("                        m = 180 - 360 / (this.end - this.start + 1) * f;" & vbCrLf)
        fsT.Writetext("                    k = l * Math.sin(m / 180 * Math.PI);" & vbCrLf)
        fsT.Writetext("                    l *= Math.cos(m / 180 * Math.PI);" & vbCrLf)
        fsT.Writetext("                    b.push(k);" & vbCrLf)
        fsT.Writetext("                    c.push(l);" & vbCrLf)
        fsT.Writetext("                    var m = this.createBullet(g, k, l, f)," & vbCrLf)
        fsT.Writetext("                        n = this.labelText;" & vbCrLf)
        fsT.Writetext("                    n && (g = this.createLabel(g, k, l, n), this.positionLabel(k, l, g, m), this.allBullets.push(g));" & vbCrLf)
        fsT.Writetext("                    isNaN(e) && (e = k);" & vbCrLf)
        fsT.Writetext("                    isNaN(d) && (d = l)" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            b.push(e);" & vbCrLf)
        fsT.Writetext("            c.push(d);" & vbCrLf)
        fsT.Writetext("            this.drawLineGraph(b, c);" & vbCrLf)
        fsT.Writetext("            this.launchAnimation()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        positionLabel: function (a, b, c," & vbCrLf)
        fsT.Writetext("        e) {" & vbCrLf)
        fsT.Writetext("            var d = " & Chr(34) & "middle" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                f = !1," & vbCrLf)
        fsT.Writetext("                g = this.labelPosition," & vbCrLf)
        fsT.Writetext("                k = c.getBBox();" & vbCrLf)
        fsT.Writetext("            if (e) {" & vbCrLf)
        fsT.Writetext("                var l = e.graphDataItem," & vbCrLf)
        fsT.Writetext("                    m = this.chart.rotate," & vbCrLf)
        fsT.Writetext("                    n = l.isNegative," & vbCrLf)
        fsT.Writetext("                    q = this.chart;" & vbCrLf)
        fsT.Writetext("                b -= k.height / 4 / 2;" & vbCrLf)
        fsT.Writetext("                switch (g) {" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "top" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        g = m ? " & Chr(34) & "top" & Chr(34) & " : n ? " & Chr(34) & "bottom" & Chr(34) & " : " & Chr(34) & "top" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "right" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        g = m ? n ? " & Chr(34) & "left" & Chr(34) & " : " & Chr(34) & "right" & Chr(34) & " : " & Chr(34) & "right" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "bottom" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        g = m ? " & Chr(34) & "bottom" & Chr(34) & " : n ? " & Chr(34) & "top" & Chr(34) & " : " & Chr(34) & "bottom" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "left" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        g = m ? n ? " & Chr(34) & "right" & Chr(34) & " : " & Chr(34) & "left" & Chr(34) & " : " & Chr(34) & "left" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("                var p = l.columnGraphics," & vbCrLf)
        fsT.Writetext("                    r = 0," & vbCrLf)
        fsT.Writetext("                    t = 0;" & vbCrLf)
        fsT.Writetext("                p && (r = p.x, t = p.y);" & vbCrLf)
        fsT.Writetext("                var u = this.labelOffset;" & vbCrLf)
        fsT.Writetext("                switch (g) {" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "top" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        b -= e.size / 2 + k.height / 2 + u;" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "right" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        d = " & Chr(34) & "start" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                        a += e.size / 2 + u;" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "bottom" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        b += e.size / 2 + k.height / 2 + u;" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "left" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        d = " & Chr(34) & "end" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                        a -= e.size / 2 + u;" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "inside" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        " & Chr(34) & "column" & Chr(34) & " == this.type && (f = !0, m ? n ? (d = " & Chr(34) & "end" & Chr(34) & ", a = r - 3 - u) : (d = " & Chr(34) & "start" & Chr(34) & ", a = r + 3 + u) : b = n ? t + 7 + u : t - 10 - u);" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "middle" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        " & Chr(34) & "column" & Chr(34) & " == this.type && (f = !0, m ? a -= (a - r) / 2 + u - 3 : b -= (b - t) / 2 + u - 3)" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "auto" & Chr(34) & " != this.labelAnchor && (d = this.labelAnchor);" & vbCrLf)
        fsT.Writetext("                c.attr({" & vbCrLf)
        fsT.Writetext("                    " & Chr(34) & "text-anchor" & Chr(34) & ": d" & vbCrLf)
        fsT.Writetext("                });" & vbCrLf)
        fsT.Writetext("                this.labelRotation && c.rotate(this.labelRotation);" & vbCrLf)
        fsT.Writetext("                c.translate(a, b);" & vbCrLf)
        fsT.Writetext("                k = c.getBBox();" & vbCrLf)
        fsT.Writetext("                !this.showAllValueLabels && p && f && (k.height > l.columnHeight || k.width > l.columnWidth) && (c.remove(), c = !1);" & vbCrLf)
        fsT.Writetext("                if (c && (" & Chr(34) & "serial" & Chr(34) & " == q.type || " & Chr(34) & "gantt" & Chr(34) & " == q.type)) if (m) {" & vbCrLf)
        fsT.Writetext("                    if (0 > b || b > this.height) c.remove(), c = !1" & vbCrLf)
        fsT.Writetext("                } else if (0 > a || a > this.width) c.remove(), c = !1;" & vbCrLf)
        fsT.Writetext("                return c" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getGradRotation: function () {" & vbCrLf)
        fsT.Writetext("            var a = 270;" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "horizontal" & Chr(34) & " == this.gradientOrientation && (a = 0);" & vbCrLf)
        fsT.Writetext("            return this.gradientRotation = a" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        createSerialGraph: function () {" & vbCrLf)
        fsT.Writetext("            this.dashLengthSwitched = this.fillColorsSwitched = this.lineColorSwitched = void 0;" & vbCrLf)
        fsT.Writetext("            var a = this.chart," & vbCrLf)
        fsT.Writetext("                b = this.id," & vbCrLf)
        fsT.Writetext("                c = this.index," & vbCrLf)
        fsT.Writetext("                e = this.data," & vbCrLf)
        fsT.Writetext("                h = this.chart.container," & vbCrLf)
        fsT.Writetext("                f = this.valueAxis," & vbCrLf)
        fsT.Writetext("                g = this.type," & vbCrLf)
        fsT.Writetext("                k = this.columnWidthReal," & vbCrLf)
        fsT.Writetext("                l = this.showBulletsAt;" & vbCrLf)
        fsT.Writetext("            isNaN(this.columnWidth) || (k = this.columnWidth);" & vbCrLf)
        fsT.Writetext("            isNaN(k) && (k = .8);" & vbCrLf)
        fsT.Writetext("            var m = this.useNegativeColorIfDown," & vbCrLf)
        fsT.Writetext("                n = this.width," & vbCrLf)
        fsT.Writetext("                q = this.height," & vbCrLf)
        fsT.Writetext("                p = this.y," & vbCrLf)
        fsT.Writetext("                r = this.rotate," & vbCrLf)
        fsT.Writetext("                t = this.columnCount," & vbCrLf)
        fsT.Writetext("                u = d.toCoordinate(this.cornerRadiusTop, k / 2)," & vbCrLf)
        fsT.Writetext("                z = this.connect," & vbCrLf)
        fsT.Writetext("                v = []," & vbCrLf)
        fsT.Writetext("                w = []," & vbCrLf)
        fsT.Writetext("                x, A, B, D, C = this.chart.graphs.length," & vbCrLf)
        fsT.Writetext("                I, H = this.dx / this.tcc," & vbCrLf)
        fsT.Writetext("                O = this.dy / this.tcc," & vbCrLf)
        fsT.Writetext("                J = f.stackType," & vbCrLf)
        fsT.Writetext("                da = this.start," & vbCrLf)
        fsT.Writetext("                pa = this.end," & vbCrLf)
        fsT.Writetext("                U = this.scrollbar," & vbCrLf)
        fsT.Writetext("                na = " & Chr(34) & "graph-column-" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            U && (na = " & Chr(34) & "scrollbar-graph-column-" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            var qa = this.categoryAxis," & vbCrLf)
        fsT.Writetext("                ja = this.baseCoord," & vbCrLf)
        fsT.Writetext("                Pa = this.negativeBase," & vbCrLf)
        fsT.Writetext("                aa = this.columnIndex," & vbCrLf)
        fsT.Writetext("                Z = this.lineThickness," & vbCrLf)
        fsT.Writetext("                V = this.lineAlpha," & vbCrLf)
        fsT.Writetext("                sa = this.lineColorR," & vbCrLf)
        fsT.Writetext("                ba = this.dashLength," & vbCrLf)
        fsT.Writetext("                ca = this.set," & vbCrLf)
        fsT.Writetext("                ta, ia = this.getGradRotation()," & vbCrLf)
        fsT.Writetext("                Q = this.chart.columnSpacing," & vbCrLf)
        fsT.Writetext("                W = qa.cellWidth," & vbCrLf)
        fsT.Writetext("                wa = (W * k - t) / t;" & vbCrLf)
        fsT.Writetext("            Q > wa && (Q = wa);" & vbCrLf)
        fsT.Writetext("            var G, y, ka, ea = q + 1," & vbCrLf)
        fsT.Writetext("                Qa = n + 1," & vbCrLf)
        fsT.Writetext("                Y = 0," & vbCrLf)
        fsT.Writetext("                qb = 0," & vbCrLf)
        fsT.Writetext("                rb, sb, eb, fb, tb = this.fillColorsR," & vbCrLf)
        fsT.Writetext("                Ja = this.negativeFillColors," & vbCrLf)
        fsT.Writetext("                Da = this.negativeLineColor," & vbCrLf)
        fsT.Writetext("                Wa = this.fillAlphas," & vbCrLf)
        fsT.Writetext("                Xa = this.negativeFillAlphas;" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "object" & Chr(34) & " == typeof Wa && (Wa = Wa[0]);" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "object" & Chr(34) & " == typeof Xa && (Xa = Xa[0]);" & vbCrLf)
        fsT.Writetext("            var gb = f.getCoordinate(f.min);" & vbCrLf)
        fsT.Writetext("            f.logarithmic && (gb = f.getCoordinate(f.minReal));" & vbCrLf)
        fsT.Writetext("            this.minCoord = gb;" & vbCrLf)
        fsT.Writetext("            this.resetBullet && (this.bullet = " & Chr(34) & "none" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            if (!(U || " & Chr(34) & "line" & Chr(34) & " != g && " & Chr(34) & "smoothedLine" & Chr(34) & " != g && " & Chr(34) & "step" & Chr(34) & " != g || (1 == e.length && " & Chr(34) & "step" & Chr(34) & " != g && " & Chr(34) & "none" & Chr(34) & " == this.bullet && (this.bullet = " & Chr(34) & "round" & Chr(34) & ", this.resetBullet = !0), !Ja && void 0 == Da || m))) {" & vbCrLf)
        fsT.Writetext("                var Ra = Pa;" & vbCrLf)
        fsT.Writetext("                Ra > f.max && (Ra = f.max);" & vbCrLf)
        fsT.Writetext("                Ra < f.min && (Ra = f.min);" & vbCrLf)
        fsT.Writetext("                f.logarithmic && (Ra = f.minReal);" & vbCrLf)
        fsT.Writetext("                var Ga = f.getCoordinate(Ra)," & vbCrLf)
        fsT.Writetext("                    Ib = f.getCoordinate(f.max);" & vbCrLf)
        fsT.Writetext("                r ? (ea = q, Qa = Math.abs(Ib - Ga) + 1, rb = q, sb = Math.abs(gb - Ga) + 1, fb = qb = 0, f.reversed ? (Y = 0, eb = Ga) : (Y = Ga, eb = 0)) : (Qa = n, ea = Math.abs(Ib - Ga) + 1, sb = n, rb = Math.abs(gb - Ga) + 1," & vbCrLf)
        fsT.Writetext("                eb = Y = 0, f.reversed ? (fb = p, qb = Ga) : fb = Ga + 1)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            var Ha = Math.round;" & vbCrLf)
        fsT.Writetext("            this.pmx = Ha(Y);" & vbCrLf)
        fsT.Writetext("            this.pmy = Ha(qb);" & vbCrLf)
        fsT.Writetext("            this.pmh = Ha(ea);" & vbCrLf)
        fsT.Writetext("            this.pmw = Ha(Qa);" & vbCrLf)
        fsT.Writetext("            this.nmx = Ha(eb);" & vbCrLf)
        fsT.Writetext("            this.nmy = Ha(fb);" & vbCrLf)
        fsT.Writetext("            this.nmh = Ha(rb);" & vbCrLf)
        fsT.Writetext("            this.nmw = Ha(sb);" & vbCrLf)
        fsT.Writetext("            d.isModern || (this.nmy = this.nmx = 0, this.nmh = this.height);" & vbCrLf)
        fsT.Writetext("            this.clustered || (t = 1);" & vbCrLf)
        fsT.Writetext("            k = " & Chr(34) & "column" & Chr(34) & " == g ? (W * k - Q * (t - 1)) / t : W * k;" & vbCrLf)
        fsT.Writetext("            1 > k && (k = 1);" & vbCrLf)
        fsT.Writetext("            var Jb = this.fixedColumnWidth;" & vbCrLf)
        fsT.Writetext("            isNaN(Jb) || (k = Jb);" & vbCrLf)
        fsT.Writetext("            var K;" & vbCrLf)
        fsT.Writetext("            if (" & Chr(34) & "line" & Chr(34) & " == g || " & Chr(34) & "step" & Chr(34) & " == g || " & Chr(34) & "smoothedLine" & Chr(34) & " == g) {" & vbCrLf)
        fsT.Writetext("                if (0 < da) {" & vbCrLf)
        fsT.Writetext("                    for (K = da - 1; - 1 < K; K--) if (G = e[K], y = G.axes[f.id].graphs[b], ka = y.values.value, !isNaN(ka)) {" & vbCrLf)
        fsT.Writetext("                        da = K;" & vbCrLf)
        fsT.Writetext("                        break" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                    if (this.lineColorField) for (K = da; - 1 < K; K--) if (G = e[K], y = G.axes[f.id].graphs[b], y.lineColor) {" & vbCrLf)
        fsT.Writetext("                        this.bulletColorSwitched = this.lineColorSwitched = y.lineColor;" & vbCrLf)
        fsT.Writetext("                        break" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                    if (this.fillColorsField) for (K = da; - 1 < K; K--) if (G = e[K], y = G.axes[f.id].graphs[b], y.fillColors) {" & vbCrLf)
        fsT.Writetext("                        this.fillColorsSwitched = y.fillColors;" & vbCrLf)
        fsT.Writetext("                        break" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                    if (this.dashLengthField) for (K = da; - 1 < K; K--) if (G = e[K], y = G.axes[f.id].graphs[b], !isNaN(y.dashLength)) {" & vbCrLf)
        fsT.Writetext("                        this.dashLengthSwitched = y.dashLength;" & vbCrLf)
        fsT.Writetext("                        break" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("                if (pa < e.length - 1) for (K = pa + 1; K < e.length; K++) if (G = e[K], y = G.axes[f.id].graphs[b]," & vbCrLf)
        fsT.Writetext("                ka = y.values.value, !isNaN(ka)) {" & vbCrLf)
        fsT.Writetext("                    pa = K;" & vbCrLf)
        fsT.Writetext("                    break" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            pa < e.length - 1 && pa++;" & vbCrLf)
        fsT.Writetext("            var R = []," & vbCrLf)
        fsT.Writetext("                S = []," & vbCrLf)
        fsT.Writetext("                Ka = !1;" & vbCrLf)
        fsT.Writetext("            if (" & Chr(34) & "line" & Chr(34) & " == g || " & Chr(34) & "step" & Chr(34) & " == g || " & Chr(34) & "smoothedLine" & Chr(34) & " == g) if (this.stackable && " & Chr(34) & "regular" & Chr(34) & " == J || " & Chr(34) & "100%" & Chr(34) & " == J || this.fillToGraph) Ka = !0;" & vbCrLf)
        fsT.Writetext("            var Kb = this.noStepRisers," & vbCrLf)
        fsT.Writetext("                hb = -1E3," & vbCrLf)
        fsT.Writetext("                ib = -1E3," & vbCrLf)
        fsT.Writetext("                jb = this.minDistance," & vbCrLf)
        fsT.Writetext("                La = !0," & vbCrLf)
        fsT.Writetext("                Ya = !1;" & vbCrLf)
        fsT.Writetext("            for (K = da; K <= pa; K++) {" & vbCrLf)
        fsT.Writetext("                G = e[K];" & vbCrLf)
        fsT.Writetext("                y = G.axes[f.id].graphs[b];" & vbCrLf)
        fsT.Writetext("                y.index = K;" & vbCrLf)
        fsT.Writetext("                var Za, Ma = NaN;" & vbCrLf)
        fsT.Writetext("                if (m && void 0 == this.openField) for (var ub = K + 1; ub < e.length && (!e[ub] || !(Za = e[K + 1].axes[f.id].graphs[b]) || !Za.values || (Ma = Za.values.value, isNaN(Ma))); ub++);" & vbCrLf)
        fsT.Writetext("                var T, P, M," & vbCrLf)
        fsT.Writetext("                fa, la = NaN," & vbCrLf)
        fsT.Writetext("                    F = NaN," & vbCrLf)
        fsT.Writetext("                    E = NaN," & vbCrLf)
        fsT.Writetext("                    N = NaN," & vbCrLf)
        fsT.Writetext("                    L = NaN," & vbCrLf)
        fsT.Writetext("                    Na = NaN," & vbCrLf)
        fsT.Writetext("                    Ea = NaN," & vbCrLf)
        fsT.Writetext("                    Oa = NaN," & vbCrLf)
        fsT.Writetext("                    Fa = NaN," & vbCrLf)
        fsT.Writetext("                    ya = NaN," & vbCrLf)
        fsT.Writetext("                    za = NaN," & vbCrLf)
        fsT.Writetext("                    ga = NaN," & vbCrLf)
        fsT.Writetext("                    ha = NaN," & vbCrLf)
        fsT.Writetext("                    X = NaN," & vbCrLf)
        fsT.Writetext("                    vb = NaN," & vbCrLf)
        fsT.Writetext("                    wb = NaN," & vbCrLf)
        fsT.Writetext("                    ma = NaN," & vbCrLf)
        fsT.Writetext("                    oa = void 0," & vbCrLf)
        fsT.Writetext("                    Ia = tb," & vbCrLf)
        fsT.Writetext("                    Sa = Wa," & vbCrLf)
        fsT.Writetext("                    Ba = sa," & vbCrLf)
        fsT.Writetext("                    ua, xa, xb = this.proCandlesticks," & vbCrLf)
        fsT.Writetext("                    kb = this.topRadius," & vbCrLf)
        fsT.Writetext("                    $a = this.pattern;" & vbCrLf)
        fsT.Writetext("                void 0 != y.pattern && ($a = y.pattern);" & vbCrLf)
        fsT.Writetext("                isNaN(y.alpha) || (Sa = y.alpha);" & vbCrLf)
        fsT.Writetext("                isNaN(y.dashLength) || (ba = y.dashLength);" & vbCrLf)
        fsT.Writetext("                var Ca = y.values;" & vbCrLf)
        fsT.Writetext("                f.recalculateToPercents && (Ca = y.percents);" & vbCrLf)
        fsT.Writetext("                if (Ca) {" & vbCrLf)
        fsT.Writetext("                    X = this.stackable && " & Chr(34) & "none" & Chr(34) & " != J && " & Chr(34) & "3d" & Chr(34) & " != J ? Ca.close : Ca.value;" & vbCrLf)
        fsT.Writetext("                    if (" & Chr(34) & "candlestick" & Chr(34) & " == g || " & Chr(34) & "ohlc" & Chr(34) & " == g) X = Ca.close, wb = Ca.low, Ea = f.getCoordinate(wb)," & vbCrLf)
        fsT.Writetext("                    vb = Ca.high, Fa = f.getCoordinate(vb);" & vbCrLf)
        fsT.Writetext("                    ma = Ca.open;" & vbCrLf)
        fsT.Writetext("                    E = f.getCoordinate(X);" & vbCrLf)
        fsT.Writetext("                    isNaN(ma) || (L = f.getCoordinate(ma), m && (Ma = ma, ma = L = NaN));" & vbCrLf)
        fsT.Writetext("                    m && (void 0 == this.openField ? Za && (Za.isNegative = Ma < X ? !0 : !1, isNaN(Ma) && (y.isNegative = !La)) : y.isNegative = Ma > X ? !0 : !1);" & vbCrLf)
        fsT.Writetext("                    if (!U) switch (this.showBalloonAt) {" & vbCrLf)
        fsT.Writetext("                        case " & Chr(34) & "close" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                            y.y = E;" & vbCrLf)
        fsT.Writetext("                            break;" & vbCrLf)
        fsT.Writetext("                        case " & Chr(34) & "open" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                            y.y = L;" & vbCrLf)
        fsT.Writetext("                            break;" & vbCrLf)
        fsT.Writetext("                        case " & Chr(34) & "high" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                            y.y = Fa;" & vbCrLf)
        fsT.Writetext("                            break;" & vbCrLf)
        fsT.Writetext("                        case " & Chr(34) & "low" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                            y.y = Ea" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                    var la = G.x[qa.id]," & vbCrLf)
        fsT.Writetext("                        Ta = this.periodSpan - 1," & vbCrLf)
        fsT.Writetext("                        ra = Math.floor(W / 2) + Math.floor(Ta * W / 2)," & vbCrLf)
        fsT.Writetext("                        Aa = ra," & vbCrLf)
        fsT.Writetext("                        lb = 0;" & vbCrLf)
        fsT.Writetext("                    " & Chr(34) & "left" & Chr(34) & " == this.stepDirection && (lb = (2 * W + Ta * W) / 2, la -= lb);" & vbCrLf)
        fsT.Writetext("                    " & Chr(34) & "center" & Chr(34) & " == this.stepDirection && (lb = W / 2, la -= lb);" & vbCrLf)
        fsT.Writetext("                    " & Chr(34) & "start" & Chr(34) & " == this.pointPosition && (la -= W / 2 + Math.floor(Ta * W / 2), ra = 0, Aa = Math.floor(W) + Math.floor(Ta * W));" & vbCrLf)
        fsT.Writetext("                    " & Chr(34) & "end" & Chr(34) & " == this.pointPosition && (la += W / 2 + Math.floor(Ta * W / 2), ra = Math.floor(W) + Math.floor(Ta * W), Aa = 0);" & vbCrLf)
        fsT.Writetext("                    if (Kb) {" & vbCrLf)
        fsT.Writetext("                        var yb = this.columnWidth;" & vbCrLf)
        fsT.Writetext("                        isNaN(yb) || (ra *= yb, Aa *= yb)" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                    U || (y.x = la); - 1E5 > la && (la = -1E5);" & vbCrLf)
        fsT.Writetext("                    la > n + 1E5 && (la = n + 1E5);" & vbCrLf)
        fsT.Writetext("                    r ? (F = E, N = L, L = E = la, isNaN(ma) && !this.fillToGraph && (N = ja), Na = Ea, Oa = Fa) : (N = F = la, isNaN(ma) && !this.fillToGraph && (L = ja));" & vbCrLf)
        fsT.Writetext("                    if (!xb && X < ma || xb && X < ta) y.isNegative = !0, Ja && (Ia = Ja)," & vbCrLf)
        fsT.Writetext("                    Xa && (Sa = Xa), void 0 != Da && (Ba = Da);" & vbCrLf)
        fsT.Writetext("                    Ya = !1;" & vbCrLf)
        fsT.Writetext("                    isNaN(X) || (m ? X > Ma ? (La && (Ya = !0), La = !1) : (La || (Ya = !0), La = !0) : y.isNegative = X < Pa ? !0 : !1, ta = X);" & vbCrLf)
        fsT.Writetext("                    var Lb = !1;" & vbCrLf)
        fsT.Writetext("                    U && a.chartScrollbar.ignoreCustomColors && (Lb = !0);" & vbCrLf)
        fsT.Writetext("                    Lb || (void 0 != y.color && (Ia = y.color), y.fillColors && (Ia = y.fillColors));" & vbCrLf)
        fsT.Writetext("                    switch (g) {" & vbCrLf)
        fsT.Writetext("                        case " & Chr(34) & "line" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                            if (isNaN(X)) z || (this.drawLineGraph(v, w, R, S), v = [], w = [], R = [], S = []);" & vbCrLf)
        fsT.Writetext("                            else {" & vbCrLf)
        fsT.Writetext("                                if (Math.abs(F - hb) >= jb || Math.abs(E - ib) >= jb) v.push(F), w.push(E), hb = F, ib = E;" & vbCrLf)
        fsT.Writetext("                                ya = F;" & vbCrLf)
        fsT.Writetext("                                za = E;" & vbCrLf)
        fsT.Writetext("                                ga = F;" & vbCrLf)
        fsT.Writetext("                                ha = E;" & vbCrLf)
        fsT.Writetext("                                !Ka || isNaN(L) || isNaN(N) || (R.push(N), S.push(L));" & vbCrLf)
        fsT.Writetext("                                if (Ya || void 0 != y.lineColor || void 0 != y.fillColors || !isNaN(y.dashLength)) this.drawLineGraph(v, w, R, S), v = [F], w = [E], R = [], S = [], !Ka || isNaN(L) || isNaN(N) || (R.push(N), S.push(L)), m ? La ? (this.lineColorSwitched = sa, this.fillColorsSwitched = tb) : (this.lineColorSwitched = Da, this.fillColorsSwitched = Ja) : (this.lineColorSwitched = y.lineColor, this.fillColorsSwitched = y.fillColors), this.dashLengthSwitched = y.dashLength;" & vbCrLf)
        fsT.Writetext("                                y.gap && (this.drawLineGraph(v, w, R, S), v = [], w = [], R = [], S = [])" & vbCrLf)
        fsT.Writetext("                            }" & vbCrLf)
        fsT.Writetext("                            break;" & vbCrLf)
        fsT.Writetext("                        case " & Chr(34) & "smoothedLine" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                            if (isNaN(X)) z || (this.drawSmoothedGraph(v, w, R, S), v = []," & vbCrLf)
        fsT.Writetext("                            w = [], R = [], S = []);" & vbCrLf)
        fsT.Writetext("                            else {" & vbCrLf)
        fsT.Writetext("                                if (Math.abs(F - hb) >= jb || Math.abs(E - ib) >= jb) v.push(F), w.push(E), hb = F, ib = E;" & vbCrLf)
        fsT.Writetext("                                ya = F;" & vbCrLf)
        fsT.Writetext("                                za = E;" & vbCrLf)
        fsT.Writetext("                                ga = F;" & vbCrLf)
        fsT.Writetext("                                ha = E;" & vbCrLf)
        fsT.Writetext("                                !Ka || isNaN(L) || isNaN(N) || (R.push(N), S.push(L));" & vbCrLf)
        fsT.Writetext("                                void 0 == y.lineColor && void 0 == y.fillColors && isNaN(y.dashLength) || (this.drawSmoothedGraph(v, w, R, S), v = [F], w = [E], R = [], S = [], !Ka || isNaN(L) || isNaN(N) || (R.push(N), S.push(L)), this.lineColorSwitched = y.lineColor, this.fillColorsSwitched = y.fillColors, this.dashLengthSwitched = y.dashLength);" & vbCrLf)
        fsT.Writetext("                                y.gap && (this.drawSmoothedGraph(v, w, R, S), v = [], w = [], R = [], S = [])" & vbCrLf)
        fsT.Writetext("                            }" & vbCrLf)
        fsT.Writetext("                            break;" & vbCrLf)
        fsT.Writetext("                        case " & Chr(34) & "step" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                            if (!isNaN(X)) {" & vbCrLf)
        fsT.Writetext("                                r ? (isNaN(x) || (v.push(x), w.push(E - ra)), w.push(E - ra), v.push(F), w.push(E + Aa), v.push(F), !Ka || isNaN(L) || isNaN(N) || (isNaN(B) || (R.push(B), S.push(L - ra)), R.push(N), S.push(L - ra), R.push(N), S.push(L + Aa))) : (isNaN(A) || (w.push(A), v.push(F - ra)), v.push(F - ra), w.push(E), v.push(F + Aa), w.push(E), !Ka || isNaN(L) || isNaN(N) || (isNaN(D) || (R.push(N - ra), S.push(D)), R.push(N - ra), S.push(L), R.push(N + Aa), S.push(L)));" & vbCrLf)
        fsT.Writetext("                                x = F;" & vbCrLf)
        fsT.Writetext("                                A = E;" & vbCrLf)
        fsT.Writetext("                                B = N;" & vbCrLf)
        fsT.Writetext("                                D = L;" & vbCrLf)
        fsT.Writetext("                                ya = F;" & vbCrLf)
        fsT.Writetext("                                za = E;" & vbCrLf)
        fsT.Writetext("                                ga = F;" & vbCrLf)
        fsT.Writetext("                                ha = E;" & vbCrLf)
        fsT.Writetext("                                if (Ya || void 0 != y.lineColor || void 0 != y.fillColors || !isNaN(y.dashLength)) {" & vbCrLf)
        fsT.Writetext("                                    var Zb = v[v.length - 2]," & vbCrLf)
        fsT.Writetext("                                        $b = w[w.length - 2];" & vbCrLf)
        fsT.Writetext("                                    v.pop();" & vbCrLf)
        fsT.Writetext("                                    w.pop();" & vbCrLf)
        fsT.Writetext("                                    this.drawLineGraph(v, w, R, S);" & vbCrLf)
        fsT.Writetext("                                    v = [Zb];" & vbCrLf)
        fsT.Writetext("                                    w = [$b];" & vbCrLf)
        fsT.Writetext("                                    r ? (w.push(E + Aa), v.push(F)) : (v.push(F + Aa), w.push(E));" & vbCrLf)
        fsT.Writetext("                                    R = [];" & vbCrLf)
        fsT.Writetext("                                    S = [];" & vbCrLf)
        fsT.Writetext("                                    this.lineColorSwitched = y.lineColor;" & vbCrLf)
        fsT.Writetext("                                    this.fillColorsSwitched = y.fillColors;" & vbCrLf)
        fsT.Writetext("                                    this.dashLengthSwitched = y.dashLength;" & vbCrLf)
        fsT.Writetext("                                    m && (La ? (this.lineColorSwitched = sa, this.fillColorsSwitched = tb) : (this.lineColorSwitched = Da, this.fillColorsSwitched = Ja))" & vbCrLf)
        fsT.Writetext("                                }" & vbCrLf)
        fsT.Writetext("                                if (Kb || y.gap) x = A = NaN, this.drawLineGraph(v, w, R, S), v = [], w = [], R = [], S = []" & vbCrLf)
        fsT.Writetext("                            } else if (!z) {" & vbCrLf)
        fsT.Writetext("                                if (1 >= this.periodSpan || 1 < this.periodSpan && F - x > ra + Aa) x = A = NaN;" & vbCrLf)
        fsT.Writetext("                                this.drawLineGraph(v, w, R, S);" & vbCrLf)
        fsT.Writetext("                                v = [];" & vbCrLf)
        fsT.Writetext("                                w = [];" & vbCrLf)
        fsT.Writetext("                                R = [];" & vbCrLf)
        fsT.Writetext("                                S = []" & vbCrLf)
        fsT.Writetext("                            }" & vbCrLf)
        fsT.Writetext("                            break;" & vbCrLf)
        fsT.Writetext("                        case " & Chr(34) & "column" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                            ua = Ba;" & vbCrLf)
        fsT.Writetext("                            void 0 != y.lineColor && (ua = y.lineColor);" & vbCrLf)
        fsT.Writetext("                            if (!isNaN(X)) {" & vbCrLf)
        fsT.Writetext("                                m || (y.isNegative = X < Pa ? !0 : !1);" & vbCrLf)
        fsT.Writetext("                                y.isNegative && (Ja && (Ia = Ja), void 0 != Da && (ua = Da));" & vbCrLf)
        fsT.Writetext("                                var Mb = f.min," & vbCrLf)
        fsT.Writetext("                                    Nb = f.max;" & vbCrLf)
        fsT.Writetext("                                if (!(X < Mb && ma < Mb || X > Nb && ma > Nb)) {" & vbCrLf)
        fsT.Writetext("                                    var va;" & vbCrLf)
        fsT.Writetext("                                    if (r) {" & vbCrLf)
        fsT.Writetext("                                        " & Chr(34) & "3d" & Chr(34) & " == J ? (P = E - (t / 2 - this.depthCount + 1) * (k + Q) + Q / 2 + O * aa, T = N + H * aa, va = aa) : (P = Math.floor(E - (t / 2 - aa) * (k + Q) + Q / 2), T = N, va = 0);" & vbCrLf)
        fsT.Writetext("                                        M = k;" & vbCrLf)
        fsT.Writetext("                                        ya = F;" & vbCrLf)
        fsT.Writetext("                                        za = P + k / 2;" & vbCrLf)
        fsT.Writetext("                                        isNaN(N) || N > F && !y.isNegative && (ya = N);" & vbCrLf)
        fsT.Writetext("                                        ga = F;" & vbCrLf)
        fsT.Writetext("                                        ha = P + k / 2;" & vbCrLf)
        fsT.Writetext("                                        P + M > q + va * O && (M = q - P + va * O);" & vbCrLf)
        fsT.Writetext("                                        P < va * O && (M += P, P = va * O);" & vbCrLf)
        fsT.Writetext("                                        fa = F - N;" & vbCrLf)
        fsT.Writetext("                                        var ac = T;" & vbCrLf)
        fsT.Writetext("                                        T = d.fitToBounds(T, 0, n);" & vbCrLf)
        fsT.Writetext("                                        fa += ac - T;" & vbCrLf)
        fsT.Writetext("                                        fa = d.fitToBounds(fa, -T, n - T + H * aa);" & vbCrLf)
        fsT.Writetext("                                        P < q && 0 < M && (oa = new d.Cuboid(h, fa, M, H - a.d3x, O - a.d3y, Ia, Sa, Z, ua, V, ia, u, r, ba, $a, kb, na), y.columnWidth = Math.abs(fa), y.columnHeight = Math.abs(M))" & vbCrLf)
        fsT.Writetext("                                    } else {" & vbCrLf)
        fsT.Writetext("                                        " & Chr(34) & "3d" & Chr(34) & " == J ? (T = F - (t / 2 - this.depthCount + 1) * (k + Q) + Q / 2 + H * aa, P = L + O * aa, va = aa) : (T = F - (t / 2 - aa) * (k + Q) + Q / 2, P = L, va = 0);" & vbCrLf)
        fsT.Writetext("                                        M = k;" & vbCrLf)
        fsT.Writetext("                                        ya = T + k / 2;" & vbCrLf)
        fsT.Writetext("                                        za = E;" & vbCrLf)
        fsT.Writetext("                                        isNaN(L) || L < E && !y.isNegative && (za = L);" & vbCrLf)
        fsT.Writetext("                                        ga = T + k / 2;" & vbCrLf)
        fsT.Writetext("                                        ha = E;" & vbCrLf)
        fsT.Writetext("                                        T + M > n + va * H && (M = n - T + va * H);" & vbCrLf)
        fsT.Writetext("                                        T < va * H && (M += T - va * H, T = va * H);" & vbCrLf)
        fsT.Writetext("                                        fa = E - L;" & vbCrLf)
        fsT.Writetext("                                        var bc = P;" & vbCrLf)
        fsT.Writetext("                                        P = d.fitToBounds(P, this.dy," & vbCrLf)
        fsT.Writetext("                                        q);" & vbCrLf)
        fsT.Writetext("                                        fa += bc - P;" & vbCrLf)
        fsT.Writetext("                                        fa = d.fitToBounds(fa, -P + O * aa, q - P);" & vbCrLf)
        fsT.Writetext("                                        T < n + aa * H && 0 < M && (this.showOnAxis && (P -= O / 2), oa = new d.Cuboid(h, M, fa, H - a.d3x, O - a.d3y, Ia, Sa, Z, ua, this.lineAlpha, ia, u, r, ba, $a, kb, na), y.columnHeight = Math.abs(fa), y.columnWidth = Math.abs(M))" & vbCrLf)
        fsT.Writetext("                                    }" & vbCrLf)
        fsT.Writetext("                                }" & vbCrLf)
        fsT.Writetext("                                if (oa && (xa = oa.set, d.setCN(a, oa.set, " & Chr(34) & "graph-" & Chr(34) & " + this.type), d.setCN(a, oa.set, " & Chr(34) & "graph-" & Chr(34) & " + this.id), y.className && d.setCN(a, oa.set, y.className, !0), y.columnGraphics = xa, xa.translate(T, P), this.columnsSet.push(xa), (y.url || this.showHandOnHover) && xa.setAttr(" & Chr(34) & "cursor" & Chr(34) & ", " & Chr(34) & "pointer" & Chr(34) & "), !U)) {" & vbCrLf)
        fsT.Writetext("                                    " & Chr(34) & "none" & Chr(34) & " == J && (I = r ? (this.end + 1 - K) * C - c : C * K + c);" & vbCrLf)
        fsT.Writetext("                                    " & Chr(34) & "3d" & Chr(34) & " == J && (r ? (I = (this.end + 1 - K) * C - c - 1E3 * this.depthCount, ya += H * this.columnIndex, ga += H * this.columnIndex, y.y += H * this.columnIndex) : (I = (C - c) * (K + 1) + 1E3 * this.depthCount, za += O * this.columnIndex, ha += O * this.columnIndex, y.y += O * this.columnIndex));" & vbCrLf)
        fsT.Writetext("                                    if (" & Chr(34) & "regular" & Chr(34) & " == J || " & Chr(34) & "100%" & Chr(34) & " == J) I = r ? 0 < Ca.value ? (this.end + 1 - K) * C + c : (this.end + 1 - K) * C - c : 0 < Ca.value ? C * K + c : C * K - c;" & vbCrLf)
        fsT.Writetext("                                    this.columnsArray.push({" & vbCrLf)
        fsT.Writetext("                                        column: oa," & vbCrLf)
        fsT.Writetext("                                        depth: I" & vbCrLf)
        fsT.Writetext("                                    });" & vbCrLf)
        fsT.Writetext("                                    y.x = r ? P + M / 2 : T + M / 2;" & vbCrLf)
        fsT.Writetext("                                    this.ownColumns.push(oa);" & vbCrLf)
        fsT.Writetext("                                    this.animateColumns(oa, K, F, N, E, L);" & vbCrLf)
        fsT.Writetext("                                    this.addListeners(xa," & vbCrLf)
        fsT.Writetext("                                    y)" & vbCrLf)
        fsT.Writetext("                                }" & vbCrLf)
        fsT.Writetext("                            }" & vbCrLf)
        fsT.Writetext("                            break;" & vbCrLf)
        fsT.Writetext("                        case " & Chr(34) & "candlestick" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                            if (!isNaN(ma) && !isNaN(X)) {" & vbCrLf)
        fsT.Writetext("                                var Ua, ab;" & vbCrLf)
        fsT.Writetext("                                ua = Ba;" & vbCrLf)
        fsT.Writetext("                                void 0 != y.lineColor && (ua = y.lineColor);" & vbCrLf)
        fsT.Writetext("                                if (r) {" & vbCrLf)
        fsT.Writetext("                                    if (P = E - k / 2, T = N, M = k, P + M > q && (M = q - P), 0 > P && (M += P, P = 0), P < q && 0 < M) {" & vbCrLf)
        fsT.Writetext("                                        var zb, Ab;" & vbCrLf)
        fsT.Writetext("                                        X > ma ? (zb = [F, Oa], Ab = [N, Na]) : (zb = [N, Oa], Ab = [F, Na]);" & vbCrLf)
        fsT.Writetext("                                        !isNaN(Oa) && !isNaN(Na) && E < q && 0 < E && (Ua = d.line(h, zb, [E, E], ua, V, Z), ab = d.line(h, Ab, [E, E], ua, V, Z));" & vbCrLf)
        fsT.Writetext("                                        fa = F - N;" & vbCrLf)
        fsT.Writetext("                                        oa = new d.Cuboid(h, fa, M, H, O, Ia, Wa, Z, ua, V, ia, u, r, ba, $a, kb, na)" & vbCrLf)
        fsT.Writetext("                                    }" & vbCrLf)
        fsT.Writetext("                                } else if (T = F - k / 2, P = L + Z / 2, M = k, T + M > n && (M = n - T), 0 > T && (M += T, T = 0), fa = E - L, T < n && 0 < M) {" & vbCrLf)
        fsT.Writetext("                                    xb && X >= ma && (Sa = 0);" & vbCrLf)
        fsT.Writetext("                                    var oa = new d.Cuboid(h," & vbCrLf)
        fsT.Writetext("                                    M, fa, H, O, Ia, Sa, Z, ua, V, ia, u, r, ba, $a, kb, na)," & vbCrLf)
        fsT.Writetext("                                        Bb, Cb;" & vbCrLf)
        fsT.Writetext("                                    X > ma ? (Bb = [E, Fa], Cb = [L, Ea]) : (Bb = [L, Fa], Cb = [E, Ea]);" & vbCrLf)
        fsT.Writetext("                                    !isNaN(Fa) && !isNaN(Ea) && F < n && 0 < F && (Ua = d.line(h, [F, F], Bb, ua, V, Z), ab = d.line(h, [F, F], Cb, ua, V, Z), d.setCN(a, Ua, this.bcn + " & Chr(34) & "line-high" & Chr(34) & "), y.className && d.setCN(a, Ua, y.className, !0), d.setCN(a, ab, this.bcn + " & Chr(34) & "line-low" & Chr(34) & "), y.className && d.setCN(a, ab, y.className, !0))" & vbCrLf)
        fsT.Writetext("                                }" & vbCrLf)
        fsT.Writetext("                                oa && (xa = oa.set, y.columnGraphics = xa, ca.push(xa), xa.translate(T, P - Z / 2), (y.url || this.showHandOnHover) && xa.setAttr(" & Chr(34) & "cursor" & Chr(34) & ", " & Chr(34) & "pointer" & Chr(34) & "), Ua && (ca.push(Ua), ca.push(ab))," & vbCrLf)
        fsT.Writetext("                                ya = F, za = E, r ? (ha = E, ga = F, " & Chr(34) & "open" & Chr(34) & " == l && (ga = N), " & Chr(34) & "high" & Chr(34) & " == l && (ga = Oa), " & Chr(34) & "low" & Chr(34) & " == l && (ga = Na)) : (ha = E, " & Chr(34) & "open" & Chr(34) & " == l && (ha = L), " & Chr(34) & "high" & Chr(34) & " == l && (ha = Fa), " & Chr(34) & "low" & Chr(34) & " == l && (ha = Ea), ga = F), U || (y.x = r ? P + M / 2 : T + M / 2, this.animateColumns(oa, K, F, N, E, L), this.addListeners(xa, y)))" & vbCrLf)
        fsT.Writetext("                            }" & vbCrLf)
        fsT.Writetext("                            break;" & vbCrLf)
        fsT.Writetext("                        case " & Chr(34) & "ohlc" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                            if (!(isNaN(ma) || isNaN(vb) || isNaN(wb) || isNaN(X))) {" & vbCrLf)
        fsT.Writetext("                                var Ob = h.set();" & vbCrLf)
        fsT.Writetext("                                ca.push(Ob);" & vbCrLf)
        fsT.Writetext("                                X < ma && (y.isNegative = !0, void 0 != Da && (Ba = Da));" & vbCrLf)
        fsT.Writetext("                                var mb, nb, ob;" & vbCrLf)
        fsT.Writetext("                                if (r) {" & vbCrLf)
        fsT.Writetext("                                    var Db = E - k / 2," & vbCrLf)
        fsT.Writetext("                                        Db = d.fitToBounds(Db, 0, q)," & vbCrLf)
        fsT.Writetext("                                        Pb = d.fitToBounds(E, 0, q)," & vbCrLf)
        fsT.Writetext("                                        Eb = E + k / 2," & vbCrLf)
        fsT.Writetext("                                        Eb = d.fitToBounds(Eb, 0, q);" & vbCrLf)
        fsT.Writetext("                                    nb = d.line(h, [N, N], [Db," & vbCrLf)
        fsT.Writetext("                                    Pb], Ba, V, Z, ba);" & vbCrLf)
        fsT.Writetext("                                    0 < E && E < q && (mb = d.line(h, [Na, Oa], [E, E], Ba, V, Z, ba));" & vbCrLf)
        fsT.Writetext("                                    ob = d.line(h, [F, F], [Pb, Eb], Ba, V, Z, ba);" & vbCrLf)
        fsT.Writetext("                                    ha = E;" & vbCrLf)
        fsT.Writetext("                                    ga = F;" & vbCrLf)
        fsT.Writetext("                                    " & Chr(34) & "open" & Chr(34) & " == l && (ga = N);" & vbCrLf)
        fsT.Writetext("                                    " & Chr(34) & "high" & Chr(34) & " == l && (ga = Oa);" & vbCrLf)
        fsT.Writetext("                                    " & Chr(34) & "low" & Chr(34) & " == l && (ga = Na)" & vbCrLf)
        fsT.Writetext("                                } else {" & vbCrLf)
        fsT.Writetext("                                    var Fb = F - k / 2," & vbCrLf)
        fsT.Writetext("                                        Fb = d.fitToBounds(Fb, 0, n)," & vbCrLf)
        fsT.Writetext("                                        Qb = d.fitToBounds(F, 0, n)," & vbCrLf)
        fsT.Writetext("                                        Gb = F + k / 2," & vbCrLf)
        fsT.Writetext("                                        Gb = d.fitToBounds(Gb, 0, n);" & vbCrLf)
        fsT.Writetext("                                    nb = d.line(h, [Fb, Qb], [L, L], Ba, V, Z, ba);" & vbCrLf)
        fsT.Writetext("                                    0 < F && F < n && (mb = d.line(h, [F, F], [Ea, Fa], Ba, V, Z, ba));" & vbCrLf)
        fsT.Writetext("                                    ob = d.line(h, [Qb, Gb], [E, E], Ba, V, Z, ba);" & vbCrLf)
        fsT.Writetext("                                    ha = E;" & vbCrLf)
        fsT.Writetext("                                    " & Chr(34) & "open" & Chr(34) & " == l && (ha = L);" & vbCrLf)
        fsT.Writetext("                                    " & Chr(34) & "high" & Chr(34) & " == l && (ha = Fa);" & vbCrLf)
        fsT.Writetext("                                    " & Chr(34) & "low" & Chr(34) & " == l && (ha = Ea);" & vbCrLf)
        fsT.Writetext("                                    ga = F" & vbCrLf)
        fsT.Writetext("                                }" & vbCrLf)
        fsT.Writetext("                                ca.push(nb);" & vbCrLf)
        fsT.Writetext("                                ca.push(mb);" & vbCrLf)
        fsT.Writetext("                                ca.push(ob);" & vbCrLf)
        fsT.Writetext("                                d.setCN(a," & vbCrLf)
        fsT.Writetext("                                nb, this.bcn + " & Chr(34) & "stroke-open" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                                d.setCN(a, ob, this.bcn + " & Chr(34) & "stroke-close" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                                d.setCN(a, mb, this.bcn + " & Chr(34) & "stroke" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                                y.className && d.setCN(a, Ob, y.className, !0);" & vbCrLf)
        fsT.Writetext("                                ya = F;" & vbCrLf)
        fsT.Writetext("                                za = E" & vbCrLf)
        fsT.Writetext("                            }" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                    if (!U && !isNaN(X)) {" & vbCrLf)
        fsT.Writetext("                        var Rb = this.hideBulletsCount;" & vbCrLf)
        fsT.Writetext("                        if (this.end - this.start <= Rb || 0 === Rb) {" & vbCrLf)
        fsT.Writetext("                            var Sb = this.createBullet(y, ga, ha, K)," & vbCrLf)
        fsT.Writetext("                                Tb = this.labelText;" & vbCrLf)
        fsT.Writetext("                            if (Tb && Sb) {" & vbCrLf)
        fsT.Writetext("                                var Hb = this.createLabel(y, ga, ha, Tb);" & vbCrLf)
        fsT.Writetext("                                (Hb = this.positionLabel(ya, za, Hb, Sb, M, fa)) && this.allBullets.push(Hb)" & vbCrLf)
        fsT.Writetext("                            }" & vbCrLf)
        fsT.Writetext("                            if (" & Chr(34) & "regular" & Chr(34) & " == J || " & Chr(34) & "100%" & Chr(34) & " == J) {" & vbCrLf)
        fsT.Writetext("                                var Ub = f.totalText;" & vbCrLf)
        fsT.Writetext("                                if (Ub) {" & vbCrLf)
        fsT.Writetext("                                    var Va = this.createLabel(y, 0, 0, Ub, f.totalTextColor);" & vbCrLf)
        fsT.Writetext("                                    this.allBullets.push(Va);" & vbCrLf)
        fsT.Writetext("                                    var Vb = Va.getBBox()," & vbCrLf)
        fsT.Writetext("                                        Wb = Vb.width," & vbCrLf)
        fsT.Writetext("                                        Xb = Vb.height," & vbCrLf)
        fsT.Writetext("                                        bb, cb, pb = f.totalTextOffset," & vbCrLf)
        fsT.Writetext("                                        Yb = f.totals[K];" & vbCrLf)
        fsT.Writetext("                                    Yb && Yb.remove();" & vbCrLf)
        fsT.Writetext("                                    var db = 0;" & vbCrLf)
        fsT.Writetext("                                    " & Chr(34) & "column" & Chr(34) & " != g && (db = this.bulletSize);" & vbCrLf)
        fsT.Writetext("                                    r ? (cb = E, bb = 0 > X ? F - Wb / 2 - 2 - db - pb : F + Wb / 2 + 3 + db + pb) : (bb = F, cb = 0 > X ? E + Xb / 2 + db + pb : E - Xb / 2 - 3 - db - pb);" & vbCrLf)
        fsT.Writetext("                                    Va.translate(bb, cb);" & vbCrLf)
        fsT.Writetext("                                    f.totals[K] = Va;" & vbCrLf)
        fsT.Writetext("                                    r ? (0 > cb || cb > q) && Va.remove() : (0 > bb || bb > n) && Va.remove()" & vbCrLf)
        fsT.Writetext("                                }" & vbCrLf)
        fsT.Writetext("                            }" & vbCrLf)
        fsT.Writetext("                        }" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            if (" & Chr(34) & "line" & Chr(34) & " == g || " & Chr(34) & "step" & Chr(34) & " == g || " & Chr(34) & "smoothedLine" & Chr(34) & " == g) " & Chr(34) & "smoothedLine" & Chr(34) & " == g ? this.drawSmoothedGraph(v, w, R, S) : this.drawLineGraph(v, w, R, S), U || this.launchAnimation();" & vbCrLf)
        fsT.Writetext("            this.bulletsHidden && this.hideBullets();" & vbCrLf)
        fsT.Writetext("            this.customBulletsHidden && this.hideCustomBullets()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        animateColumns: function (a, b) {" & vbCrLf)
        fsT.Writetext("            var c = this," & vbCrLf)
        fsT.Writetext("                e = c.chart.startDuration;" & vbCrLf)
        fsT.Writetext("            0 < e && !c.animationPlayed && (c.seqAn ? (a.set.hide(), c.animationArray.push(a), e = setTimeout(function () {" & vbCrLf)
        fsT.Writetext("                c.animate.call(c)" & vbCrLf)
        fsT.Writetext("            }, e / (c.end - c.start + 1) * (b - c.start) * 1E3), c.timeOuts.push(e)) : c.animate(a))" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        createLabel: function (a, b, c, e, h) {" & vbCrLf)
        fsT.Writetext("            var f = this.chart," & vbCrLf)
        fsT.Writetext("                g = a.labelColor;" & vbCrLf)
        fsT.Writetext("            g || (g = this.color);" & vbCrLf)
        fsT.Writetext("            g || (g = f.color);" & vbCrLf)
        fsT.Writetext("            h && (g = h);" & vbCrLf)
        fsT.Writetext("            h = this.fontSize;" & vbCrLf)
        fsT.Writetext("            void 0 === h && (this.fontSize = h = f.fontSize);" & vbCrLf)
        fsT.Writetext("            var k = this.labelFunction;" & vbCrLf)
        fsT.Writetext("            e = f.formatString(e, a);" & vbCrLf)
        fsT.Writetext("            e = d.cleanFromEmpty(e);" & vbCrLf)
        fsT.Writetext("            k && (e = k(a, e));" & vbCrLf)
        fsT.Writetext("            a = d.text(this.container, e, g, f.fontFamily, h);" & vbCrLf)
        fsT.Writetext("            a.node.style.pointerEvents = " & Chr(34) & "none" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            a.translate(b, c);" & vbCrLf)
        fsT.Writetext("            this.bulletSet.push(a);" & vbCrLf)
        fsT.Writetext("            return a" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        positiveClip: function (a) {" & vbCrLf)
        fsT.Writetext("            a.clipRect(this.pmx, this.pmy, this.pmw, this.pmh)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        negativeClip: function (a) {" & vbCrLf)
        fsT.Writetext("            a.clipRect(this.nmx, this.nmy, this.nmw, this.nmh)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        drawLineGraph: function (a, b, c, e) {" & vbCrLf)
        fsT.Writetext("            var h = this;" & vbCrLf)
        fsT.Writetext("            if (1 < a.length) {" & vbCrLf)
        fsT.Writetext("                var f = h.set," & vbCrLf)
        fsT.Writetext("                    g = h.chart," & vbCrLf)
        fsT.Writetext("                    k = h.container," & vbCrLf)
        fsT.Writetext("                    l = k.set()," & vbCrLf)
        fsT.Writetext("                    m = k.set();" & vbCrLf)
        fsT.Writetext("                f.push(m);" & vbCrLf)
        fsT.Writetext("                f.push(l);" & vbCrLf)
        fsT.Writetext("                var n = h.lineAlpha," & vbCrLf)
        fsT.Writetext("                    q = h.lineThickness," & vbCrLf)
        fsT.Writetext("                    f = h.fillAlphas," & vbCrLf)
        fsT.Writetext("                    p = h.lineColorR," & vbCrLf)
        fsT.Writetext("                    r = h.negativeLineAlpha;" & vbCrLf)
        fsT.Writetext("                isNaN(r) && (r = n);" & vbCrLf)
        fsT.Writetext("                var t = h.lineColorSwitched;" & vbCrLf)
        fsT.Writetext("                t && (p = t);" & vbCrLf)
        fsT.Writetext("                var t = h.fillColorsR," & vbCrLf)
        fsT.Writetext("                    u = h.fillColorsSwitched;" & vbCrLf)
        fsT.Writetext("                u && (t = u);" & vbCrLf)
        fsT.Writetext("                var z = h.dashLength;" & vbCrLf)
        fsT.Writetext("                (u = h.dashLengthSwitched) && (z = u);" & vbCrLf)
        fsT.Writetext("                var u = h.negativeLineColor," & vbCrLf)
        fsT.Writetext("                    v = h.negativeFillColors," & vbCrLf)
        fsT.Writetext("                    w = h.negativeFillAlphas," & vbCrLf)
        fsT.Writetext("                    x = h.baseCoord;" & vbCrLf)
        fsT.Writetext("                0 !== h.negativeBase && (x = h.valueAxis.getCoordinate(h.negativeBase), x > h.height && (x = h.height), 0 > x && (x = 0));" & vbCrLf)
        fsT.Writetext("                n = d.line(k, a, b, p, n, q, z, !1, !0);" & vbCrLf)
        fsT.Writetext("                d.setCN(g, n, h.bcn + " & Chr(34) & "stroke" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                l.push(n);" & vbCrLf)
        fsT.Writetext("                l.click(function (a) {" & vbCrLf)
        fsT.Writetext("                    h.handleGraphEvent(a," & vbCrLf)
        fsT.Writetext("                        " & Chr(34) & "clickGraph" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("                }).mouseover(function (a) {" & vbCrLf)
        fsT.Writetext("                    h.handleGraphEvent(a, " & Chr(34) & "rollOverGraph" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("                }).mouseout(function (a) {" & vbCrLf)
        fsT.Writetext("                    h.handleGraphEvent(a, " & Chr(34) & "rollOutGraph" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("                });" & vbCrLf)
        fsT.Writetext("                void 0 === u || h.useNegativeColorIfDown || (q = d.line(k, a, b, u, r, q, z, !1, !0), d.setCN(g, q, h.bcn + " & Chr(34) & "stroke" & Chr(34) & "), d.setCN(g, q, h.bcn + " & Chr(34) & "stroke-negative" & Chr(34) & "), m.push(q));" & vbCrLf)
        fsT.Writetext("                if (0 < f || 0 < w) if (q = a.join(" & Chr(34) & ";" & Chr(34) & ").split(" & Chr(34) & ";" & Chr(34) & "), r = b.join(" & Chr(34) & ";" & Chr(34) & ").split(" & Chr(34) & ";" & Chr(34) & "), n = g.type, " & Chr(34) & "serial" & Chr(34) & " == n ? 0 < c.length ? (c.reverse(), e.reverse(), q = a.concat(c), r = b.concat(e)) : h.rotate ? (r.push(r[r.length - 1]), q.push(x), r.push(r[0]), q.push(x), r.push(r[0])," & vbCrLf)
        fsT.Writetext("                q.push(q[0])) : (q.push(q[q.length - 1]), r.push(x), q.push(q[0]), r.push(x), q.push(a[0]), r.push(r[0])) : " & Chr(34) & "xy" & Chr(34) & " == n && (b = h.fillToAxis) && (d.isString(b) && (b = g.getValueAxisById(b)), " & Chr(34) & "H" & Chr(34) & " == b.orientation ? (x = " & Chr(34) & "top" & Chr(34) & " == b.position ? 0 : b.viH, q.push(q[q.length - 1]), r.push(x), q.push(q[0]), r.push(x), q.push(a[0]), r.push(r[0])) : (x = " & Chr(34) & "left" & Chr(34) & " == b.position ? 0 : b.viW, r.push(r[r.length - 1]), q.push(x), r.push(r[0]), q.push(x), r.push(r[0]), q.push(q[0]))), a = h.gradientRotation, 0 < f && (b = d.polygon(k, q, r, t, f, 1, " & Chr(34) & "#000" & Chr(34) & ", 0, a), b.pattern(h.pattern, NaN, g.path)," & vbCrLf)
        fsT.Writetext("                d.setCN(g, b, h.bcn + " & Chr(34) & "fill" & Chr(34) & "), l.push(b)), v || void 0 !== u) isNaN(w) && (w = f), v || (v = u), k = d.polygon(k, q, r, v, w, 1, " & Chr(34) & "#000" & Chr(34) & ", 0, a), d.setCN(g, k, h.bcn + " & Chr(34) & "fill" & Chr(34) & "), d.setCN(g, k, h.bcn + " & Chr(34) & "fill-negative" & Chr(34) & "), k.pattern(h.pattern, NaN, g.path), m.push(k), m.click(function (a) {" & vbCrLf)
        fsT.Writetext("                    h.handleGraphEvent(a, " & Chr(34) & "clickGraph" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("                }).mouseover(function (a) {" & vbCrLf)
        fsT.Writetext("                    h.handleGraphEvent(a, " & Chr(34) & "rollOverGraph" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("                }).mouseout(function (a) {" & vbCrLf)
        fsT.Writetext("                    h.handleGraphEvent(a, " & Chr(34) & "rollOutGraph" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("                });" & vbCrLf)
        fsT.Writetext("                h.applyMask(m, l)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        applyMask: function (a, b) {" & vbCrLf)
        fsT.Writetext("            var c = a.length();" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "serial" & Chr(34) & " != this.chart.type || this.scrollbar || (this.positiveClip(b)," & vbCrLf)
        fsT.Writetext("            0 < c && this.negativeClip(a))" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        drawSmoothedGraph: function (a, b, c, e) {" & vbCrLf)
        fsT.Writetext("            if (1 < a.length) {" & vbCrLf)
        fsT.Writetext("                var h = this.set," & vbCrLf)
        fsT.Writetext("                    f = this.chart," & vbCrLf)
        fsT.Writetext("                    g = this.container," & vbCrLf)
        fsT.Writetext("                    k = g.set()," & vbCrLf)
        fsT.Writetext("                    l = g.set();" & vbCrLf)
        fsT.Writetext("                h.push(l);" & vbCrLf)
        fsT.Writetext("                h.push(k);" & vbCrLf)
        fsT.Writetext("                var m = this.lineAlpha," & vbCrLf)
        fsT.Writetext("                    n = this.lineThickness," & vbCrLf)
        fsT.Writetext("                    h = this.dashLength," & vbCrLf)
        fsT.Writetext("                    q = this.fillAlphas," & vbCrLf)
        fsT.Writetext("                    p = this.lineColorR," & vbCrLf)
        fsT.Writetext("                    r = this.fillColorsR," & vbCrLf)
        fsT.Writetext("                    t = this.negativeLineColor," & vbCrLf)
        fsT.Writetext("                    u = this.negativeFillColors," & vbCrLf)
        fsT.Writetext("                    z = this.negativeFillAlphas," & vbCrLf)
        fsT.Writetext("                    v = this.baseCoord," & vbCrLf)
        fsT.Writetext("                    w = this.lineColorSwitched;" & vbCrLf)
        fsT.Writetext("                w && (p = w);" & vbCrLf)
        fsT.Writetext("                (w = this.fillColorsSwitched) && (r = w);" & vbCrLf)
        fsT.Writetext("                w = this.negativeLineAlpha;" & vbCrLf)
        fsT.Writetext("                isNaN(w) && (w = m);" & vbCrLf)
        fsT.Writetext("                m = new d.Bezier(g, a," & vbCrLf)
        fsT.Writetext("                b, p, m, n, r, 0, h);" & vbCrLf)
        fsT.Writetext("                d.setCN(f, m, this.bcn + " & Chr(34) & "stroke" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                k.push(m.path);" & vbCrLf)
        fsT.Writetext("                void 0 !== t && (n = new d.Bezier(g, a, b, t, w, n, r, 0, h), d.setCN(f, n, this.bcn + " & Chr(34) & "stroke" & Chr(34) & "), d.setCN(f, n, this.bcn + " & Chr(34) & "stroke-negative" & Chr(34) & "), l.push(n.path));" & vbCrLf)
        fsT.Writetext("                0 < q && (m = a.join(" & Chr(34) & ";" & Chr(34) & ").split(" & Chr(34) & ";" & Chr(34) & "), p = b.join(" & Chr(34) & ";" & Chr(34) & ").split(" & Chr(34) & ";" & Chr(34) & "), n = " & Chr(34) & "" & Chr(34) & ", 0 < c.length ? (c.push(" & Chr(34) & "M" & Chr(34) & "), e.push(" & Chr(34) & "M" & Chr(34) & "), c.reverse(), e.reverse(), m = a.concat(c), p = b.concat(e)) : (this.rotate ? (n += " & Chr(34) & " L" & Chr(34) & " + v + " & Chr(34) & "," & Chr(34) & " + b[b.length - 1], n += " & Chr(34) & " L" & Chr(34) & " + v + " & Chr(34) & "," & Chr(34) & " + b[0]) : (n += " & Chr(34) & " L" & Chr(34) & " + a[a.length - 1] + " & Chr(34) & "," & Chr(34) & " + v, n += " & Chr(34) & " L" & Chr(34) & " + a[0] + " & Chr(34) & "," & Chr(34) & " + v), n += " & Chr(34) & " L" & Chr(34) & " + a[0] + " & Chr(34) & "," & Chr(34) & " + b[0]), c = new d.Bezier(g, m, p, NaN," & vbCrLf)
        fsT.Writetext("                0, 0, r, q, h, n), d.setCN(f, c, this.bcn + " & Chr(34) & "fill" & Chr(34) & "), c.path.pattern(this.pattern, NaN, f.path), k.push(c.path), u || void 0 !== t) && (z || (z = q), u || (u = t), a = new d.Bezier(g, a, b, NaN, 0, 0, u, z, h, n), a.path.pattern(this.pattern, NaN, f.path), d.setCN(f, a, this.bcn + " & Chr(34) & "fill" & Chr(34) & "), d.setCN(f, a, this.bcn + " & Chr(34) & "fill-negative" & Chr(34) & "), l.push(a.path));" & vbCrLf)
        fsT.Writetext("                this.applyMask(l, k)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        launchAnimation: function () {" & vbCrLf)
        fsT.Writetext("            var a = this," & vbCrLf)
        fsT.Writetext("                b = a.chart.startDuration;" & vbCrLf)
        fsT.Writetext("            if (0 < b && !a.animationPlayed) {" & vbCrLf)
        fsT.Writetext("                var c = a.set," & vbCrLf)
        fsT.Writetext("                    e = a.bulletSet;" & vbCrLf)
        fsT.Writetext("                d.VML || (c.attr({" & vbCrLf)
        fsT.Writetext("                    opacity: a.startAlpha" & vbCrLf)
        fsT.Writetext("                }), e.attr({" & vbCrLf)
        fsT.Writetext("                    opacity: a.startAlpha" & vbCrLf)
        fsT.Writetext("                }));" & vbCrLf)
        fsT.Writetext("                c.hide();" & vbCrLf)
        fsT.Writetext("                e.hide();" & vbCrLf)
        fsT.Writetext("                a.seqAn ? (b = setTimeout(function () {" & vbCrLf)
        fsT.Writetext("                    a.animateGraphs.call(a)" & vbCrLf)
        fsT.Writetext("                }, a.index * b * 1E3), a.timeOuts.push(b)) : a.animateGraphs()" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        animateGraphs: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.chart," & vbCrLf)
        fsT.Writetext("                b = this.set," & vbCrLf)
        fsT.Writetext("                c = this.bulletSet," & vbCrLf)
        fsT.Writetext("                e = this.x," & vbCrLf)
        fsT.Writetext("                d = this.y;" & vbCrLf)
        fsT.Writetext("            b.show();" & vbCrLf)
        fsT.Writetext("            c.show();" & vbCrLf)
        fsT.Writetext("            var f = a.startDuration," & vbCrLf)
        fsT.Writetext("                a = a.startEffect;" & vbCrLf)
        fsT.Writetext("            b && (this.rotate ? (b.translate(-1E3, d), c.translate(-1E3, d)) : (b.translate(e, -1E3), c.translate(e, -1E3)), b.animate({" & vbCrLf)
        fsT.Writetext("                opacity: 1," & vbCrLf)
        fsT.Writetext("                translate: e + " & Chr(34) & "," & Chr(34) & " + d" & vbCrLf)
        fsT.Writetext("            }, f, a), c.animate({" & vbCrLf)
        fsT.Writetext("                opacity: 1," & vbCrLf)
        fsT.Writetext("                translate: e + " & Chr(34) & "," & Chr(34) & " + d" & vbCrLf)
        fsT.Writetext("            }, f, a))" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        animate: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = this.chart," & vbCrLf)
        fsT.Writetext("                c = this.animationArray;" & vbCrLf)
        fsT.Writetext("            !a && 0 < c.length && (a = c[0], c.shift());" & vbCrLf)
        fsT.Writetext("            c = d[d.getEffect(b.startEffect)];" & vbCrLf)
        fsT.Writetext("            b = b.startDuration;" & vbCrLf)
        fsT.Writetext("            a && (this.rotate ? a.animateWidth(b, c) : a.animateHeight(b, c), a.set.show())" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        legendKeyColor: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.legendColor," & vbCrLf)
        fsT.Writetext("                b = this.lineAlpha;" & vbCrLf)
        fsT.Writetext("            void 0 === a && (a = this.lineColorR, 0 === b && (b = this.fillColorsR) && (a = " & Chr(34) & "object" & Chr(34) & " == typeof b ? b[0] : b));" & vbCrLf)
        fsT.Writetext("            return a" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        legendKeyAlpha: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.legendAlpha;" & vbCrLf)
        fsT.Writetext("            void 0 === a && (a = this.lineAlpha, this.fillAlphas > a && (a = this.fillAlphas), 0 === a && (a = this.bulletAlpha), 0 === a && (a = 1));" & vbCrLf)
        fsT.Writetext("            return a" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        createBullet: function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            if (!isNaN(b) && !isNaN(c)) {" & vbCrLf)
        fsT.Writetext("                var e = this.chart," & vbCrLf)
        fsT.Writetext("                    h = this.container," & vbCrLf)
        fsT.Writetext("                    f = this.bulletOffset," & vbCrLf)
        fsT.Writetext("                    g = this.bulletSize;" & vbCrLf)
        fsT.Writetext("                isNaN(a.bulletSize) || (g = a.bulletSize);" & vbCrLf)
        fsT.Writetext("                var k = a.values.value," & vbCrLf)
        fsT.Writetext("                    l = this.maxValue," & vbCrLf)
        fsT.Writetext("                    m = this.minValue," & vbCrLf)
        fsT.Writetext("                    n = this.maxBulletSize," & vbCrLf)
        fsT.Writetext("                    q = this.minBulletSize;" & vbCrLf)
        fsT.Writetext("                isNaN(l) || (isNaN(k) || (g = (k - m) / (l - m) * (n - q) + q), m == l && (g = n));" & vbCrLf)
        fsT.Writetext("                l = g;" & vbCrLf)
        fsT.Writetext("                this.bulletAxis && (g = a.values.error, isNaN(g) || (k = g), g = this.bulletAxis.stepWidth * k);" & vbCrLf)
        fsT.Writetext("                g < this.minBulletSize && (g = this.minBulletSize);" & vbCrLf)
        fsT.Writetext("                this.rotate ? b = a.isNegative ? b - f : b + f : c = a.isNegative ? c + f : c - f;" & vbCrLf)
        fsT.Writetext("                var p, q = this.bulletColorR;" & vbCrLf)
        fsT.Writetext("                a.lineColor && (this.bulletColorSwitched = a.lineColor);" & vbCrLf)
        fsT.Writetext("                this.bulletColorSwitched && (q = this.bulletColorSwitched);" & vbCrLf)
        fsT.Writetext("                a.isNegative && void 0 !== this.bulletColorNegative && (q = this.bulletColorNegative);" & vbCrLf)
        fsT.Writetext("                void 0 !== a.color && (q = a.color);" & vbCrLf)
        fsT.Writetext("                var r;" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "xy" & Chr(34) & " == e.type && this.valueField && (r = this.pattern, a.pattern && (r = a.pattern));" & vbCrLf)
        fsT.Writetext("                f = this.bullet;" & vbCrLf)
        fsT.Writetext("                a.bullet && (f = a.bullet);" & vbCrLf)
        fsT.Writetext("                var k = this.bulletBorderThickness," & vbCrLf)
        fsT.Writetext("                    m = this.bulletBorderColorR," & vbCrLf)
        fsT.Writetext("                    n = this.bulletBorderAlpha," & vbCrLf)
        fsT.Writetext("                    t = this.bulletAlpha;" & vbCrLf)
        fsT.Writetext("                m || (m = q);" & vbCrLf)
        fsT.Writetext("                this.useLineColorForBulletBorder && (m = this.lineColorR);" & vbCrLf)
        fsT.Writetext("                var u = a.alpha;" & vbCrLf)
        fsT.Writetext("                isNaN(u) || (t = u);" & vbCrLf)
        fsT.Writetext("                if (" & Chr(34) & "none" & Chr(34) & " != this.bullet || a.bullet) p = d.bullet(h, f, g, q, t, k, m, n, l, 0, r, e.path);" & vbCrLf)
        fsT.Writetext("                if (this.customBullet || a.customBullet) r = this.customBullet, a.customBullet && (r = a.customBullet), r && (p && p.remove(), " & Chr(34) & "function" & Chr(34) & " == typeof r ? (p = new r, p.chart = e, a.bulletConfig && (p.availableSpace = c, p.graph = this, p.graphDataItem = a, p.bulletY = c, a.bulletConfig.minCoord = this.minCoord - c, p.bulletConfig = a.bulletConfig), p.write(h), p = p.set) : (p = h.set(), h = h.image(r, 0, 0, g, g), p.push(h), this.centerCustomBullets && h.translate(-g / 2, -g / 2)));" & vbCrLf)
        fsT.Writetext("                if (p) {" & vbCrLf)
        fsT.Writetext("                    (a.url || this.showHandOnHover) && p.setAttr(" & Chr(34) & "cursor" & Chr(34) & ", " & Chr(34) & "pointer" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                    if (" & Chr(34) & "serial" & Chr(34) & " == e.type || " & Chr(34) & "gantt" & Chr(34) & " == e.type) if (-.5 > b - 0 || b - 0 > this.width || c < -g / 2 || c - 0 > this.height) p.remove(), p = null;" & vbCrLf)
        fsT.Writetext("                    p && (this.bulletSet.push(p), p.translate(b, c), this.addListeners(p, a), this.allBullets.push(p));" & vbCrLf)
        fsT.Writetext("                    a.bx = b;" & vbCrLf)
        fsT.Writetext("                    a.by = c;" & vbCrLf)
        fsT.Writetext("                    d.setCN(e, p, this.bcn + " & Chr(34) & "bullet" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                    a.className && d.setCN(e, p, a.className, !0)" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("                p ? (p.size = g || 0, a.bulletGraphics = p) : p = {" & vbCrLf)
        fsT.Writetext("                    size: 0" & vbCrLf)
        fsT.Writetext("                };" & vbCrLf)
        fsT.Writetext("                p.graphDataItem = a;" & vbCrLf)
        fsT.Writetext("                return p" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        showBullets: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.allBullets," & vbCrLf)
        fsT.Writetext("                b;" & vbCrLf)
        fsT.Writetext("            this.bulletsHidden = !1;" & vbCrLf)
        fsT.Writetext("            for (b = 0; b < a.length; b++) a[b].show()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        hideBullets: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.allBullets," & vbCrLf)
        fsT.Writetext("                b;" & vbCrLf)
        fsT.Writetext("            this.bulletsHidden = !0;" & vbCrLf)
        fsT.Writetext("            for (b = 0; b < a.length; b++) a[b].hide()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        showCustomBullets: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.allBullets," & vbCrLf)
        fsT.Writetext("                b;" & vbCrLf)
        fsT.Writetext("            this.customBulletsHidden = !1;" & vbCrLf)
        fsT.Writetext("            for (b = 0; b < a.length; b++) a[b].graphDataItem.customBullet && a[b].show()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        hideCustomBullets: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.allBullets," & vbCrLf)
        fsT.Writetext("                b;" & vbCrLf)
        fsT.Writetext("            this.customBulletsHidden = !0;" & vbCrLf)
        fsT.Writetext("            for (b = 0; b < a.length; b++) a[b].graphDataItem.customBullet && a[b].hide()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        addListeners: function (a, b) {" & vbCrLf)
        fsT.Writetext("            var c = this;" & vbCrLf)
        fsT.Writetext("            a.mouseover(function (a) {" & vbCrLf)
        fsT.Writetext("                c.handleRollOver(b," & vbCrLf)
        fsT.Writetext("                a)" & vbCrLf)
        fsT.Writetext("            }).mouseout(function (a) {" & vbCrLf)
        fsT.Writetext("                c.handleRollOut(b, a)" & vbCrLf)
        fsT.Writetext("            }).touchend(function (a) {" & vbCrLf)
        fsT.Writetext("                c.handleRollOver(b, a);" & vbCrLf)
        fsT.Writetext("                c.chart.panEventsEnabled && c.handleClick(b, a)" & vbCrLf)
        fsT.Writetext("            }).touchstart(function (a) {" & vbCrLf)
        fsT.Writetext("                c.handleRollOver(b, a)" & vbCrLf)
        fsT.Writetext("            }).click(function (a) {" & vbCrLf)
        fsT.Writetext("                c.handleClick(b, a)" & vbCrLf)
        fsT.Writetext("            }).dblclick(function (a) {" & vbCrLf)
        fsT.Writetext("                c.handleDoubleClick(b, a)" & vbCrLf)
        fsT.Writetext("            }).contextmenu(function (a) {" & vbCrLf)
        fsT.Writetext("                c.handleRightClick(b, a)" & vbCrLf)
        fsT.Writetext("            })" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleRollOver: function (a, b) {" & vbCrLf)
        fsT.Writetext("            if (a) {" & vbCrLf)
        fsT.Writetext("                var c = this.chart," & vbCrLf)
        fsT.Writetext("                    e = {" & vbCrLf)
        fsT.Writetext("                        type: " & Chr(34) & "rollOverGraphItem" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                        item: a," & vbCrLf)
        fsT.Writetext("                        index: a.index," & vbCrLf)
        fsT.Writetext("                        graph: this," & vbCrLf)
        fsT.Writetext("                        target: this," & vbCrLf)
        fsT.Writetext("                        chart: this.chart," & vbCrLf)
        fsT.Writetext("                        event: b" & vbCrLf)
        fsT.Writetext("                    };" & vbCrLf)
        fsT.Writetext("                this.fire(" & Chr(34) & "rollOverGraphItem" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                e);" & vbCrLf)
        fsT.Writetext("                c.fire(" & Chr(34) & "rollOverGraphItem" & Chr(34) & ", e);" & vbCrLf)
        fsT.Writetext("                clearTimeout(c.hoverInt);" & vbCrLf)
        fsT.Writetext("                e = this.showBalloon;" & vbCrLf)
        fsT.Writetext("                !c.chartCursor || " & Chr(34) & "serial" & Chr(34) & " != c.type && " & Chr(34) & "gantt" & Chr(34) & " != c.type || (e = !1, !c.chartCursor.valueBalloonsEnabled && this.showBalloon && (e = !0));" & vbCrLf)
        fsT.Writetext("                if (e) {" & vbCrLf)
        fsT.Writetext("                    var e = c.formatString(this.balloonText, a, !0)," & vbCrLf)
        fsT.Writetext("                        h = this.balloonFunction;" & vbCrLf)
        fsT.Writetext("                    h && (e = h(a, a.graph));" & vbCrLf)
        fsT.Writetext("                    e = d.cleanFromEmpty(e);" & vbCrLf)
        fsT.Writetext("                    h = c.getBalloonColor(this, a);" & vbCrLf)
        fsT.Writetext("                    c.balloon.showBullet = !1;" & vbCrLf)
        fsT.Writetext("                    c.balloon.pointerOrientation = " & Chr(34) & "V" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                    var f = a.x," & vbCrLf)
        fsT.Writetext("                        g = a.y;" & vbCrLf)
        fsT.Writetext("                    c.rotate && (f = a.y, g = a.x);" & vbCrLf)
        fsT.Writetext("                    " & Chr(34) & "" & Chr(34) & " !== e ? c.showBalloon(e, h, !0, f + c.marginLeftReal, g + c.marginTopReal) : this.chart.hideBalloonReal()" & vbCrLf)
        fsT.Writetext("                } else this.chart.hideBalloonReal()" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            this.handleGraphEvent(b, " & Chr(34) & "rollOverGraph" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleRollOut: function (a, b) {" & vbCrLf)
        fsT.Writetext("            this.chart.hideBalloon();" & vbCrLf)
        fsT.Writetext("            if (a) {" & vbCrLf)
        fsT.Writetext("                var c = {" & vbCrLf)
        fsT.Writetext("                    type: " & Chr(34) & "rollOutGraphItem" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                    item: a," & vbCrLf)
        fsT.Writetext("                    index: a.index," & vbCrLf)
        fsT.Writetext("                    graph: this," & vbCrLf)
        fsT.Writetext("                    target: this," & vbCrLf)
        fsT.Writetext("                    chart: this.chart," & vbCrLf)
        fsT.Writetext("                    event: b" & vbCrLf)
        fsT.Writetext("                };" & vbCrLf)
        fsT.Writetext("                this.fire(" & Chr(34) & "rollOutGraphItem" & Chr(34) & ", c);" & vbCrLf)
        fsT.Writetext("                this.chart.fire(" & Chr(34) & "rollOutGraphItem" & Chr(34) & ", c)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            this.handleGraphEvent(b, " & Chr(34) & "rollOutGraph" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleClick: function (a, b) {" & vbCrLf)
        fsT.Writetext("            if (a) {" & vbCrLf)
        fsT.Writetext("                var c = {" & vbCrLf)
        fsT.Writetext("                    type: " & Chr(34) & "clickGraphItem" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                    item: a," & vbCrLf)
        fsT.Writetext("                    index: a.index," & vbCrLf)
        fsT.Writetext("                    graph: this," & vbCrLf)
        fsT.Writetext("                    target: this," & vbCrLf)
        fsT.Writetext("                    chart: this.chart," & vbCrLf)
        fsT.Writetext("                    event: b" & vbCrLf)
        fsT.Writetext("                };" & vbCrLf)
        fsT.Writetext("                this.fire(" & Chr(34) & "clickGraphItem" & Chr(34) & ", c);" & vbCrLf)
        fsT.Writetext("                this.chart.fire(" & Chr(34) & "clickGraphItem" & Chr(34) & ", c);" & vbCrLf)
        fsT.Writetext("                d.getURL(a.url, this.urlTarget)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            this.handleGraphEvent(b, " & Chr(34) & "clickGraph" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleGraphEvent: function (a, b) {" & vbCrLf)
        fsT.Writetext("            var c = {" & vbCrLf)
        fsT.Writetext("                type: b," & vbCrLf)
        fsT.Writetext("                graph: this," & vbCrLf)
        fsT.Writetext("                target: this," & vbCrLf)
        fsT.Writetext("                chart: this.chart," & vbCrLf)
        fsT.Writetext("                event: a" & vbCrLf)
        fsT.Writetext("            };" & vbCrLf)
        fsT.Writetext("            this.fire(b, c);" & vbCrLf)
        fsT.Writetext("            this.chart.fire(b, c)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleRightClick: function (a, b) {" & vbCrLf)
        fsT.Writetext("            if (a) {" & vbCrLf)
        fsT.Writetext("                var c = {" & vbCrLf)
        fsT.Writetext("                    type: " & Chr(34) & "rightClickGraphItem" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                    item: a," & vbCrLf)
        fsT.Writetext("                    index: a.index," & vbCrLf)
        fsT.Writetext("                    graph: this," & vbCrLf)
        fsT.Writetext("                    target: this," & vbCrLf)
        fsT.Writetext("                    chart: this.chart," & vbCrLf)
        fsT.Writetext("                    event: b" & vbCrLf)
        fsT.Writetext("                };" & vbCrLf)
        fsT.Writetext("                this.fire(" & Chr(34) & "rightClickGraphItem" & Chr(34) & ", c);" & vbCrLf)
        fsT.Writetext("                this.chart.fire(" & Chr(34) & "rightClickGraphItem" & Chr(34) & ", c)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleDoubleClick: function (a," & vbCrLf)
        fsT.Writetext("        b) {" & vbCrLf)
        fsT.Writetext("            if (a) {" & vbCrLf)
        fsT.Writetext("                var c = {" & vbCrLf)
        fsT.Writetext("                    type: " & Chr(34) & "doubleClickGraphItem" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                    item: a," & vbCrLf)
        fsT.Writetext("                    index: a.index," & vbCrLf)
        fsT.Writetext("                    graph: this," & vbCrLf)
        fsT.Writetext("                    target: this," & vbCrLf)
        fsT.Writetext("                    chart: this.chart," & vbCrLf)
        fsT.Writetext("                    event: b" & vbCrLf)
        fsT.Writetext("                };" & vbCrLf)
        fsT.Writetext("                this.fire(" & Chr(34) & "doubleClickGraphItem" & Chr(34) & ", c);" & vbCrLf)
        fsT.Writetext("                this.chart.fire(" & Chr(34) & "doubleClickGraphItem" & Chr(34) & ", c)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        zoom: function (a, b) {" & vbCrLf)
        fsT.Writetext("            this.start = a;" & vbCrLf)
        fsT.Writetext("            this.end = b;" & vbCrLf)
        fsT.Writetext("            this.draw()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        changeOpacity: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = this.set;" & vbCrLf)
        fsT.Writetext("            b && b.setAttr(" & Chr(34) & "opacity" & Chr(34) & ", a);" & vbCrLf)
        fsT.Writetext("            if (b = this.ownColumns) {" & vbCrLf)
        fsT.Writetext("                var c;" & vbCrLf)
        fsT.Writetext("                for (c = 0; c < b.length; c++) {" & vbCrLf)
        fsT.Writetext("                    var e = b[c].set;" & vbCrLf)
        fsT.Writetext("                    e && e.setAttr(" & Chr(34) & "opacity" & Chr(34) & ", a)" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }(b = this.bulletSet) && b.setAttr(" & Chr(34) & "opacity" & Chr(34) & ", a)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        destroy: function () {" & vbCrLf)
        fsT.Writetext("            d.remove(this.set);" & vbCrLf)
        fsT.Writetext("            d.remove(this.bulletSet);" & vbCrLf)
        fsT.Writetext("            var a = this.timeOuts;" & vbCrLf)
        fsT.Writetext("            if (a) {" & vbCrLf)
        fsT.Writetext("                var b;" & vbCrLf)
        fsT.Writetext("                for (b = 0; b < a.length; b++) clearTimeout(a[b])" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            this.timeOuts = []" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    })" & vbCrLf)
        fsT.Writetext("})();" & vbCrLf)
        fsT.Writetext("(function () {" & vbCrLf)
        fsT.Writetext("    var d = window.AmCharts;" & vbCrLf)
        fsT.Writetext("    d.ChartCursor = d.Class({" & vbCrLf)
        fsT.Writetext("        construct: function (a) {" & vbCrLf)
        fsT.Writetext("            this.cname = " & Chr(34) & "ChartCursor" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.createEvents(" & Chr(34) & "changed" & Chr(34) & ", " & Chr(34) & "zoomed" & Chr(34) & ", " & Chr(34) & "onHideCursor" & Chr(34) & ", " & Chr(34) & "draw" & Chr(34) & ", " & Chr(34) & "selected" & Chr(34) & ", " & Chr(34) & "moved" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            this.enabled = !0;" & vbCrLf)
        fsT.Writetext("            this.cursorAlpha = 1;" & vbCrLf)
        fsT.Writetext("            this.selectionAlpha = .2;" & vbCrLf)
        fsT.Writetext("            this.cursorColor = " & Chr(34) & "#CC0000" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.categoryBalloonAlpha = 1;" & vbCrLf)
        fsT.Writetext("            this.color = " & Chr(34) & "#FFFFFF" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.type = " & Chr(34) & "cursor" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.zoomed = !1;" & vbCrLf)
        fsT.Writetext("            this.zoomable = !0;" & vbCrLf)
        fsT.Writetext("            this.pan = !1;" & vbCrLf)
        fsT.Writetext("            this.categoryBalloonDateFormat = " & Chr(34) & "MMM DD, YYYY" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.categoryBalloonEnabled = this.valueBalloonsEnabled = !0;" & vbCrLf)
        fsT.Writetext("            this.rolledOver = !1;" & vbCrLf)
        fsT.Writetext("            this.cursorPosition = " & Chr(34) & "middle" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.bulletsEnabled = this.skipZoomDispatch = !1;" & vbCrLf)
        fsT.Writetext("            this.bulletSize = 8;" & vbCrLf)
        fsT.Writetext("            this.selectWithoutZooming = this.oneBalloonOnly = !1;" & vbCrLf)
        fsT.Writetext("            this.graphBulletSize = 1.7;" & vbCrLf)
        fsT.Writetext("            this.animationDuration = .3;" & vbCrLf)
        fsT.Writetext("            this.zooming = !1;" & vbCrLf)
        fsT.Writetext("            this.adjustment = 0;" & vbCrLf)
        fsT.Writetext("            this.avoidBalloonOverlapping = !0;" & vbCrLf)
        fsT.Writetext("            this.leaveCursor = !1;" & vbCrLf)
        fsT.Writetext("            d.applyTheme(this, a, this.cname)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        draw: function () {" & vbCrLf)
        fsT.Writetext("            this.destroy();" & vbCrLf)
        fsT.Writetext("            var a = this.chart," & vbCrLf)
        fsT.Writetext("                b = a.container;" & vbCrLf)
        fsT.Writetext("            this.rotate = a.rotate;" & vbCrLf)
        fsT.Writetext("            this.container = b;" & vbCrLf)
        fsT.Writetext("            b = b.set();" & vbCrLf)
        fsT.Writetext("            b.translate(this.x, this.y);" & vbCrLf)
        fsT.Writetext("            this.set = b;" & vbCrLf)
        fsT.Writetext("            a.cursorSet.push(b);" & vbCrLf)
        fsT.Writetext("            b = new d.AmBalloon;" & vbCrLf)
        fsT.Writetext("            b.className =" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "category" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            b.chart = a;" & vbCrLf)
        fsT.Writetext("            this.categoryBalloon = b;" & vbCrLf)
        fsT.Writetext("            d.copyProperties(a.balloon, b);" & vbCrLf)
        fsT.Writetext("            b.cornerRadius = 0;" & vbCrLf)
        fsT.Writetext("            b.shadowAlpha = 0;" & vbCrLf)
        fsT.Writetext("            b.borderThickness = 1;" & vbCrLf)
        fsT.Writetext("            b.borderAlpha = 1;" & vbCrLf)
        fsT.Writetext("            b.showBullet = !1;" & vbCrLf)
        fsT.Writetext("            var c = this.categoryBalloonColor;" & vbCrLf)
        fsT.Writetext("            void 0 === c && (c = this.cursorColor);" & vbCrLf)
        fsT.Writetext("            b.fillColor = c;" & vbCrLf)
        fsT.Writetext("            b.balloonColor = c;" & vbCrLf)
        fsT.Writetext("            b.fillAlpha = this.categoryBalloonAlpha;" & vbCrLf)
        fsT.Writetext("            b.borderColor = c;" & vbCrLf)
        fsT.Writetext("            b.color = this.color;" & vbCrLf)
        fsT.Writetext("            c = this.valueLineAxis;" & vbCrLf)
        fsT.Writetext("            d.isString(c) && (c = a.getValueAxisById(c));" & vbCrLf)
        fsT.Writetext("            c || (c = a.valueAxes[0]);" & vbCrLf)
        fsT.Writetext("            this.valueLineAxis = c;" & vbCrLf)
        fsT.Writetext("            this.valueLineBalloonEnabled && (this.vaBalloon = c = new d.AmBalloon, d.copyProperties(b," & vbCrLf)
        fsT.Writetext("            c), c.animationDuration = 0, this.rotate || (c.pointerOrientation = " & Chr(34) & "H" & Chr(34) & "));" & vbCrLf)
        fsT.Writetext("            this.rotate && (b.pointerOrientation = " & Chr(34) & "H" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            this.extraWidth = 0;" & vbCrLf)
        fsT.Writetext("            this.prevX = [];" & vbCrLf)
        fsT.Writetext("            this.prevY = [];" & vbCrLf)
        fsT.Writetext("            this.prevTX = [];" & vbCrLf)
        fsT.Writetext("            this.prevTY = [];" & vbCrLf)
        fsT.Writetext("            if (this.valueBalloonsEnabled) for (b = 0; b < a.graphs.length; b++) c = new d.AmBalloon, c.className = a.graphs[b].id, c.chart = a, d.copyProperties(a.balloon, c), a.graphs[b].valueBalloon = c;" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "cursor" & Chr(34) & " == this.type ? this.createCursor() : this.createCrosshair()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateData: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.chart;" & vbCrLf)
        fsT.Writetext("            this.data = a.chartData;" & vbCrLf)
        fsT.Writetext("            this.firstTime = a.firstTime;" & vbCrLf)
        fsT.Writetext("            this.lastTime = a.lastTime" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        createCursor: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.chart," & vbCrLf)
        fsT.Writetext("                b = this.cursorAlpha," & vbCrLf)
        fsT.Writetext("                c = a.categoryAxis," & vbCrLf)
        fsT.Writetext("                e = this.categoryBalloon," & vbCrLf)
        fsT.Writetext("                h, f, g, k;" & vbCrLf)
        fsT.Writetext("            g = a.dx;" & vbCrLf)
        fsT.Writetext("            k = a.dy;" & vbCrLf)
        fsT.Writetext("            var l = this.width," & vbCrLf)
        fsT.Writetext("                m = this.height," & vbCrLf)
        fsT.Writetext("                n = a.rotate;" & vbCrLf)
        fsT.Writetext("            e.pointerWidth = c.tickLength;" & vbCrLf)
        fsT.Writetext("            n ? (h = [0, l, l + g], f = [0, 0, k], g = [g, 0, 0], k = [k, 0, m]) : (h = [g, 0, 0], f = [k, 0, m], g = [0, l, l + g], k = [0, 0, k]);" & vbCrLf)
        fsT.Writetext("            h = d.line(this.container, h, f, this.cursorColor, b, 1);" & vbCrLf)
        fsT.Writetext("            d.setCN(a, h, " & Chr(34) & "cursor-line" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            this.line = h;" & vbCrLf)
        fsT.Writetext("            h.node.style.pointerEvents = " & Chr(34) & "none" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            (f = this.fullRectSet) ? (f.push(h), f.translate(this.x, this.y)) : this.set.push(h);" & vbCrLf)
        fsT.Writetext("            this.valueLineEnabled && (h = this.valueLineAlpha, isNaN(h) || (b = h), b = d.line(this.container, g, k, this.cursorColor, b, 1), b.node.style.pointerEvents = " & Chr(34) & "none" & Chr(34) & ", d.setCN(a, b, " & Chr(34) & "cursor-value-line" & Chr(34) & "), this.vLine = b, this.set.push(b));" & vbCrLf)
        fsT.Writetext("            this.setBalloonBounds(e, c, n);" & vbCrLf)
        fsT.Writetext("            (a = this.vaBalloon) && this.setBalloonBounds(a, this.valueLineAxis, !n);" & vbCrLf)
        fsT.Writetext("            this.hideCursor()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        createCrosshair: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.cursorAlpha," & vbCrLf)
        fsT.Writetext("                b = this.container," & vbCrLf)
        fsT.Writetext("                c = d.line(b, [0, 0], [0, this.height], this.cursorColor, a, 1)," & vbCrLf)
        fsT.Writetext("                a = d.line(b, [0, this.width], [0, 0], this.cursorColor, a, 1);" & vbCrLf)
        fsT.Writetext("            d.setCN(this.chart, c, " & Chr(34) & "cursor-line" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            d.setCN(this.chart, a, " & Chr(34) & "cursor-line" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            this.set.push(c);" & vbCrLf)
        fsT.Writetext("            this.set.push(a);" & vbCrLf)
        fsT.Writetext("            this.vLine = c;" & vbCrLf)
        fsT.Writetext("            this.hLine = a;" & vbCrLf)
        fsT.Writetext("            this.hideCursor()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        update: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.chart;" & vbCrLf)
        fsT.Writetext("            if (a.mouseIsOver) {" & vbCrLf)
        fsT.Writetext("                var b = a.mouseX - this.x," & vbCrLf)
        fsT.Writetext("                    c = a.mouseY - this.y; - .5 < b && b < this.width + 1 && 0 < c && c < this.height ? (this.drawing ? this.rolledOver || a.setMouseCursor(" & Chr(34) & "crosshair" & Chr(34) & ") : this.pan && (this.rolledOver || a.setMouseCursor(" & Chr(34) & "move" & Chr(34) & ")), this.rolledOver = !0, (this.valueLineEnabled || this.valueLineBalloonEnabled) && this.updateVLine(b, c), this.setPosition()) : this.rolledOver && (this.handleMouseOut(), this.rolledOver = !1)" & vbCrLf)
        fsT.Writetext("            } else this.rolledOver && (this.handleMouseOut(), this.rolledOver = !1)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateVLine: function (a, b) {" & vbCrLf)
        fsT.Writetext("            var c = this.vLine," & vbCrLf)
        fsT.Writetext("                e = this.vaBalloon;" & vbCrLf)
        fsT.Writetext("            if ((c || e) && !this.panning && !this.drawing) {" & vbCrLf)
        fsT.Writetext("                c && c.show();" & vbCrLf)
        fsT.Writetext("                var d = this.valueLineAxis," & vbCrLf)
        fsT.Writetext("                    f, g = this.rotate;" & vbCrLf)
        fsT.Writetext("                g ? (c && c.translate(a, 0), d && (f = d.coordinateToValue(a)), c = a) : (c && c.translate(0, b), d && (f = d.coordinateToValue(b)), c = b - 1);" & vbCrLf)
        fsT.Writetext("                if (e && !isNaN(f) && this.prevLineValue != f) {" & vbCrLf)
        fsT.Writetext("                    var k = d.formatValue(f, !0);" & vbCrLf)
        fsT.Writetext("                    this.setBalloonPosition(e, d, c, !g);" & vbCrLf)
        fsT.Writetext("                    e.showBalloon(k)" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("                this.prevLineValue = f" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getMousePosition: function () {" & vbCrLf)
        fsT.Writetext("            var a, b = this.width," & vbCrLf)
        fsT.Writetext("                c = this.height;" & vbCrLf)
        fsT.Writetext("            a = this.chart;" & vbCrLf)
        fsT.Writetext("            this.rotate ? (a = a.mouseY - this.y, 0 > a && (a = 0), a > c && (a = c)) : (a = a.mouseX - this.x - 1, 0 > a && (a = 0), a > b && (a = b));" & vbCrLf)
        fsT.Writetext("            return a" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateCrosshair: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.chart," & vbCrLf)
        fsT.Writetext("                b = a.mouseX - this.x," & vbCrLf)
        fsT.Writetext("                c = a.mouseY - this.y," & vbCrLf)
        fsT.Writetext("                e = this.vLine," & vbCrLf)
        fsT.Writetext("                h = this.hLine," & vbCrLf)
        fsT.Writetext("                b = d.fitToBounds(b, 0, this.width)," & vbCrLf)
        fsT.Writetext("                c = d.fitToBounds(c, 0, this.height);" & vbCrLf)
        fsT.Writetext("            e && 0 < this.cursorAlpha && (e.show(), h.show(), e.translate(b, 0), h.translate(0, c));" & vbCrLf)
        fsT.Writetext("            this.zooming && (a.hideXScrollbar && (b = NaN), a.hideYScrollbar && (c = NaN)," & vbCrLf)
        fsT.Writetext("            this.updateSelectionSize(b, c));" & vbCrLf)
        fsT.Writetext("            this.fireMoved();" & vbCrLf)
        fsT.Writetext("            a.mouseIsOver || this.zooming || this.hideCursor()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        fireMoved: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.chart," & vbCrLf)
        fsT.Writetext("                b = {" & vbCrLf)
        fsT.Writetext("                    type: " & Chr(34) & "moved" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                    target: this" & vbCrLf)
        fsT.Writetext("                };" & vbCrLf)
        fsT.Writetext("            b.chart = a;" & vbCrLf)
        fsT.Writetext("            b.zooming = this.zooming;" & vbCrLf)
        fsT.Writetext("            b.x = a.mouseX - this.x;" & vbCrLf)
        fsT.Writetext("            b.y = a.mouseY - this.y;" & vbCrLf)
        fsT.Writetext("            this.fire(" & Chr(34) & "moved" & Chr(34) & ", b)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateSelectionSize: function (a, b) {" & vbCrLf)
        fsT.Writetext("            d.remove(this.selection);" & vbCrLf)
        fsT.Writetext("            var c = this.selectionPosX," & vbCrLf)
        fsT.Writetext("                e = this.selectionPosY," & vbCrLf)
        fsT.Writetext("                h = 0," & vbCrLf)
        fsT.Writetext("                f = 0," & vbCrLf)
        fsT.Writetext("                g = this.width," & vbCrLf)
        fsT.Writetext("                k = this.height;" & vbCrLf)
        fsT.Writetext("            isNaN(a) || (c > a && (h = a, g = c - a), c < a && (h = c, g = a - c), c == a && (h = a, g = 0), g += this.extraWidth, h -= this.extraWidth / 2);" & vbCrLf)
        fsT.Writetext("            isNaN(b) || (e > b && (f = b, k = e - b), e < b && (f = e, k = b - e), e == b && (f = b, k = 0), k += this.extraWidth, f -= this.extraWidth / 2);" & vbCrLf)
        fsT.Writetext("            0 < g && 0 < k && (c = d.rect(this.container, g, k, this.cursorColor, this.selectionAlpha), d.setCN(this.chart, c, " & Chr(34) & "cursor-selection" & Chr(34) & "), c.translate(h + this.x, f + this.y), this.selection = c)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        arrangeBalloons: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.valueBalloons," & vbCrLf)
        fsT.Writetext("                b = this.x," & vbCrLf)
        fsT.Writetext("                c = this.y," & vbCrLf)
        fsT.Writetext("                e = this.height + c;" & vbCrLf)
        fsT.Writetext("            a.sort(this.compareY);" & vbCrLf)
        fsT.Writetext("            var d;" & vbCrLf)
        fsT.Writetext("            for (d = 0; d < a.length; d++) {" & vbCrLf)
        fsT.Writetext("                var f = a[d].balloon;" & vbCrLf)
        fsT.Writetext("                f.setBounds(b, c, b + this.width, e);" & vbCrLf)
        fsT.Writetext("                f.prevX = this.prevX[d];" & vbCrLf)
        fsT.Writetext("                f.prevY = this.prevY[d];" & vbCrLf)
        fsT.Writetext("                f.prevTX = this.prevTX[d];" & vbCrLf)
        fsT.Writetext("                f.prevTY = this.prevTY[d];" & vbCrLf)
        fsT.Writetext("                f.draw();" & vbCrLf)
        fsT.Writetext("                e = f.yPos - 3" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            this.arrangeBalloons2()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        compareY: function (a, b) {" & vbCrLf)
        fsT.Writetext("            return a.yy < b.yy ? 1 : -1" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        arrangeBalloons2: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.valueBalloons;" & vbCrLf)
        fsT.Writetext("            a.reverse();" & vbCrLf)
        fsT.Writetext("            var b, c = this.x," & vbCrLf)
        fsT.Writetext("                e, d, f = a.length;" & vbCrLf)
        fsT.Writetext("            for (d = 0; d < f; d++) {" & vbCrLf)
        fsT.Writetext("                var g = a[d].balloon;" & vbCrLf)
        fsT.Writetext("                b = g.bottom;" & vbCrLf)
        fsT.Writetext("                var k = g.bottom - g.yPos," & vbCrLf)
        fsT.Writetext("                    l = f - d - 1;" & vbCrLf)
        fsT.Writetext("                0 < d && b - k < e + 3 && (g.setBounds(c, e + 3, c + this.width, e + k + 3), g.prevX = this.prevX[l], g.prevY = this.prevY[l], g.prevTX = this.prevTX[l], g.prevTY = this.prevTY[l], g.draw());" & vbCrLf)
        fsT.Writetext("                g.set && g.set.show();" & vbCrLf)
        fsT.Writetext("                this.prevX[l] = g.prevX;" & vbCrLf)
        fsT.Writetext("                this.prevY[l] = g.prevY;" & vbCrLf)
        fsT.Writetext("                this.prevTX[l] = g.prevTX;" & vbCrLf)
        fsT.Writetext("                this.prevTY[l] = g.prevTY;" & vbCrLf)
        fsT.Writetext("                e = g.bottom" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        showBullets: function () {" & vbCrLf)
        fsT.Writetext("            d.remove(this.allBullets);" & vbCrLf)
        fsT.Writetext("            var a = this.container," & vbCrLf)
        fsT.Writetext("                b = a.set();" & vbCrLf)
        fsT.Writetext("            this.set.push(b);" & vbCrLf)
        fsT.Writetext("            this.set.show();" & vbCrLf)
        fsT.Writetext("            this.allBullets = b;" & vbCrLf)
        fsT.Writetext("            var b = this.chart.graphs," & vbCrLf)
        fsT.Writetext("                c;" & vbCrLf)
        fsT.Writetext("            for (c = 0; c < b.length; c++) {" & vbCrLf)
        fsT.Writetext("                var e = b[c];" & vbCrLf)
        fsT.Writetext("                if (!e.hidden && e.balloonText) {" & vbCrLf)
        fsT.Writetext("                    var h = this.data[this.index].axes[e.valueAxis.id].graphs[e.id]," & vbCrLf)
        fsT.Writetext("                        f = h.y;" & vbCrLf)
        fsT.Writetext("                    if (!isNaN(f)) {" & vbCrLf)
        fsT.Writetext("                        var g, k;" & vbCrLf)
        fsT.Writetext("                        g = h.x;" & vbCrLf)
        fsT.Writetext("                        this.rotate ? (k = f, f = g) : k = g;" & vbCrLf)
        fsT.Writetext("                        e = d.circle(a, this.bulletSize / 2, this.chart.getBalloonColor(e, h, !0), e.cursorBulletAlpha);" & vbCrLf)
        fsT.Writetext("                        e.translate(k," & vbCrLf)
        fsT.Writetext("                        f);" & vbCrLf)
        fsT.Writetext("                        this.allBullets.push(e)" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        destroy: function () {" & vbCrLf)
        fsT.Writetext("            this.clear();" & vbCrLf)
        fsT.Writetext("            d.remove(this.selection);" & vbCrLf)
        fsT.Writetext("            this.selection = null;" & vbCrLf)
        fsT.Writetext("            var a = this.categoryBalloon;" & vbCrLf)
        fsT.Writetext("            a && a.destroy();" & vbCrLf)
        fsT.Writetext("            (a = this.vaBalloon) && a.destroy();" & vbCrLf)
        fsT.Writetext("            this.destroyValueBalloons();" & vbCrLf)
        fsT.Writetext("            d.remove(this.set)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        clear: function () {}," & vbCrLf)
        fsT.Writetext("        destroyValueBalloons: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.valueBalloons;" & vbCrLf)
        fsT.Writetext("            if (a) {" & vbCrLf)
        fsT.Writetext("                var b;" & vbCrLf)
        fsT.Writetext("                for (b = 0; b < a.length; b++) a[b].balloon.hide()" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        zoom: function (a, b, c, e) {" & vbCrLf)
        fsT.Writetext("            var h = this.chart;" & vbCrLf)
        fsT.Writetext("            this.destroyValueBalloons();" & vbCrLf)
        fsT.Writetext("            this.zooming = !1;" & vbCrLf)
        fsT.Writetext("            var f;" & vbCrLf)
        fsT.Writetext("            this.rotate ? this.selectionPosY = f = h.mouseY : this.selectionPosX = f = h.mouseX;" & vbCrLf)
        fsT.Writetext("            this.start = a;" & vbCrLf)
        fsT.Writetext("            this.end = b;" & vbCrLf)
        fsT.Writetext("            this.startTime = c;" & vbCrLf)
        fsT.Writetext("            this.endTime = e;" & vbCrLf)
        fsT.Writetext("            this.zoomed = !0;" & vbCrLf)
        fsT.Writetext("            e = h.categoryAxis;" & vbCrLf)
        fsT.Writetext("            f = this.rotate;" & vbCrLf)
        fsT.Writetext("            b = this.width;" & vbCrLf)
        fsT.Writetext("            c = this.height;" & vbCrLf)
        fsT.Writetext("            a = e.stepWidth;" & vbCrLf)
        fsT.Writetext("            if (this.fullWidth) {" & vbCrLf)
        fsT.Writetext("                var g = 1;" & vbCrLf)
        fsT.Writetext("                e.parseDates && !e.equalSpacing && (g = e.minDuration());" & vbCrLf)
        fsT.Writetext("                f ? this.extraWidth = c = a * g : (this.extraWidth = b = a * g, this.categoryBalloon.minWidth = b);" & vbCrLf)
        fsT.Writetext("                this.line && this.line.remove();" & vbCrLf)
        fsT.Writetext("                this.line = d.rect(this.container, b, c, this.cursorColor, this.cursorAlpha, 0);" & vbCrLf)
        fsT.Writetext("                this.line.node.style.pointerEvents = " & Chr(34) & "none" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                d.setCN(h, this.line, " & Chr(34) & "cursor-fill" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                this.fullRectSet && this.fullRectSet.push(this.line)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            this.stepWidth = a;" & vbCrLf)
        fsT.Writetext("            this.tempVal = this.valueBalloonsEnabled;" & vbCrLf)
        fsT.Writetext("            this.valueBalloonsEnabled = !1;" & vbCrLf)
        fsT.Writetext("            this.setPosition();" & vbCrLf)
        fsT.Writetext("            this.valueBalloonsEnabled = this.tempVal;" & vbCrLf)
        fsT.Writetext("            this.hideCursor()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        hideObj: function (a) {" & vbCrLf)
        fsT.Writetext("            a && a.hide()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        hideCursor: function (a) {" & vbCrLf)
        fsT.Writetext("            void 0 === a && (a = !0);" & vbCrLf)
        fsT.Writetext("            this.leaveCursor || (this.hideObj(this.set), this.hideObj(this.categoryBalloon), this.hideObj(this.line), this.hideObj(this.vLine), this.hideObj(this.hLine), this.hideObj(this.vaBalloon), this.hideObj(this.allBullets), this.destroyValueBalloons()," & vbCrLf)
        fsT.Writetext("            this.selectWithoutZooming || d.remove(this.selection), this.previousIndex = NaN, a && this.fire(" & Chr(34) & "onHideCursor" & Chr(34) & ", {" & vbCrLf)
        fsT.Writetext("                type: " & Chr(34) & "onHideCursor" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                chart: this.chart," & vbCrLf)
        fsT.Writetext("                target: this" & vbCrLf)
        fsT.Writetext("            }), this.drawing || this.chart.setMouseCursor(" & Chr(34) & "auto" & Chr(34) & "), this.normalizeBulletSize())" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        setPosition: function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            void 0 === b && (b = !0);" & vbCrLf)
        fsT.Writetext("            if (" & Chr(34) & "cursor" & Chr(34) & " == this.type) {" & vbCrLf)
        fsT.Writetext("                if (this.tempPosition = NaN, d.ifArray(this.data)) isNaN(a) && (a = this.getMousePosition()), (a != this.previousMousePosition || !0 === this.zoomed || this.oneBalloonOnly) && !isNaN(a) && (" & Chr(34) & "mouse" & Chr(34) & " == this.cursorPosition && (this.tempPosition = a), isNaN(c) && (c = this.chart.categoryAxis.xToIndex(a)), c != this.previousIndex || this.zoomed || " & Chr(34) & "mouse" & Chr(34) & " == this.cursorPosition || this.oneBalloonOnly) && (this.updateCursor(c, b), this.zoomed = !1), this.previousMousePosition = a" & vbCrLf)
        fsT.Writetext("            } else this.updateCrosshair()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        normalizeBulletSize: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.resizedBullets;" & vbCrLf)
        fsT.Writetext("            if (a) for (var b = 0; b < a.length; b++) {" & vbCrLf)
        fsT.Writetext("                var c = a[b]," & vbCrLf)
        fsT.Writetext("                    e = c.bulletGraphics;" & vbCrLf)
        fsT.Writetext("                e && (e.translate(c.bx, c.by, 1), c = c.graph, isNaN(this.graphBulletAlpha) || (e.setAttr(" & Chr(34) & "fill-opacity" & Chr(34) & ", c.bulletAlpha), e.setAttr(" & Chr(34) & "stroke-opacity" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                c.bulletBorderAlpha)))" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateCursor: function (a, b) {" & vbCrLf)
        fsT.Writetext("            var c = this.chart," & vbCrLf)
        fsT.Writetext("                e = this.fullWidth," & vbCrLf)
        fsT.Writetext("                h = c.mouseX - this.x," & vbCrLf)
        fsT.Writetext("                f = c.mouseY - this.y;" & vbCrLf)
        fsT.Writetext("            this.drawingNow && (d.remove(this.drawingLine), this.drawingLine = d.line(this.container, [this.x + this.drawStartX, this.x + h], [this.y + this.drawStartY, this.y + f], this.cursorColor, 1, 1));" & vbCrLf)
        fsT.Writetext("            if (this.enabled) {" & vbCrLf)
        fsT.Writetext("                void 0 === b && (b = !0);" & vbCrLf)
        fsT.Writetext("                this.index = a += this.adjustment;" & vbCrLf)
        fsT.Writetext("                var g = c.categoryAxis," & vbCrLf)
        fsT.Writetext("                    k = c.dx," & vbCrLf)
        fsT.Writetext("                    l = c.dy," & vbCrLf)
        fsT.Writetext("                    m = this.x + 1," & vbCrLf)
        fsT.Writetext("                    n = this.y + 1," & vbCrLf)
        fsT.Writetext("                    q = this.width," & vbCrLf)
        fsT.Writetext("                    p = this.height," & vbCrLf)
        fsT.Writetext("                    r = this.data[a];" & vbCrLf)
        fsT.Writetext("                this.fireMoved();" & vbCrLf)
        fsT.Writetext("                if (r) {" & vbCrLf)
        fsT.Writetext("                    var t = r.x[g.id]," & vbCrLf)
        fsT.Writetext("                        u = c.rotate," & vbCrLf)
        fsT.Writetext("                        z = this.stepWidth," & vbCrLf)
        fsT.Writetext("                        v = this.categoryBalloon," & vbCrLf)
        fsT.Writetext("                        w = this.firstTime," & vbCrLf)
        fsT.Writetext("                        x = this.lastTime," & vbCrLf)
        fsT.Writetext("                        A = this.cursorPosition," & vbCrLf)
        fsT.Writetext("                        B = this.zooming," & vbCrLf)
        fsT.Writetext("                        D = this.panning," & vbCrLf)
        fsT.Writetext("                        C = c.graphs;" & vbCrLf)
        fsT.Writetext("                    if (c.mouseIsOver || B || D || this.forceShow) if (this.forceShow = !1, D) {" & vbCrLf)
        fsT.Writetext("                        var k = this.panClickPos," & vbCrLf)
        fsT.Writetext("                            c = this.panClickEndTime," & vbCrLf)
        fsT.Writetext("                            B = this.panClickStartTime," & vbCrLf)
        fsT.Writetext("                            I = this.panClickEnd," & vbCrLf)
        fsT.Writetext("                            m = this.panClickStart," & vbCrLf)
        fsT.Writetext("                            h = (u ? k - f : k - h) / z;" & vbCrLf)
        fsT.Writetext("                        if (!g.parseDates || g.equalSpacing) h = Math.round(h);" & vbCrLf)
        fsT.Writetext("                        0 !== h && (k = {" & vbCrLf)
        fsT.Writetext("                            type: " & Chr(34) & "zoomed" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                            target: this" & vbCrLf)
        fsT.Writetext("                        }, k.chart = this.chart, g.parseDates && !g.equalSpacing ? (c + h > x && (h = x - c), B + h < w && (h = w - B), k.start = Math.round(B + h), k.end = Math.round(c + h), this.fire(k.type, k)) : I + h >= this.data.length || 0 > m + h || (k.start = m + h, k.end = I + h, this.fire(k.type, k)))" & vbCrLf)
        fsT.Writetext("                    } else {" & vbCrLf)
        fsT.Writetext("                        " & Chr(34) & "start" & Chr(34) & " == A ? t -= g.cellWidth / 2 : " & Chr(34) & "mouse" & Chr(34) & " == A && (c.mouseIsOver ? t = u ? f - 2 : h - 2 : isNaN(this.tempPosition) || (t = this.tempPosition - 2));" & vbCrLf)
        fsT.Writetext("                        if (u) {" & vbCrLf)
        fsT.Writetext("                            if (0 > t) if (B) t = 0;" & vbCrLf)
        fsT.Writetext("                            else {" & vbCrLf)
        fsT.Writetext("                                this.hideCursor();" & vbCrLf)
        fsT.Writetext("                                return" & vbCrLf)
        fsT.Writetext("                            }" & vbCrLf)
        fsT.Writetext("                            if (t > p + 1) if (B) t = p + 1;" & vbCrLf)
        fsT.Writetext("                            else {" & vbCrLf)
        fsT.Writetext("                                this.hideCursor();" & vbCrLf)
        fsT.Writetext("                                return" & vbCrLf)
        fsT.Writetext("                            }" & vbCrLf)
        fsT.Writetext("                        } else {" & vbCrLf)
        fsT.Writetext("                            if (0 > t) if (B) t = 0;" & vbCrLf)
        fsT.Writetext("                            else {" & vbCrLf)
        fsT.Writetext("                                this.hideCursor();" & vbCrLf)
        fsT.Writetext("                                return" & vbCrLf)
        fsT.Writetext("                            }" & vbCrLf)
        fsT.Writetext("                            if (t > q) if (B) t = q;" & vbCrLf)
        fsT.Writetext("                            else {" & vbCrLf)
        fsT.Writetext("                                this.hideCursor();" & vbCrLf)
        fsT.Writetext("                                return" & vbCrLf)
        fsT.Writetext("                            }" & vbCrLf)
        fsT.Writetext("                        }" & vbCrLf)
        fsT.Writetext("                        w = this.line;" & vbCrLf)
        fsT.Writetext("                        0 < this.cursorAlpha && (u ? (x = 0, z = t + l, e && (z -= g.cellWidth / 2)) : (x = t, z = 0, e && (x -= g.cellWidth / 2)), A = this.animationDuration, 0 < A && !this.zooming ? isNaN(this.previousX) ? w.translate(x, z) : (w.translate(this.previousX, this.previousY), w.animate({" & vbCrLf)
        fsT.Writetext("                            translate: x + " & Chr(34) & "," & Chr(34) & " + z" & vbCrLf)
        fsT.Writetext("                        }, A, " & Chr(34) & "easeOutSine" & Chr(34) & ")) : w.translate(x, z), this.previousX = x, this.previousY = z, w.show());" & vbCrLf)
        fsT.Writetext("                        this.linePos = u ? t + l : t;" & vbCrLf)
        fsT.Writetext("                        B && (e && w.hide(), u ? this.updateSelectionSize(NaN, t) : this.updateSelectionSize(t, NaN));" & vbCrLf)
        fsT.Writetext("                        z = !0;" & vbCrLf)
        fsT.Writetext("                        B && (z = !1);" & vbCrLf)
        fsT.Writetext("                        this.categoryBalloonEnabled && z ? (this.setBalloonPosition(v, g, t, u), (w = this.categoryBalloonFunction) ? v.showBalloon(w(r.category)) : g.parseDates ? (g = d.formatDate(r.category, this.categoryBalloonDateFormat, c), -1 != g.indexOf(" & Chr(34) & "fff" & Chr(34) & ") && (g = d.formatMilliseconds(g, r.category)), v.showBalloon(g)) : v.showBalloon(d.fixNewLines(r.category))) : v.hide();" & vbCrLf)
        fsT.Writetext("                        C && this.bulletsEnabled && this.showBullets();" & vbCrLf)
        fsT.Writetext("                        if (this.oneBalloonOnly) {" & vbCrLf)
        fsT.Writetext("                            t = Infinity;" & vbCrLf)
        fsT.Writetext("                            for (g = 0; g < C.length; g++) v = C[g], v.showBalloon && !v.hidden && v.balloonText && (w = r.axes[v.valueAxis.id].graphs[v.id], x = w.y, isNaN(x) || (u ? Math.abs(h - x) < t && (t = Math.abs(h - x), I = v) : Math.abs(f - x) < t && (t = Math.abs(f - x), I = v)));" & vbCrLf)
        fsT.Writetext("                            this.mostCloseGraph && (I = this.mostCloseGraph)" & vbCrLf)
        fsT.Writetext("                        }" & vbCrLf)
        fsT.Writetext("                        if (a != this.previousIndex || I != this.previousMostCloseGraph) if (this.normalizeBulletSize(), this.destroyValueBalloons(), this.resizedBullets = [], C && this.valueBalloonsEnabled && z && c.balloon.enabled) {" & vbCrLf)
        fsT.Writetext("                            this.valueBalloons = t = [];" & vbCrLf)
        fsT.Writetext("                            for (g = 0; g < C.length; g++) if (v = C[g], x = NaN, (!this.oneBalloonOnly || v == I) && v.showBalloon && !v.hidden && v.balloonText && (" & Chr(34) & "step" & Chr(34) & " == v.type && " & Chr(34) & "left" & Chr(34) & " == v.stepDirection && (r = this.data[a + 1]), r)) {" & vbCrLf)
        fsT.Writetext("                                if (w = r.axes[v.valueAxis.id].graphs[v.id]) x = w.y;" & vbCrLf)
        fsT.Writetext("                                if (this.showNextAvailable && isNaN(x) && a + 1 < this.data.length) for (z = a + 1; z < this.data.length; z++) if (e = this.data[z]) if (w = e.axes[v.valueAxis.id].graphs[v.id], x = w.y, !isNaN(x)) break;" & vbCrLf)
        fsT.Writetext("                                if (!isNaN(x)) {" & vbCrLf)
        fsT.Writetext("                                    e = w.x;" & vbCrLf)
        fsT.Writetext("                                    l = !0;" & vbCrLf)
        fsT.Writetext("                                    if (u) {" & vbCrLf)
        fsT.Writetext("                                        if (z = x, 0 > e || e > p) l = !1" & vbCrLf)
        fsT.Writetext("                                    } else if (z = e, e = x, 0 > z || z > q + k + 1) l = !1;" & vbCrLf)
        fsT.Writetext("                                    l && (l = this.graphBulletSize, A = this.graphBulletAlpha, 1 == l && isNaN(A) || !d.isModern || !(D = w.bulletGraphics) || (D.translate(w.bx, w.by, l), this.resizedBullets.push(w), isNaN(A) || (D.setAttr(" & Chr(34) & "fill-opacity" & Chr(34) & ", A), D.setAttr(" & Chr(34) & "stroke-opacity" & Chr(34) & ", A))), l = v.valueBalloon, A = c.getBalloonColor(v, w)," & vbCrLf)
        fsT.Writetext("                                    l.setBounds(m, n, m + q, n + p), l.pointerOrientation = " & Chr(34) & "H" & Chr(34) & ", D = this.balloonPointerOrientation, " & Chr(34) & "vertical" & Chr(34) & " == D && (l.pointerOrientation = " & Chr(34) & "V" & Chr(34) & "), " & Chr(34) & "horizontal" & Chr(34) & " == D && (l.pointerOrientation = " & Chr(34) & "H" & Chr(34) & "), l.changeColor(A), void 0 !== v.balloonAlpha && (l.fillAlpha = v.balloonAlpha), void 0 !== v.balloonTextColor && (l.color = v.balloonTextColor), l.setPosition(z + m, e + n), z = c.formatString(v.balloonText, w, !0), (e = v.balloonFunction) && (z = e(w, v).toString()), " & Chr(34) & "" & Chr(34) & " !== z && (u ? l.showBalloon(z) : (l.text = z, l.show = !0), t.push({" & vbCrLf)
        fsT.Writetext("                                        yy: x," & vbCrLf)
        fsT.Writetext("                                        balloon: l" & vbCrLf)
        fsT.Writetext("                                    })), !u && l.set && (l.set.hide()," & vbCrLf)
        fsT.Writetext("                                    v = l.textDiv) && (v.style.visibility = " & Chr(34) & "hidden" & Chr(34) & "))" & vbCrLf)
        fsT.Writetext("                                }" & vbCrLf)
        fsT.Writetext("                            }" & vbCrLf)
        fsT.Writetext("                            this.avoidBalloonOverlapping && this.arrangeBalloons()" & vbCrLf)
        fsT.Writetext("                        }" & vbCrLf)
        fsT.Writetext("                        b ? (k = {" & vbCrLf)
        fsT.Writetext("                            type: " & Chr(34) & "changed" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("                        }, k.index = a, k.chart = this.chart, k.zooming = B, k.mostCloseGraph = I, k.position = u ? f : h, k.target = this, c.fire(" & Chr(34) & "changed" & Chr(34) & ", k), this.fire(" & Chr(34) & "changed" & Chr(34) & ", k), this.skipZoomDispatch = !1) : (this.skipZoomDispatch = !0, c.updateLegendValues(a));" & vbCrLf)
        fsT.Writetext("                        this.previousIndex = a;" & vbCrLf)
        fsT.Writetext("                        this.previousMostCloseGraph = I" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            } else this.hideCursor()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        setBalloonPosition: function (a, b, c, e) {" & vbCrLf)
        fsT.Writetext("            var d = b.position," & vbCrLf)
        fsT.Writetext("                f = b.inside;" & vbCrLf)
        fsT.Writetext("            b = b.axisThickness;" & vbCrLf)
        fsT.Writetext("            var g = this.chart," & vbCrLf)
        fsT.Writetext("                k = g.dx," & vbCrLf)
        fsT.Writetext("                g = g.dy," & vbCrLf)
        fsT.Writetext("                l = this.x," & vbCrLf)
        fsT.Writetext("                m = this.y," & vbCrLf)
        fsT.Writetext("                n = this.width," & vbCrLf)
        fsT.Writetext("                q = this.height;" & vbCrLf)
        fsT.Writetext("            e ? (f && (" & Chr(34) & "right" & Chr(34) & " == d ? a.setBounds(l, m + g, l + n + k, m + c + g) : a.setBounds(l, m + g, l + n + k, m + c)), " & Chr(34) & "right" & Chr(34) & " == d ? f ? a.setPosition(l + n + k, m + c + g) : a.setPosition(l + n + k + b, m + c + g) : f ? a.setPosition(l, m + c) : a.setPosition(l - b, m + c)) : " & Chr(34) & "top" & Chr(34) & " == d ? f ? a.setPosition(l + c + k, m + g) : a.setPosition(l + c + k, m + g - b + 1) : f ? a.setPosition(l + c, m + q) : a.setPosition(l + c, m + q + b - 1)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        setBalloonBounds: function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            var e = b.position," & vbCrLf)
        fsT.Writetext("                d = b.inside," & vbCrLf)
        fsT.Writetext("                f = b.axisThickness," & vbCrLf)
        fsT.Writetext("                g = b.tickLength," & vbCrLf)
        fsT.Writetext("                k = this.chart," & vbCrLf)
        fsT.Writetext("                l = k.dx," & vbCrLf)
        fsT.Writetext("                k = k.dy," & vbCrLf)
        fsT.Writetext("                m = this.x," & vbCrLf)
        fsT.Writetext("                n = this.y," & vbCrLf)
        fsT.Writetext("                q = this.width," & vbCrLf)
        fsT.Writetext("                p = this.height;" & vbCrLf)
        fsT.Writetext("            c ? (d && (a.pointerWidth = 0), " & Chr(34) & "right" & Chr(34) & " == e ? d ? a.setBounds(m, n + k, m + q + l, n + p + k) : a.setBounds(m + q + l + f, n + k, m + q + 1E3, n + p + k) : d ? a.setBounds(m, n, q + m, p + n) : a.setBounds(-1E3, -1E3, m - g - f, n + p + 15)) : (a.maxWidth = q, b.parseDates && (g = 0, a.pointerWidth = 0), " & Chr(34) & "top" & Chr(34) & " == e ? d ? a.setBounds(m + l, n + k, q + l + m, p + n) : a.setBounds(m + l, -1E3, q + l + m, n + k - g - f) : d ? a.setBounds(m, n, q + m, p + n - g) : a.setBounds(m, n + p + g + f - 1, m + q, n + p + g + f))" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        enableDrawing: function (a) {" & vbCrLf)
        fsT.Writetext("            this.enabled = !a;" & vbCrLf)
        fsT.Writetext("            this.hideCursor();" & vbCrLf)
        fsT.Writetext("            this.rolledOver = !1;" & vbCrLf)
        fsT.Writetext("            this.drawing = a" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        isZooming: function (a) {" & vbCrLf)
        fsT.Writetext("            a && a != this.zooming && this.handleMouseDown(" & Chr(34) & "fake" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            a || a == this.zooming || this.handleMouseUp()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleMouseOut: function () {" & vbCrLf)
        fsT.Writetext("            if (this.enabled) if (this.zooming) this.setPosition();" & vbCrLf)
        fsT.Writetext("            else {" & vbCrLf)
        fsT.Writetext("                this.index = void 0;" & vbCrLf)
        fsT.Writetext("                var a = {" & vbCrLf)
        fsT.Writetext("                    type: " & Chr(34) & "changed" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                    index: void 0," & vbCrLf)
        fsT.Writetext("                    target: this" & vbCrLf)
        fsT.Writetext("                };" & vbCrLf)
        fsT.Writetext("                a.chart = this.chart;" & vbCrLf)
        fsT.Writetext("                this.fire(" & Chr(34) & "changed" & Chr(34) & ", a);" & vbCrLf)
        fsT.Writetext("                this.hideCursor()" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleReleaseOutside: function () {" & vbCrLf)
        fsT.Writetext("            this.handleMouseUp()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleMouseUp: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.chart," & vbCrLf)
        fsT.Writetext("                b = this.data," & vbCrLf)
        fsT.Writetext("                c;" & vbCrLf)
        fsT.Writetext("            if (a) {" & vbCrLf)
        fsT.Writetext("                var e = a.mouseX - this.x," & vbCrLf)
        fsT.Writetext("                    h = a.mouseY - this.y;" & vbCrLf)
        fsT.Writetext("                if (this.drawingNow) {" & vbCrLf)
        fsT.Writetext("                    this.drawingNow = !1;" & vbCrLf)
        fsT.Writetext("                    d.remove(this.drawingLine);" & vbCrLf)
        fsT.Writetext("                    c = this.drawStartX;" & vbCrLf)
        fsT.Writetext("                    var f = this.drawStartY;" & vbCrLf)
        fsT.Writetext("                    if (2 < Math.abs(c - e) || 2 < Math.abs(f - h)) c = {" & vbCrLf)
        fsT.Writetext("                        type: " & Chr(34) & "draw" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                        target: this," & vbCrLf)
        fsT.Writetext("                        chart: a," & vbCrLf)
        fsT.Writetext("                        initialX: c," & vbCrLf)
        fsT.Writetext("                        initialY: f," & vbCrLf)
        fsT.Writetext("                        finalX: e," & vbCrLf)
        fsT.Writetext("                        finalY: h" & vbCrLf)
        fsT.Writetext("                    }, this.fire(c.type, c)" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("                if (this.enabled && 0 < b.length) {" & vbCrLf)
        fsT.Writetext("                    if (this.pan) this.rolledOver = !1;" & vbCrLf)
        fsT.Writetext("                    else if (this.zoomable && this.zooming) {" & vbCrLf)
        fsT.Writetext("                        c = this.selectWithoutZooming ? {" & vbCrLf)
        fsT.Writetext("                            type: " & Chr(34) & "selected" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("                        } : {" & vbCrLf)
        fsT.Writetext("                            type: " & Chr(34) & "zoomed" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("                        };" & vbCrLf)
        fsT.Writetext("                        c.target = this;" & vbCrLf)
        fsT.Writetext("                        c.chart = a;" & vbCrLf)
        fsT.Writetext("                        if (" & Chr(34) & "cursor" & Chr(34) & " == this.type) this.rotate ? this.selectionPosY = h : this.selectionPosX = h = e, 4 > Math.abs(h - this.initialMouse) && this.fromIndex == this.index || (this.index < this.fromIndex ? (c.end = this.fromIndex, c.start = this.index) : (c.end = this.index, c.start = this.fromIndex), h = a.categoryAxis, h.parseDates && !h.equalSpacing && (b[c.start] && (c.start = b[c.start].time), b[c.end] && (c.end = a.getEndTime(b[c.end].time))), this.skipZoomDispatch || this.fire(c.type, c));" & vbCrLf)
        fsT.Writetext("                        else {" & vbCrLf)
        fsT.Writetext("                            var g = this.initialMouseX," & vbCrLf)
        fsT.Writetext("                                k = this.initialMouseY;" & vbCrLf)
        fsT.Writetext("                            3 > Math.abs(e - g) && 3 > Math.abs(h - k) || (b = Math.min(g, e), f = Math.min(k, h), e = Math.abs(g - e), h = Math.abs(k - h), a.hideXScrollbar && (b = 0, e = this.width), a.hideYScrollbar && (f = 0, h = this.height)," & vbCrLf)
        fsT.Writetext("                            c.selectionHeight = h, c.selectionWidth = e, c.selectionY = f, c.selectionX = b, this.skipZoomDispatch || this.fire(c.type, c))" & vbCrLf)
        fsT.Writetext("                        }" & vbCrLf)
        fsT.Writetext("                        this.selectWithoutZooming || d.remove(this.selection)" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                    this.skipZoomDispatch = !1" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            this.panning = this.zooming = !1" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        showCursorAt: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = this.chart.categoryAxis;" & vbCrLf)
        fsT.Writetext("            a = b.parseDates ? b.dateToCoordinate(a) : b.categoryToCoordinate(a);" & vbCrLf)
        fsT.Writetext("            this.previousMousePosition = NaN;" & vbCrLf)
        fsT.Writetext("            this.forceShow = !0;" & vbCrLf)
        fsT.Writetext("            this.setPosition(a, !1)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        clearSelection: function () {" & vbCrLf)
        fsT.Writetext("            d.remove(this.selection)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleMouseDown: function (a) {" & vbCrLf)
        fsT.Writetext("            if (this.zoomable || this.pan || this.drawing) {" & vbCrLf)
        fsT.Writetext("                var b = this.rotate," & vbCrLf)
        fsT.Writetext("                    c = this.chart," & vbCrLf)
        fsT.Writetext("                    e = c.mouseX - this.x," & vbCrLf)
        fsT.Writetext("                    h = c.mouseY - this.y;" & vbCrLf)
        fsT.Writetext("                if (0 < e && e < this.width && 0 < h && h < this.height || " & Chr(34) & "fake" & Chr(34) & " == a) this.setPosition(), this.selectWithoutZooming && d.remove(this.selection), this.drawing ? (this.drawStartY = h, this.drawStartX = e, this.drawingNow = !0) : this.pan ? (this.zoomable = !1, c.setMouseCursor(" & Chr(34) & "move" & Chr(34) & "), this.panning = !0, this.panClickPos = b ? h : e, this.panClickStart = this.start, this.panClickEnd = this.end, this.panClickStartTime = this.startTime, this.panClickEndTime = this.endTime) : this.zoomable && (" & Chr(34) & "cursor" & Chr(34) & " == this.type ? (this.fromIndex = this.index, b ? (this.initialMouse = h, this.selectionPosY = this.linePos) : (this.initialMouse = e, this.selectionPosX = this.linePos)) : (this.initialMouseX = e, this.initialMouseY = h, this.selectionPosX = e, this.selectionPosY = h), this.zooming = !0)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    })" & vbCrLf)
        fsT.Writetext("})();" & vbCrLf)
        fsT.Writetext("(function () {" & vbCrLf)
        fsT.Writetext("    var d = window.AmCharts;" & vbCrLf)
        fsT.Writetext("    d.SimpleChartScrollbar = d.Class({" & vbCrLf)
        fsT.Writetext("        construct: function (a) {" & vbCrLf)
        fsT.Writetext("            this.createEvents(" & Chr(34) & "zoomed" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            this.backgroundColor = " & Chr(34) & "#D4D4D4" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.backgroundAlpha = 1;" & vbCrLf)
        fsT.Writetext("            this.selectedBackgroundColor = " & Chr(34) & "#EFEFEF" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.scrollDuration = this.selectedBackgroundAlpha = 1;" & vbCrLf)
        fsT.Writetext("            this.resizeEnabled = !0;" & vbCrLf)
        fsT.Writetext("            this.hideResizeGrips = !1;" & vbCrLf)
        fsT.Writetext("            this.scrollbarHeight = 20;" & vbCrLf)
        fsT.Writetext("            this.updateOnReleaseOnly = !1;" & vbCrLf)
        fsT.Writetext("            9 > document.documentMode && (this.updateOnReleaseOnly = !0);" & vbCrLf)
        fsT.Writetext("            this.dragIconHeight = this.dragIconWidth = 35;" & vbCrLf)
        fsT.Writetext("            this.dragIcon = " & Chr(34) & "dragIconRoundBig" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            d.applyTheme(this," & vbCrLf)
        fsT.Writetext("            a, " & Chr(34) & "SimpleChartScrollbar" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        draw: function () {" & vbCrLf)
        fsT.Writetext("            var a = this;" & vbCrLf)
        fsT.Writetext("            a.destroy();" & vbCrLf)
        fsT.Writetext("            if (a.enabled) {" & vbCrLf)
        fsT.Writetext("                var b = a.chart.container," & vbCrLf)
        fsT.Writetext("                    c = a.rotate," & vbCrLf)
        fsT.Writetext("                    e = a.chart," & vbCrLf)
        fsT.Writetext("                    h = b.set();" & vbCrLf)
        fsT.Writetext("                a.set = h;" & vbCrLf)
        fsT.Writetext("                e.scrollbarsSet.push(h);" & vbCrLf)
        fsT.Writetext("                var f, g;" & vbCrLf)
        fsT.Writetext("                c ? (f = a.scrollbarHeight, g = e.plotAreaHeight) : (g = a.scrollbarHeight, f = e.plotAreaWidth);" & vbCrLf)
        fsT.Writetext("                a.width = f;" & vbCrLf)
        fsT.Writetext("                if ((a.height = g) && f) {" & vbCrLf)
        fsT.Writetext("                    var k = d.rect(b, f, g, a.backgroundColor, a.backgroundAlpha, 1, a.backgroundColor, a.backgroundAlpha);" & vbCrLf)
        fsT.Writetext("                    d.setCN(e, k, " & Chr(34) & "scrollbar-bg" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                    a.bg = k;" & vbCrLf)
        fsT.Writetext("                    h.push(k);" & vbCrLf)
        fsT.Writetext("                    k = d.rect(b, f, g, " & Chr(34) & "#000" & Chr(34) & ", .005);" & vbCrLf)
        fsT.Writetext("                    h.push(k);" & vbCrLf)
        fsT.Writetext("                    a.invisibleBg = k;" & vbCrLf)
        fsT.Writetext("                    k.click(function () {" & vbCrLf)
        fsT.Writetext("                        a.handleBgClick()" & vbCrLf)
        fsT.Writetext("                    }).mouseover(function () {" & vbCrLf)
        fsT.Writetext("                        a.handleMouseOver()" & vbCrLf)
        fsT.Writetext("                    }).mouseout(function () {" & vbCrLf)
        fsT.Writetext("                        a.handleMouseOut()" & vbCrLf)
        fsT.Writetext("                    }).touchend(function () {" & vbCrLf)
        fsT.Writetext("                        a.handleBgClick()" & vbCrLf)
        fsT.Writetext("                    });" & vbCrLf)
        fsT.Writetext("                    k = d.rect(b, f, g, a.selectedBackgroundColor, a.selectedBackgroundAlpha);" & vbCrLf)
        fsT.Writetext("                    d.setCN(e, k, " & Chr(34) & "scrollbar-bg-selected" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                    a.selectedBG = k;" & vbCrLf)
        fsT.Writetext("                    h.push(k);" & vbCrLf)
        fsT.Writetext("                    f = d.rect(b, f, g, " & Chr(34) & "#000" & Chr(34) & ", .005);" & vbCrLf)
        fsT.Writetext("                    a.dragger = f;" & vbCrLf)
        fsT.Writetext("                    h.push(f);" & vbCrLf)
        fsT.Writetext("                    f.mousedown(function (b) {" & vbCrLf)
        fsT.Writetext("                        a.handleDragStart(b)" & vbCrLf)
        fsT.Writetext("                    }).mouseup(function () {" & vbCrLf)
        fsT.Writetext("                        a.handleDragStop()" & vbCrLf)
        fsT.Writetext("                    }).mouseover(function () {" & vbCrLf)
        fsT.Writetext("                        a.handleDraggerOver()" & vbCrLf)
        fsT.Writetext("                    }).mouseout(function () {" & vbCrLf)
        fsT.Writetext("                        a.handleMouseOut()" & vbCrLf)
        fsT.Writetext("                    }).touchstart(function (b) {" & vbCrLf)
        fsT.Writetext("                        a.handleDragStart(b)" & vbCrLf)
        fsT.Writetext("                    }).touchend(function () {" & vbCrLf)
        fsT.Writetext("                        a.handleDragStop()" & vbCrLf)
        fsT.Writetext("                    });" & vbCrLf)
        fsT.Writetext("                    f = e.pathToImages;" & vbCrLf)
        fsT.Writetext("                    c ? (k = f + a.dragIcon + " & Chr(34) & "H.png" & Chr(34) & ", f = a.dragIconWidth," & vbCrLf)
        fsT.Writetext("                    c = a.dragIconHeight) : (k = f + a.dragIcon + " & Chr(34) & ".png" & Chr(34) & ", c = a.dragIconWidth, f = a.dragIconHeight);" & vbCrLf)
        fsT.Writetext("                    g = b.image(k, 0, 0, c, f);" & vbCrLf)
        fsT.Writetext("                    d.setCN(e, g, " & Chr(34) & "scrollbar-grip-left" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                    k = b.image(k, 0, 0, c, f);" & vbCrLf)
        fsT.Writetext("                    d.setCN(e, k, " & Chr(34) & "scrollbar-grip-right" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                    var l = 10," & vbCrLf)
        fsT.Writetext("                        m = 20;" & vbCrLf)
        fsT.Writetext("                    e.panEventsEnabled && (l = 25, m = a.scrollbarHeight);" & vbCrLf)
        fsT.Writetext("                    var n = d.rect(b, l, m, " & Chr(34) & "#000" & Chr(34) & ", .005)," & vbCrLf)
        fsT.Writetext("                        q = d.rect(b, l, m, " & Chr(34) & "#000" & Chr(34) & ", .005);" & vbCrLf)
        fsT.Writetext("                    q.translate(-(l - c) / 2, -(m - f) / 2);" & vbCrLf)
        fsT.Writetext("                    n.translate(-(l - c) / 2, -(m - f) / 2);" & vbCrLf)
        fsT.Writetext("                    c = b.set([g, q]);" & vbCrLf)
        fsT.Writetext("                    b = b.set([k, n]);" & vbCrLf)
        fsT.Writetext("                    a.iconLeft = c;" & vbCrLf)
        fsT.Writetext("                    h.push(a.iconLeft);" & vbCrLf)
        fsT.Writetext("                    a.iconRight = b;" & vbCrLf)
        fsT.Writetext("                    h.push(b);" & vbCrLf)
        fsT.Writetext("                    c.mousedown(function () {" & vbCrLf)
        fsT.Writetext("                        a.leftDragStart()" & vbCrLf)
        fsT.Writetext("                    }).mouseup(function () {" & vbCrLf)
        fsT.Writetext("                        a.leftDragStop()" & vbCrLf)
        fsT.Writetext("                    }).mouseover(function () {" & vbCrLf)
        fsT.Writetext("                        a.iconRollOver()" & vbCrLf)
        fsT.Writetext("                    }).mouseout(function () {" & vbCrLf)
        fsT.Writetext("                        a.iconRollOut()" & vbCrLf)
        fsT.Writetext("                    }).touchstart(function () {" & vbCrLf)
        fsT.Writetext("                        a.leftDragStart()" & vbCrLf)
        fsT.Writetext("                    }).touchend(function () {" & vbCrLf)
        fsT.Writetext("                        a.leftDragStop()" & vbCrLf)
        fsT.Writetext("                    });" & vbCrLf)
        fsT.Writetext("                    b.mousedown(function () {" & vbCrLf)
        fsT.Writetext("                        a.rightDragStart()" & vbCrLf)
        fsT.Writetext("                    }).mouseup(function () {" & vbCrLf)
        fsT.Writetext("                        a.rightDragStop()" & vbCrLf)
        fsT.Writetext("                    }).mouseover(function () {" & vbCrLf)
        fsT.Writetext("                        a.iconRollOver()" & vbCrLf)
        fsT.Writetext("                    }).mouseout(function () {" & vbCrLf)
        fsT.Writetext("                        a.iconRollOut()" & vbCrLf)
        fsT.Writetext("                    }).touchstart(function () {" & vbCrLf)
        fsT.Writetext("                        a.rightDragStart()" & vbCrLf)
        fsT.Writetext("                    }).touchend(function () {" & vbCrLf)
        fsT.Writetext("                        a.rightDragStop()" & vbCrLf)
        fsT.Writetext("                    });" & vbCrLf)
        fsT.Writetext("                    d.ifArray(e.chartData) ? h.show() : h.hide();" & vbCrLf)
        fsT.Writetext("                    a.hideDragIcons();" & vbCrLf)
        fsT.Writetext("                    a.clipDragger(!1)" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("                h.translate(a.x, a.y);" & vbCrLf)
        fsT.Writetext("                h.node.style.msTouchAction = " & Chr(34) & "none" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateScrollbarSize: function (a, b) {" & vbCrLf)
        fsT.Writetext("            a = Math.round(a);" & vbCrLf)
        fsT.Writetext("            b = Math.round(b);" & vbCrLf)
        fsT.Writetext("            var c = this.dragger," & vbCrLf)
        fsT.Writetext("                e, d, f, g;" & vbCrLf)
        fsT.Writetext("            this.rotate ? (e = 0, d = a, f = this.width + 1, g = b - a, c.setAttr(" & Chr(34) & "height" & Chr(34) & ", b - a), c.setAttr(" & Chr(34) & "y" & Chr(34) & ", d)) : (e = a, d = 0, f = b - a, g = this.height + 1, c.setAttr(" & Chr(34) & "width" & Chr(34) & ", b - a), c.setAttr(" & Chr(34) & "x" & Chr(34) & ", e));" & vbCrLf)
        fsT.Writetext("            this.clipAndUpdate(e, d, f, g)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        update: function () {" & vbCrLf)
        fsT.Writetext("            var a, b = !1," & vbCrLf)
        fsT.Writetext("                c, e, d = this.x," & vbCrLf)
        fsT.Writetext("                f = this.y," & vbCrLf)
        fsT.Writetext("                g = this.dragger," & vbCrLf)
        fsT.Writetext("                k = this.getDBox();" & vbCrLf)
        fsT.Writetext("            if (k) {" & vbCrLf)
        fsT.Writetext("                c = k.x + d;" & vbCrLf)
        fsT.Writetext("                e = k.y + f;" & vbCrLf)
        fsT.Writetext("                var l = k.width," & vbCrLf)
        fsT.Writetext("                    k = k.height," & vbCrLf)
        fsT.Writetext("                    m = this.rotate," & vbCrLf)
        fsT.Writetext("                    n = this.chart," & vbCrLf)
        fsT.Writetext("                    q = this.width," & vbCrLf)
        fsT.Writetext("                    p = this.height," & vbCrLf)
        fsT.Writetext("                    r = n.mouseX," & vbCrLf)
        fsT.Writetext("                    t = n.mouseY;" & vbCrLf)
        fsT.Writetext("                a = this.initialMouse;" & vbCrLf)
        fsT.Writetext("                this.forceClip && this.clipDragger(!0);" & vbCrLf)
        fsT.Writetext("                n.mouseIsOver && (this.dragging && (n = this.initialCoord, m ? (a = n + (t - a), 0 > a && (a = 0), n = p - k, a > n && (a = n), g.setAttr(" & Chr(34) & "y" & Chr(34) & ", a)) : (a = n + (r - a), 0 > a && (a = 0), n = q - l, a > n && (a = n), g.setAttr(" & Chr(34) & "x" & Chr(34) & ", a)), this.clipDragger(!0)), this.resizingRight && (m ? (a = t - e, a + e > p + f && (a = p - e + f), 0 > a ? (this.resizingRight = !1, b = this.resizingLeft = !0) : (0 === a && (a = .1), g.setAttr(" & Chr(34) & "height" & Chr(34) & ", a))) : (a = r - c, a + c > q + d && (a = q - c + d), 0 > a ? (this.resizingRight = !1, b = this.resizingLeft = !0) : (0 === a && (a = .1), g.setAttr(" & Chr(34) & "width" & Chr(34) & ", a))), this.clipDragger(!0)), this.resizingLeft && (m ? (c = e, e = t, e < f && (e = f), e > p + f && (e = p + f), a = !0 === b ? c - e : k + c - e, 0 > a ? (this.resizingRight = !0, this.resizingLeft = !1," & vbCrLf)
        fsT.Writetext("                g.setAttr(" & Chr(34) & "y" & Chr(34) & ", c + k - f)) : (0 === a && (a = .1), g.setAttr(" & Chr(34) & "y" & Chr(34) & ", e - f), g.setAttr(" & Chr(34) & "height" & Chr(34) & ", a))) : (e = r, e < d && (e = d), e > q + d && (e = q + d), a = !0 === b ? c - e : l + c - e, 0 > a ? (this.resizingRight = !0, this.resizingLeft = !1, g.setAttr(" & Chr(34) & "x" & Chr(34) & ", c + l - d)) : (0 === a && (a = .1), g.setAttr(" & Chr(34) & "x" & Chr(34) & ", e - d), g.setAttr(" & Chr(34) & "width" & Chr(34) & ", a))), this.clipDragger(!0)))" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        stopForceClip: function () {" & vbCrLf)
        fsT.Writetext("            this.forceClip = !1" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        clipDragger: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = this.getDBox();" & vbCrLf)
        fsT.Writetext("            if (b) {" & vbCrLf)
        fsT.Writetext("                var c = b.x," & vbCrLf)
        fsT.Writetext("                    e = b.y," & vbCrLf)
        fsT.Writetext("                    d = b.width," & vbCrLf)
        fsT.Writetext("                    b = b.height," & vbCrLf)
        fsT.Writetext("                    f = !1;" & vbCrLf)
        fsT.Writetext("                if (this.rotate) {" & vbCrLf)
        fsT.Writetext("                    if (c = 0, d = this.width + 1, this.clipY != e || this.clipH != b) f = !0" & vbCrLf)
        fsT.Writetext("                } else if (e = 0, b = this.height + 1, this.clipX != c || this.clipW != d) f = !0;" & vbCrLf)
        fsT.Writetext("                f && (this.clipAndUpdate(c, e, d, b), a && (this.updateOnReleaseOnly || this.dispatchScrollbarEvent()))" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        maskGraphs: function () {}," & vbCrLf)
        fsT.Writetext("        clipAndUpdate: function (a, b, c, e) {" & vbCrLf)
        fsT.Writetext("            this.clipX = a;" & vbCrLf)
        fsT.Writetext("            this.clipY = b;" & vbCrLf)
        fsT.Writetext("            this.clipW = c;" & vbCrLf)
        fsT.Writetext("            this.clipH = e;" & vbCrLf)
        fsT.Writetext("            this.selectedBG.clipRect(a, b, c, e);" & vbCrLf)
        fsT.Writetext("            this.updateDragIconPositions();" & vbCrLf)
        fsT.Writetext("            this.maskGraphs(a, b, c, e)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        dispatchScrollbarEvent: function () {" & vbCrLf)
        fsT.Writetext("            if (this.skipEvent) this.skipEvent = !1;" & vbCrLf)
        fsT.Writetext("            else {" & vbCrLf)
        fsT.Writetext("                var a = this.chart;" & vbCrLf)
        fsT.Writetext("                a.hideBalloon();" & vbCrLf)
        fsT.Writetext("                var b = this.getDBox()," & vbCrLf)
        fsT.Writetext("                    c = b.x," & vbCrLf)
        fsT.Writetext("                    e = b.y," & vbCrLf)
        fsT.Writetext("                    d = b.width," & vbCrLf)
        fsT.Writetext("                    b = b.height;" & vbCrLf)
        fsT.Writetext("                this.rotate ? (c = e, d = this.height / b) : d = this.width / d;" & vbCrLf)
        fsT.Writetext("                a = {" & vbCrLf)
        fsT.Writetext("                    type: " & Chr(34) & "zoomed" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                    position: c," & vbCrLf)
        fsT.Writetext("                    chart: a," & vbCrLf)
        fsT.Writetext("                    target: this," & vbCrLf)
        fsT.Writetext("                    multiplier: d" & vbCrLf)
        fsT.Writetext("                };" & vbCrLf)
        fsT.Writetext("                this.fire(a.type, a)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateDragIconPositions: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.getDBox()," & vbCrLf)
        fsT.Writetext("                b = a.x," & vbCrLf)
        fsT.Writetext("                c = a.y," & vbCrLf)
        fsT.Writetext("                e = this.iconLeft," & vbCrLf)
        fsT.Writetext("                d = this.iconRight," & vbCrLf)
        fsT.Writetext("                f, g, k = this.scrollbarHeight;" & vbCrLf)
        fsT.Writetext("            this.rotate ? (f = this.dragIconWidth, g = this.dragIconHeight, e.translate((k - g) / 2, c - f / 2), d.translate((k - g) / 2, c + a.height - f / 2)) : (f = this.dragIconHeight, g = this.dragIconWidth, e.translate(b - g / 2, (k - f) / 2), d.translate(b - g / 2 + a.width, (k - f) / 2))" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        showDragIcons: function () {" & vbCrLf)
        fsT.Writetext("            this.resizeEnabled && (this.iconLeft.show(), this.iconRight.show())" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        hideDragIcons: function () {" & vbCrLf)
        fsT.Writetext("            if (!this.resizingLeft && !this.resizingRight && !this.dragging) {" & vbCrLf)
        fsT.Writetext("                if (this.hideResizeGrips || !this.resizeEnabled) this.iconLeft.hide(), this.iconRight.hide();" & vbCrLf)
        fsT.Writetext("                this.removeCursors()" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        removeCursors: function () {" & vbCrLf)
        fsT.Writetext("            this.chart.setMouseCursor(" & Chr(34) & "auto" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        relativeZoom: function (a, b) {" & vbCrLf)
        fsT.Writetext("            this.enabled && (this.dragger.stop(), this.multiplier = a, this.position = b, this.updateScrollbarSize(b, this.rotate ? b + this.height / a : b + this.width / a), this.clipDragger())" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        destroy: function () {" & vbCrLf)
        fsT.Writetext("            this.clear();" & vbCrLf)
        fsT.Writetext("            d.remove(this.set);" & vbCrLf)
        fsT.Writetext("            d.remove(this.iconRight);" & vbCrLf)
        fsT.Writetext("            d.remove(this.iconLeft)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        clear: function () {}," & vbCrLf)
        fsT.Writetext("        handleDragStart: function () {" & vbCrLf)
        fsT.Writetext("            if (this.enabled) {" & vbCrLf)
        fsT.Writetext("                var a = this.chart;" & vbCrLf)
        fsT.Writetext("                this.dragger.stop();" & vbCrLf)
        fsT.Writetext("                this.removeCursors();" & vbCrLf)
        fsT.Writetext("                this.dragging = !0;" & vbCrLf)
        fsT.Writetext("                var b = this.getDBox();" & vbCrLf)
        fsT.Writetext("                this.rotate ? (this.initialCoord = b.y, this.initialMouse = a.mouseY) : (this.initialCoord = b.x, this.initialMouse = a.mouseX)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleDragStop: function () {" & vbCrLf)
        fsT.Writetext("            this.updateOnReleaseOnly && (this.update(), this.skipEvent = !1, this.dispatchScrollbarEvent());" & vbCrLf)
        fsT.Writetext("            this.dragging = !1;" & vbCrLf)
        fsT.Writetext("            this.mouseIsOver && this.removeCursors();" & vbCrLf)
        fsT.Writetext("            this.update()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleDraggerOver: function () {" & vbCrLf)
        fsT.Writetext("            this.handleMouseOver()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        leftDragStart: function () {" & vbCrLf)
        fsT.Writetext("            this.dragger.stop();" & vbCrLf)
        fsT.Writetext("            this.resizingLeft = !0" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        leftDragStop: function () {" & vbCrLf)
        fsT.Writetext("            this.resizingLeft = !1;" & vbCrLf)
        fsT.Writetext("            this.mouseIsOver || this.removeCursors();" & vbCrLf)
        fsT.Writetext("            this.updateOnRelease()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        rightDragStart: function () {" & vbCrLf)
        fsT.Writetext("            this.dragger.stop();" & vbCrLf)
        fsT.Writetext("            this.resizingRight = !0" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        rightDragStop: function () {" & vbCrLf)
        fsT.Writetext("            this.resizingRight = !1;" & vbCrLf)
        fsT.Writetext("            this.mouseIsOver || this.removeCursors();" & vbCrLf)
        fsT.Writetext("            this.updateOnRelease()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        iconRollOut: function () {" & vbCrLf)
        fsT.Writetext("            this.removeCursors()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        iconRollOver: function () {" & vbCrLf)
        fsT.Writetext("            this.rotate ? this.chart.setMouseCursor(" & Chr(34) & "n-resize" & Chr(34) & ") : this.chart.setMouseCursor(" & Chr(34) & "e-resize" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            this.handleMouseOver()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getDBox: function () {" & vbCrLf)
        fsT.Writetext("            if (this.dragger) return this.dragger.getBBox()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleBgClick: function () {" & vbCrLf)
        fsT.Writetext("            var a = this;" & vbCrLf)
        fsT.Writetext("            if (!a.resizingRight && !a.resizingLeft) {" & vbCrLf)
        fsT.Writetext("                a.zooming = !0;" & vbCrLf)
        fsT.Writetext("                var b, c, e = a.scrollDuration," & vbCrLf)
        fsT.Writetext("                    h = a.dragger;" & vbCrLf)
        fsT.Writetext("                b = a.getDBox();" & vbCrLf)
        fsT.Writetext("                var f = b.height," & vbCrLf)
        fsT.Writetext("                    g = b.width;" & vbCrLf)
        fsT.Writetext("                c = a.chart;" & vbCrLf)
        fsT.Writetext("                var k = a.y," & vbCrLf)
        fsT.Writetext("                    l = a.x," & vbCrLf)
        fsT.Writetext("                    m = a.rotate;" & vbCrLf)
        fsT.Writetext("                m ? (b = " & Chr(34) & "y" & Chr(34) & ", c = c.mouseY - f / 2 - k, c = d.fitToBounds(c, 0, a.height - f)) : (b = " & Chr(34) & "x" & Chr(34) & ", c = c.mouseX - g / 2 - l, c = d.fitToBounds(c, 0, a.width - g));" & vbCrLf)
        fsT.Writetext("                a.updateOnReleaseOnly ? (a.skipEvent = !1, h.setAttr(b, c), a.dispatchScrollbarEvent(), a.clipDragger()) : (c = Math.round(c), m ? h.animate({" & vbCrLf)
        fsT.Writetext("                    y: c" & vbCrLf)
        fsT.Writetext("                }, e, " & Chr(34) & ">" & Chr(34) & ") : h.animate({" & vbCrLf)
        fsT.Writetext("                    x: c" & vbCrLf)
        fsT.Writetext("                }, e, " & Chr(34) & ">" & Chr(34) & "), a.forceClip = !0, clearTimeout(a.forceTO), a.forceTO = setTimeout(function () {" & vbCrLf)
        fsT.Writetext("                    a.stopForceClip.call(a)" & vbCrLf)
        fsT.Writetext("                }, 5E3 * e))" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateOnRelease: function () {" & vbCrLf)
        fsT.Writetext("            this.updateOnReleaseOnly && (this.update(), this.skipEvent = !1, this.dispatchScrollbarEvent())" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleReleaseOutside: function () {" & vbCrLf)
        fsT.Writetext("            if (this.set) {" & vbCrLf)
        fsT.Writetext("                if (this.resizingLeft || this.resizingRight || this.dragging) this.updateOnRelease(), this.removeCursors();" & vbCrLf)
        fsT.Writetext("                this.mouseIsOver = this.dragging = this.resizingRight = this.resizingLeft = !1;" & vbCrLf)
        fsT.Writetext("                this.hideDragIcons();" & vbCrLf)
        fsT.Writetext("                this.update()" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleMouseOver: function () {" & vbCrLf)
        fsT.Writetext("            this.mouseIsOver = !0;" & vbCrLf)
        fsT.Writetext("            this.showDragIcons()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleMouseOut: function () {" & vbCrLf)
        fsT.Writetext("            this.mouseIsOver = !1;" & vbCrLf)
        fsT.Writetext("            this.hideDragIcons()" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    })" & vbCrLf)
        fsT.Writetext("})();" & vbCrLf)
        fsT.Writetext("(function () {" & vbCrLf)
        fsT.Writetext("    var d = window.AmCharts;" & vbCrLf)
        fsT.Writetext("    d.ChartScrollbar = d.Class({" & vbCrLf)
        fsT.Writetext("        inherits: d.SimpleChartScrollbar," & vbCrLf)
        fsT.Writetext("        construct: function (a) {" & vbCrLf)
        fsT.Writetext("            this.cname = " & Chr(34) & "ChartScrollbar" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            d.ChartScrollbar.base.construct.call(this, a);" & vbCrLf)
        fsT.Writetext("            this.enabled = !0;" & vbCrLf)
        fsT.Writetext("            this.graphLineColor = " & Chr(34) & "#BBBBBB" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.graphLineAlpha = 0;" & vbCrLf)
        fsT.Writetext("            this.graphFillColor = " & Chr(34) & "#BBBBBB" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.graphFillAlpha = 1;" & vbCrLf)
        fsT.Writetext("            this.selectedGraphLineColor = " & Chr(34) & "#888888" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.selectedGraphLineAlpha = 0;" & vbCrLf)
        fsT.Writetext("            this.selectedGraphFillColor = " & Chr(34) & "#888888" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.selectedGraphFillAlpha = 1;" & vbCrLf)
        fsT.Writetext("            this.gridCount = 0;" & vbCrLf)
        fsT.Writetext("            this.gridColor = " & Chr(34) & "#FFFFFF" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.gridAlpha = .7;" & vbCrLf)
        fsT.Writetext("            this.skipEvent = this.autoGridCount = !1;" & vbCrLf)
        fsT.Writetext("            this.color = " & Chr(34) & "#FFFFFF" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.scrollbarCreated = !1;" & vbCrLf)
        fsT.Writetext("            this.offset = 0;" & vbCrLf)
        fsT.Writetext("            this.oppositeAxis = !0;" & vbCrLf)
        fsT.Writetext("            d.applyTheme(this, a, this.cname)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        init: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.categoryAxis," & vbCrLf)
        fsT.Writetext("                b = this.chart;" & vbCrLf)
        fsT.Writetext("            a || (this.categoryAxis = a = new d.CategoryAxis);" & vbCrLf)
        fsT.Writetext("            a.chart = b;" & vbCrLf)
        fsT.Writetext("            a.id = " & Chr(34) & "scrollbar" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            a.dateFormats = b.categoryAxis.dateFormats;" & vbCrLf)
        fsT.Writetext("            a.markPeriodChange = b.categoryAxis.markPeriodChange;" & vbCrLf)
        fsT.Writetext("            a.boldPeriodBeginning = b.categoryAxis.boldPeriodBeginning;" & vbCrLf)
        fsT.Writetext("            a.axisItemRenderer = d.RecItem;" & vbCrLf)
        fsT.Writetext("            a.axisRenderer = d.RecAxis;" & vbCrLf)
        fsT.Writetext("            a.guideFillRenderer = d.RecFill;" & vbCrLf)
        fsT.Writetext("            a.inside = !0;" & vbCrLf)
        fsT.Writetext("            a.fontSize = this.fontSize;" & vbCrLf)
        fsT.Writetext("            a.tickLength = 0;" & vbCrLf)
        fsT.Writetext("            a.axisAlpha = 0;" & vbCrLf)
        fsT.Writetext("            d.isString(this.graph) && (this.graph = d.getObjById(b.graphs, this.graph));" & vbCrLf)
        fsT.Writetext("            if (a = this.graph) {" & vbCrLf)
        fsT.Writetext("                var c = this.valueAxis;" & vbCrLf)
        fsT.Writetext("                c || (this.valueAxis = c = new d.ValueAxis, c.visible = !1, c.scrollbar = !0, c.axisItemRenderer = d.RecItem, c.axisRenderer = d.RecAxis, c.guideFillRenderer = d.RecFill, c.labelsEnabled = !1, c.chart = b);" & vbCrLf)
        fsT.Writetext("                b = this.unselectedGraph;" & vbCrLf)
        fsT.Writetext("                b || (b = new d.AmGraph, b.scrollbar = !0, this.unselectedGraph = b, b.negativeBase = a.negativeBase, b.noStepRisers = a.noStepRisers);" & vbCrLf)
        fsT.Writetext("                b = this.selectedGraph;" & vbCrLf)
        fsT.Writetext("                b || (b = new d.AmGraph, b.scrollbar = !0, this.selectedGraph = b, b.negativeBase = a.negativeBase, b.noStepRisers = a.noStepRisers)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            this.scrollbarCreated = !0" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        draw: function () {" & vbCrLf)
        fsT.Writetext("            var a = this;" & vbCrLf)
        fsT.Writetext("            d.ChartScrollbar.base.draw.call(a);" & vbCrLf)
        fsT.Writetext("            if (a.enabled) {" & vbCrLf)
        fsT.Writetext("                a.scrollbarCreated || a.init();" & vbCrLf)
        fsT.Writetext("                var b = a.chart," & vbCrLf)
        fsT.Writetext("                    c = b.chartData," & vbCrLf)
        fsT.Writetext("                    e = a.categoryAxis," & vbCrLf)
        fsT.Writetext("                    h = a.rotate," & vbCrLf)
        fsT.Writetext("                    f = a.x," & vbCrLf)
        fsT.Writetext("                    g = a.y," & vbCrLf)
        fsT.Writetext("                    k = a.width," & vbCrLf)
        fsT.Writetext("                    l = a.height," & vbCrLf)
        fsT.Writetext("                    m = b.categoryAxis," & vbCrLf)
        fsT.Writetext("                    n = a.set;" & vbCrLf)
        fsT.Writetext("                e.setOrientation(!h);" & vbCrLf)
        fsT.Writetext("                e.parseDates = m.parseDates;" & vbCrLf)
        fsT.Writetext("                e.rotate = h;" & vbCrLf)
        fsT.Writetext("                e.equalSpacing = m.equalSpacing;" & vbCrLf)
        fsT.Writetext("                e.minPeriod = m.minPeriod;" & vbCrLf)
        fsT.Writetext("                e.startOnAxis = m.startOnAxis;" & vbCrLf)
        fsT.Writetext("                e.viW = k;" & vbCrLf)
        fsT.Writetext("                e.viH = l;" & vbCrLf)
        fsT.Writetext("                e.width = k;" & vbCrLf)
        fsT.Writetext("                e.height = l;" & vbCrLf)
        fsT.Writetext("                e.gridCount = a.gridCount;" & vbCrLf)
        fsT.Writetext("                e.gridColor = a.gridColor;" & vbCrLf)
        fsT.Writetext("                e.gridAlpha = a.gridAlpha;" & vbCrLf)
        fsT.Writetext("                e.color = a.color;" & vbCrLf)
        fsT.Writetext("                e.tickLength = 0;" & vbCrLf)
        fsT.Writetext("                e.axisAlpha = 0;" & vbCrLf)
        fsT.Writetext("                e.autoGridCount = a.autoGridCount;" & vbCrLf)
        fsT.Writetext("                e.parseDates && !e.equalSpacing && e.timeZoom(b.firstTime, b.lastTime);" & vbCrLf)
        fsT.Writetext("                e.zoom(0, c.length - 1);" & vbCrLf)
        fsT.Writetext("                if (m = a.graph) {" & vbCrLf)
        fsT.Writetext("                    var q = a.valueAxis," & vbCrLf)
        fsT.Writetext("                        p = m.valueAxis;" & vbCrLf)
        fsT.Writetext("                    q.id = p.id;" & vbCrLf)
        fsT.Writetext("                    q.rotate = h;" & vbCrLf)
        fsT.Writetext("                    q.setOrientation(h);" & vbCrLf)
        fsT.Writetext("                    q.width = k;" & vbCrLf)
        fsT.Writetext("                    q.height = l;" & vbCrLf)
        fsT.Writetext("                    q.viW = k;" & vbCrLf)
        fsT.Writetext("                    q.viH = l;" & vbCrLf)
        fsT.Writetext("                    q.dataProvider = c;" & vbCrLf)
        fsT.Writetext("                    q.reversed = p.reversed;" & vbCrLf)
        fsT.Writetext("                    q.logarithmic = p.logarithmic;" & vbCrLf)
        fsT.Writetext("                    q.gridAlpha = 0;" & vbCrLf)
        fsT.Writetext("                    q.axisAlpha = 0;" & vbCrLf)
        fsT.Writetext("                    n.push(q.set);" & vbCrLf)
        fsT.Writetext("                    h ? (q.y = g, q.x = 0) : (q.x = f, q.y = 0);" & vbCrLf)
        fsT.Writetext("                    var f = Infinity," & vbCrLf)
        fsT.Writetext("                        g = -Infinity," & vbCrLf)
        fsT.Writetext("                        r;" & vbCrLf)
        fsT.Writetext("                    for (r = 0; r < c.length; r++) {" & vbCrLf)
        fsT.Writetext("                        var t = c[r].axes[p.id].graphs[m.id].values," & vbCrLf)
        fsT.Writetext("                            u;" & vbCrLf)
        fsT.Writetext("                        for (u in t) if (t.hasOwnProperty(u) && " & Chr(34) & "percents" & Chr(34) & " != u && " & Chr(34) & "total" & Chr(34) & " != u) {" & vbCrLf)
        fsT.Writetext("                            var z = t[u];" & vbCrLf)
        fsT.Writetext("                            z < f && (f = z);" & vbCrLf)
        fsT.Writetext("                            z > g && (g = z)" & vbCrLf)
        fsT.Writetext("                        }" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                    Infinity != f && (q.minimum = f); - Infinity != g && (q.maximum = g + .1 * (g - f));" & vbCrLf)
        fsT.Writetext("                    f == g && (--q.minimum, q.maximum += 1);" & vbCrLf)
        fsT.Writetext("                    void 0 !== a.minimum && (q.minimum = a.minimum);" & vbCrLf)
        fsT.Writetext("                    void 0 !== a.maximum && (q.maximum = a.maximum);" & vbCrLf)
        fsT.Writetext("                    q.zoom(0, c.length - 1);" & vbCrLf)
        fsT.Writetext("                    u = a.unselectedGraph;" & vbCrLf)
        fsT.Writetext("                    u.id = m.id;" & vbCrLf)
        fsT.Writetext("                    u.bcn = " & Chr(34) & "scrollbar-graph-" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                    u.rotate = h;" & vbCrLf)
        fsT.Writetext("                    u.chart = b;" & vbCrLf)
        fsT.Writetext("                    u.data = c;" & vbCrLf)
        fsT.Writetext("                    u.valueAxis = q;" & vbCrLf)
        fsT.Writetext("                    u.chart = m.chart;" & vbCrLf)
        fsT.Writetext("                    u.categoryAxis = a.categoryAxis;" & vbCrLf)
        fsT.Writetext("                    u.periodSpan = m.periodSpan;" & vbCrLf)
        fsT.Writetext("                    u.valueField = m.valueField;" & vbCrLf)
        fsT.Writetext("                    u.openField = m.openField;" & vbCrLf)
        fsT.Writetext("                    u.closeField = m.closeField;" & vbCrLf)
        fsT.Writetext("                    u.highField = m.highField;" & vbCrLf)
        fsT.Writetext("                    u.lowField = m.lowField;" & vbCrLf)
        fsT.Writetext("                    u.lineAlpha = a.graphLineAlpha;" & vbCrLf)
        fsT.Writetext("                    u.lineColorR = a.graphLineColor;" & vbCrLf)
        fsT.Writetext("                    u.fillAlphas = a.graphFillAlpha;" & vbCrLf)
        fsT.Writetext("                    u.fillColorsR = a.graphFillColor;" & vbCrLf)
        fsT.Writetext("                    u.connect = m.connect;" & vbCrLf)
        fsT.Writetext("                    u.hidden = m.hidden;" & vbCrLf)
        fsT.Writetext("                    u.width = k;" & vbCrLf)
        fsT.Writetext("                    u.height = l;" & vbCrLf)
        fsT.Writetext("                    u.pointPosition = m.pointPosition;" & vbCrLf)
        fsT.Writetext("                    u.stepDirection = m.stepDirection;" & vbCrLf)
        fsT.Writetext("                    u.periodSpan = m.periodSpan;" & vbCrLf)
        fsT.Writetext("                    p = a.selectedGraph;" & vbCrLf)
        fsT.Writetext("                    p.id = m.id;" & vbCrLf)
        fsT.Writetext("                    p.bcn = u.bcn + " & Chr(34) & "selected-" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                    p.rotate = h;" & vbCrLf)
        fsT.Writetext("                    p.chart = b;" & vbCrLf)
        fsT.Writetext("                    p.data = c;" & vbCrLf)
        fsT.Writetext("                    p.valueAxis = q;" & vbCrLf)
        fsT.Writetext("                    p.chart = m.chart;" & vbCrLf)
        fsT.Writetext("                    p.categoryAxis = e;" & vbCrLf)
        fsT.Writetext("                    p.periodSpan = m.periodSpan;" & vbCrLf)
        fsT.Writetext("                    p.valueField = m.valueField;" & vbCrLf)
        fsT.Writetext("                    p.openField = m.openField;" & vbCrLf)
        fsT.Writetext("                    p.closeField = m.closeField;" & vbCrLf)
        fsT.Writetext("                    p.highField = m.highField;" & vbCrLf)
        fsT.Writetext("                    p.lowField = m.lowField;" & vbCrLf)
        fsT.Writetext("                    p.lineAlpha = a.selectedGraphLineAlpha;" & vbCrLf)
        fsT.Writetext("                    p.lineColorR = a.selectedGraphLineColor;" & vbCrLf)
        fsT.Writetext("                    p.fillAlphas = a.selectedGraphFillAlpha;" & vbCrLf)
        fsT.Writetext("                    p.fillColorsR = a.selectedGraphFillColor;" & vbCrLf)
        fsT.Writetext("                    p.connect = m.connect;" & vbCrLf)
        fsT.Writetext("                    p.hidden = m.hidden;" & vbCrLf)
        fsT.Writetext("                    p.width = k;" & vbCrLf)
        fsT.Writetext("                    p.height = l;" & vbCrLf)
        fsT.Writetext("                    p.pointPosition = m.pointPosition;" & vbCrLf)
        fsT.Writetext("                    p.stepDirection = m.stepDirection;" & vbCrLf)
        fsT.Writetext("                    p.periodSpan = m.periodSpan;" & vbCrLf)
        fsT.Writetext("                    b = a.graphType;" & vbCrLf)
        fsT.Writetext("                    b || (b = m.type);" & vbCrLf)
        fsT.Writetext("                    u.type = b;" & vbCrLf)
        fsT.Writetext("                    p.type = b;" & vbCrLf)
        fsT.Writetext("                    c = c.length - 1;" & vbCrLf)
        fsT.Writetext("                    u.zoom(0, c);" & vbCrLf)
        fsT.Writetext("                    p.zoom(0, c);" & vbCrLf)
        fsT.Writetext("                    p.set.click(function () {" & vbCrLf)
        fsT.Writetext("                        a.handleBackgroundClick()" & vbCrLf)
        fsT.Writetext("                    }).mouseover(function () {" & vbCrLf)
        fsT.Writetext("                        a.handleMouseOver()" & vbCrLf)
        fsT.Writetext("                    }).mouseout(function () {" & vbCrLf)
        fsT.Writetext("                        a.handleMouseOut()" & vbCrLf)
        fsT.Writetext("                    });" & vbCrLf)
        fsT.Writetext("                    u.set.click(function () {" & vbCrLf)
        fsT.Writetext("                        a.handleBackgroundClick()" & vbCrLf)
        fsT.Writetext("                    }).mouseover(function () {" & vbCrLf)
        fsT.Writetext("                        a.handleMouseOver()" & vbCrLf)
        fsT.Writetext("                    }).mouseout(function () {" & vbCrLf)
        fsT.Writetext("                        a.handleMouseOut()" & vbCrLf)
        fsT.Writetext("                    });" & vbCrLf)
        fsT.Writetext("                    n.push(u.set);" & vbCrLf)
        fsT.Writetext("                    n.push(p.set)" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("                n.push(e.set);" & vbCrLf)
        fsT.Writetext("                n.push(e.labelsSet);" & vbCrLf)
        fsT.Writetext("                a.bg.toBack();" & vbCrLf)
        fsT.Writetext("                a.invisibleBg.toFront();" & vbCrLf)
        fsT.Writetext("                a.dragger.toFront();" & vbCrLf)
        fsT.Writetext("                a.iconLeft.toFront();" & vbCrLf)
        fsT.Writetext("                a.iconRight.toFront()" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        timeZoom: function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            this.startTime = a;" & vbCrLf)
        fsT.Writetext("            this.endTime = b;" & vbCrLf)
        fsT.Writetext("            this.timeDifference = b - a;" & vbCrLf)
        fsT.Writetext("            this.skipEvent = !d.toBoolean(c);" & vbCrLf)
        fsT.Writetext("            this.zoomScrollbar();" & vbCrLf)
        fsT.Writetext("            this.skipEvent || this.dispatchScrollbarEvent()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        zoom: function (a, b) {" & vbCrLf)
        fsT.Writetext("            this.start = a;" & vbCrLf)
        fsT.Writetext("            this.end = b;" & vbCrLf)
        fsT.Writetext("            this.skipEvent = !0;" & vbCrLf)
        fsT.Writetext("            this.zoomScrollbar()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        dispatchScrollbarEvent: function () {" & vbCrLf)
        fsT.Writetext("            if (this.skipEvent) this.skipEvent = !1;" & vbCrLf)
        fsT.Writetext("            else {" & vbCrLf)
        fsT.Writetext("                var a = this.chart.chartData," & vbCrLf)
        fsT.Writetext("                    b, c, e = this.dragger.getBBox();" & vbCrLf)
        fsT.Writetext("                b = e.x;" & vbCrLf)
        fsT.Writetext("                var d = e.y," & vbCrLf)
        fsT.Writetext("                    f = e.width," & vbCrLf)
        fsT.Writetext("                    e = e.height," & vbCrLf)
        fsT.Writetext("                    g = this.chart;" & vbCrLf)
        fsT.Writetext("                this.rotate ? (b = d, c = e) : c = f;" & vbCrLf)
        fsT.Writetext("                f = {" & vbCrLf)
        fsT.Writetext("                    type: " & Chr(34) & "zoomed" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                    target: this" & vbCrLf)
        fsT.Writetext("                };" & vbCrLf)
        fsT.Writetext("                f.chart = g;" & vbCrLf)
        fsT.Writetext("                var k = this.categoryAxis," & vbCrLf)
        fsT.Writetext("                    l = this.stepWidth," & vbCrLf)
        fsT.Writetext("                    d = g.minSelectedTime," & vbCrLf)
        fsT.Writetext("                    e = !1;" & vbCrLf)
        fsT.Writetext("                if (k.parseDates && !k.equalSpacing) {" & vbCrLf)
        fsT.Writetext("                    if (a = g.lastTime, g = g.firstTime, k = Math.round(b / l) + g, b = this.dragging ? k + this.timeDifference : Math.round((b + c) / l) + g, k > b && (k = b), 0 < d && b - k < d && (b = Math.round(k + (b - k) / 2), e = Math.round(d / 2), k = b - e, b += e, e = !0), b > a && (b = a), b - d < k && (k = b - d), k < g && (k = g), k + d > b && (b = k + d), k != this.startTime || b != this.endTime) this.startTime = k, this.endTime = b, f.start = k, f.end = b, f.startDate = new Date(k), f.endDate = new Date(b), this.fire(f.type, f)" & vbCrLf)
        fsT.Writetext("                } else if (k.startOnAxis || (b += l / 2), c -= this.stepWidth / 2, d = k.xToIndex(b), b = k.xToIndex(b + c), d != this.start || this.end != b) k.startOnAxis && (this.resizingRight && d == b && b++, this.resizingLeft && d == b && (0 < d ? d-- : b = 1)), this.start = d, this.end = this.dragging ? this.start + this.difference : b, f.start = this.start, f.end = this.end, k.parseDates && (a[this.start] && (f.startDate = new Date(a[this.start].time)), a[this.end] && (f.endDate = new Date(a[this.end].time))), this.fire(f.type, f);" & vbCrLf)
        fsT.Writetext("                e && this.zoomScrollbar()" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        zoomScrollbar: function () {" & vbCrLf)
        fsT.Writetext("            var a, b;" & vbCrLf)
        fsT.Writetext("            a = this.chart;" & vbCrLf)
        fsT.Writetext("            var c = a.chartData," & vbCrLf)
        fsT.Writetext("                e = this.categoryAxis;" & vbCrLf)
        fsT.Writetext("            e.parseDates && !e.equalSpacing ? (c = e.stepWidth, e = a.firstTime, a = c * (this.startTime - e), b = c * (this.endTime - e)) : (a = c[this.start].x[e.id], b = c[this.end].x[e.id], c = e.stepWidth, e.startOnAxis || (e = c / 2, a -= e, b += e));" & vbCrLf)
        fsT.Writetext("            this.stepWidth = c;" & vbCrLf)
        fsT.Writetext("            this.updateScrollbarSize(a, b)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        maskGraphs: function (a, b, c, e) {" & vbCrLf)
        fsT.Writetext("            var d = this.selectedGraph;" & vbCrLf)
        fsT.Writetext("            d && d.set.clipRect(a, b, c, e)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleDragStart: function () {" & vbCrLf)
        fsT.Writetext("            d.ChartScrollbar.base.handleDragStart.call(this);" & vbCrLf)
        fsT.Writetext("            this.difference = this.end - this.start;" & vbCrLf)
        fsT.Writetext("            this.timeDifference = this.endTime - this.startTime;" & vbCrLf)
        fsT.Writetext("            0 > this.timeDifference && (this.timeDifference = 0)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleBackgroundClick: function () {" & vbCrLf)
        fsT.Writetext("            d.ChartScrollbar.base.handleBackgroundClick.call(this);" & vbCrLf)
        fsT.Writetext("            this.dragging || (this.difference = this.end - this.start, this.timeDifference = this.endTime - this.startTime, 0 > this.timeDifference && (this.timeDifference = 0))" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    })" & vbCrLf)
        fsT.Writetext("})();" & vbCrLf)
        fsT.Writetext("(function () {" & vbCrLf)
        fsT.Writetext("    var d = window.AmCharts;" & vbCrLf)
        fsT.Writetext("    d.AmBalloon = d.Class({" & vbCrLf)
        fsT.Writetext("        construct: function (a) {" & vbCrLf)
        fsT.Writetext("            this.cname = " & Chr(34) & "AmBalloon" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.enabled = !0;" & vbCrLf)
        fsT.Writetext("            this.fillColor = " & Chr(34) & "#FFFFFF" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.fillAlpha = .8;" & vbCrLf)
        fsT.Writetext("            this.borderThickness = 2;" & vbCrLf)
        fsT.Writetext("            this.borderColor = " & Chr(34) & "#FFFFFF" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.borderAlpha = 1;" & vbCrLf)
        fsT.Writetext("            this.cornerRadius = 0;" & vbCrLf)
        fsT.Writetext("            this.maxWidth = 220;" & vbCrLf)
        fsT.Writetext("            this.horizontalPadding = 8;" & vbCrLf)
        fsT.Writetext("            this.verticalPadding = 4;" & vbCrLf)
        fsT.Writetext("            this.pointerWidth = 6;" & vbCrLf)
        fsT.Writetext("            this.pointerOrientation = " & Chr(34) & "V" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.color = " & Chr(34) & "#000000" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.adjustBorderColor = !0;" & vbCrLf)
        fsT.Writetext("            this.show = this.follow = this.showBullet = !1;" & vbCrLf)
        fsT.Writetext("            this.bulletSize = 3;" & vbCrLf)
        fsT.Writetext("            this.shadowAlpha = .4;" & vbCrLf)
        fsT.Writetext("            this.shadowColor =" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "#000000" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.fadeOutDuration = this.animationDuration = .3;" & vbCrLf)
        fsT.Writetext("            this.fixedPosition = !1;" & vbCrLf)
        fsT.Writetext("            this.offsetY = 6;" & vbCrLf)
        fsT.Writetext("            this.offsetX = 1;" & vbCrLf)
        fsT.Writetext("            this.textAlign = " & Chr(34) & "center" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.disableMouseEvents = !0;" & vbCrLf)
        fsT.Writetext("            this.deltaSignX = this.deltaSignY = 1;" & vbCrLf)
        fsT.Writetext("            d.isModern || (this.offsetY *= 1.5);" & vbCrLf)
        fsT.Writetext("            d.applyTheme(this, a, this.cname)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        draw: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.pointToX," & vbCrLf)
        fsT.Writetext("                b = this.pointToY," & vbCrLf)
        fsT.Writetext("                c = this.chart;" & vbCrLf)
        fsT.Writetext("            d.VML && (this.fadeOutDuration = 0);" & vbCrLf)
        fsT.Writetext("            this.xAnim && c.stopAnim(this.xAnim);" & vbCrLf)
        fsT.Writetext("            this.yAnim && c.stopAnim(this.yAnim);" & vbCrLf)
        fsT.Writetext("            if (!isNaN(a)) {" & vbCrLf)
        fsT.Writetext("                var e = this.follow," & vbCrLf)
        fsT.Writetext("                    h = c.container," & vbCrLf)
        fsT.Writetext("                    f = this.set;" & vbCrLf)
        fsT.Writetext("                d.remove(f);" & vbCrLf)
        fsT.Writetext("                this.removeDiv();" & vbCrLf)
        fsT.Writetext("                f = h.set();" & vbCrLf)
        fsT.Writetext("                f.node.style.pointerEvents = " & Chr(34) & "none" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                this.set = f;" & vbCrLf)
        fsT.Writetext("                c.balloonsSet.push(f);" & vbCrLf)
        fsT.Writetext("                if (this.show) {" & vbCrLf)
        fsT.Writetext("                    var g = this.l," & vbCrLf)
        fsT.Writetext("                        k = this.t," & vbCrLf)
        fsT.Writetext("                        l = this.r," & vbCrLf)
        fsT.Writetext("                        m = this.b," & vbCrLf)
        fsT.Writetext("                        n = this.balloonColor," & vbCrLf)
        fsT.Writetext("                        q = this.fillColor," & vbCrLf)
        fsT.Writetext("                        p = this.borderColor," & vbCrLf)
        fsT.Writetext("                        r = q;" & vbCrLf)
        fsT.Writetext("                    void 0 != n && (this.adjustBorderColor ? r = p = n : q = n);" & vbCrLf)
        fsT.Writetext("                    var t = this.horizontalPadding," & vbCrLf)
        fsT.Writetext("                        u = this.verticalPadding," & vbCrLf)
        fsT.Writetext("                        z = this.pointerWidth," & vbCrLf)
        fsT.Writetext("                        v = this.pointerOrientation," & vbCrLf)
        fsT.Writetext("                        w = this.cornerRadius," & vbCrLf)
        fsT.Writetext("                        x = c.fontFamily," & vbCrLf)
        fsT.Writetext("                        A = this.fontSize;" & vbCrLf)
        fsT.Writetext("                    void 0 == A && (A = c.fontSize);" & vbCrLf)
        fsT.Writetext("                    var n = document.createElement(" & Chr(34) & "div" & Chr(34) & ")," & vbCrLf)
        fsT.Writetext("                        B = c.classNamePrefix;" & vbCrLf)
        fsT.Writetext("                    n.className = B + " & Chr(34) & "-balloon-div" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                    this.className && (n.className = n.className + " & Chr(34) & " " & Chr(34) & " + B + " & Chr(34) & "-balloon-div-" & Chr(34) & " + this.className);" & vbCrLf)
        fsT.Writetext("                    B = n.style;" & vbCrLf)
        fsT.Writetext("                    this.disableMouseEvents && (B.pointerEvents = " & Chr(34) & "none" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                    B.position = " & Chr(34) & "absolute" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                    var D = this.minWidth," & vbCrLf)
        fsT.Writetext("                        C = " & Chr(34) & "" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                    isNaN(D) || (C = " & Chr(34) & "min-width:" & Chr(34) & " + (D - 2 * t) + " & Chr(34) & "px; " & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                    n.innerHTML = " & Chr(34) & "<div style='text-align:" & Chr(34) & " + this.textAlign + " & Chr(34) & "; " & Chr(34) & " + C + " & Chr(34) & "max-width:" & Chr(34) & " + this.maxWidth + " & Chr(34) & "px; font-size:" & Chr(34) & " + A + " & Chr(34) & "px; color:" & Chr(34) & " + this.color + " & Chr(34) & "; font-family:" & Chr(34) & " + x + " & Chr(34) & "'>" & Chr(34) & " + this.text + " & Chr(34) & "</div>" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                    c.chartDiv.appendChild(n);" & vbCrLf)
        fsT.Writetext("                    this.textDiv = n;" & vbCrLf)
        fsT.Writetext("                    A = n.offsetWidth;" & vbCrLf)
        fsT.Writetext("                    x = n.offsetHeight;" & vbCrLf)
        fsT.Writetext("                    n.clientHeight && (A = n.clientWidth, x = n.clientHeight);" & vbCrLf)
        fsT.Writetext("                    x += 2 * u;" & vbCrLf)
        fsT.Writetext("                    C = A + 2 * t;" & vbCrLf)
        fsT.Writetext("                    !isNaN(D) && C < D && (C = D);" & vbCrLf)
        fsT.Writetext("                    window.opera && (x += 2);" & vbCrLf)
        fsT.Writetext("                    var I = !1," & vbCrLf)
        fsT.Writetext("                        A = this.offsetY;" & vbCrLf)
        fsT.Writetext("                    c.handDrawn && (A += c.handDrawScatter + 2);" & vbCrLf)
        fsT.Writetext("                    " & Chr(34) & "H" & Chr(34) & " != v ? (D = a - C / 2, b < k + x + 10 && " & Chr(34) & "down" & Chr(34) & " != v ? (I = !0, e && (b += A), A = b + z, this.deltaSignY = -1) : (e && (b -= A), A = b - x - z, this.deltaSignY = 1)) : (2 * z > x && (z = x / 2), A = b - x / 2, a < g + (l - g) / 2 ? (D = a + z, this.deltaSignX = -1) : (D = a - C - z, this.deltaSignX = 1));" & vbCrLf)
        fsT.Writetext("                    A + x >= m && (A = m - x);" & vbCrLf)
        fsT.Writetext("                    A < k && (A = k);" & vbCrLf)
        fsT.Writetext("                    D < g && (D = g);" & vbCrLf)
        fsT.Writetext("                    D + C > l && (D = l - C);" & vbCrLf)
        fsT.Writetext("                    var k = A + u," & vbCrLf)
        fsT.Writetext("                        m = D + t," & vbCrLf)
        fsT.Writetext("                        u = this.shadowAlpha," & vbCrLf)
        fsT.Writetext("                        H = this.shadowColor," & vbCrLf)
        fsT.Writetext("                        t = this.borderThickness," & vbCrLf)
        fsT.Writetext("                        O = this.bulletSize," & vbCrLf)
        fsT.Writetext("                        J;" & vbCrLf)
        fsT.Writetext("                    0 < w || 0 === z ? (0 < u && (a = d.rect(h," & vbCrLf)
        fsT.Writetext("                    C, x, q, 0, t + 1, H, u, this.cornerRadius), d.isModern ? a.translate(1, 1) : a.translate(4, 4), f.push(a)), q = d.rect(h, C, x, q, this.fillAlpha, t, p, this.borderAlpha, this.cornerRadius), this.showBullet && (J = d.circle(h, O, r, this.fillAlpha), f.push(J))) : (r = [], w = [], " & Chr(34) & "H" & Chr(34) & " != v ? (g = a - D, g > C - z && (g = C - z), g < z && (g = z), r = [0, g - z, a - D, g + z, C, C, 0, 0], w = I ? [0, 0, b - A, 0, 0, x, x, 0] : [x, x, b - A, x, x, 0, 0, x]) : (r = b - A, r > x - z && (r = x - z), r < z && (r = z), w = [0, r - z, b - A, r + z, x, x, 0, 0], r = a < g + (l - g) / 2 ? [0, 0, D < a ? 0 : a - D, 0, 0, C, C, 0] : [C, C, D + C > a ? C : a - D, C, C, 0, 0, C]), 0 < u && (a = d.polygon(h, r, w, q," & vbCrLf)
        fsT.Writetext("                    0, t, H, u), a.translate(1, 1), f.push(a)), q = d.polygon(h, r, w, q, this.fillAlpha, t, p, this.borderAlpha));" & vbCrLf)
        fsT.Writetext("                    this.bg = q;" & vbCrLf)
        fsT.Writetext("                    f.push(q);" & vbCrLf)
        fsT.Writetext("                    q.toFront();" & vbCrLf)
        fsT.Writetext("                    d.setCN(c, q, " & Chr(34) & "balloon-bg" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                    this.className && d.setCN(c, q, " & Chr(34) & "balloon-bg-" & Chr(34) & " + this.className);" & vbCrLf)
        fsT.Writetext("                    h = 1 * this.deltaSignX;" & vbCrLf)
        fsT.Writetext("                    B.left = m + " & Chr(34) & "px" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                    B.top = k + " & Chr(34) & "px" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                    f.translate(D - h, A);" & vbCrLf)
        fsT.Writetext("                    q = q.getBBox();" & vbCrLf)
        fsT.Writetext("                    this.bottom = A + x + 1;" & vbCrLf)
        fsT.Writetext("                    this.yPos = q.y + A;" & vbCrLf)
        fsT.Writetext("                    J && J.translate(this.pointToX - D + h, b - A);" & vbCrLf)
        fsT.Writetext("                    b = this.animationDuration;" & vbCrLf)
        fsT.Writetext("                    0 < this.animationDuration && !e && !isNaN(this.prevX) && (f.translate(this.prevX, this.prevY), f.animate({" & vbCrLf)
        fsT.Writetext("                        translate: D - h + " & Chr(34) & "," & Chr(34) & " + A" & vbCrLf)
        fsT.Writetext("                    }, b, " & Chr(34) & "easeOutSine" & Chr(34) & "), n && (B.left = this.prevTX + " & Chr(34) & "px" & Chr(34) & ", B.top = this.prevTY + " & Chr(34) & "px" & Chr(34) & ", this.xAnim = c.animate({" & vbCrLf)
        fsT.Writetext("                        node: n" & vbCrLf)
        fsT.Writetext("                    }, " & Chr(34) & "left" & Chr(34) & ", this.prevTX, m, b, " & Chr(34) & "easeOutSine" & Chr(34) & ", " & Chr(34) & "px" & Chr(34) & "), this.yAnim = c.animate({" & vbCrLf)
        fsT.Writetext("                        node: n" & vbCrLf)
        fsT.Writetext("                    }, " & Chr(34) & "top" & Chr(34) & ", this.prevTY, k, b, " & Chr(34) & "easeOutSine" & Chr(34) & ", " & Chr(34) & "px" & Chr(34) & ")));" & vbCrLf)
        fsT.Writetext("                    this.prevX = D - h;" & vbCrLf)
        fsT.Writetext("                    this.prevY = A;" & vbCrLf)
        fsT.Writetext("                    this.prevTX = m;" & vbCrLf)
        fsT.Writetext("                    this.prevTY = k" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        followMouse: function () {" & vbCrLf)
        fsT.Writetext("            if (this.follow && this.show) {" & vbCrLf)
        fsT.Writetext("                var a = this.chart.mouseX - this.offsetX * this.deltaSignX," & vbCrLf)
        fsT.Writetext("                    b = this.chart.mouseY;" & vbCrLf)
        fsT.Writetext("                this.pointToX = a;" & vbCrLf)
        fsT.Writetext("                this.pointToY = b;" & vbCrLf)
        fsT.Writetext("                if (a != this.previousX || b != this.previousY) if (this.previousX = a, this.previousY = b, 0 === this.cornerRadius) this.draw();" & vbCrLf)
        fsT.Writetext("                else {" & vbCrLf)
        fsT.Writetext("                    var c = this.set;" & vbCrLf)
        fsT.Writetext("                    if (c) {" & vbCrLf)
        fsT.Writetext("                        var e = c.getBBox()," & vbCrLf)
        fsT.Writetext("                            a = a - e.width / 2," & vbCrLf)
        fsT.Writetext("                            d = b - e.height - 10;" & vbCrLf)
        fsT.Writetext("                        a < this.l && (a = this.l);" & vbCrLf)
        fsT.Writetext("                        a > this.r - e.width && (a = this.r - e.width);" & vbCrLf)
        fsT.Writetext("                        d < this.t && (d = b + 10);" & vbCrLf)
        fsT.Writetext("                        c.translate(a, d);" & vbCrLf)
        fsT.Writetext("                        b = this.textDiv.style;" & vbCrLf)
        fsT.Writetext("                        b.left = a + this.horizontalPadding + " & Chr(34) & "px" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                        b.top = d + this.verticalPadding + " & Chr(34) & "px" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        changeColor: function (a) {" & vbCrLf)
        fsT.Writetext("            this.balloonColor = a" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        setBounds: function (a, b, c, e) {" & vbCrLf)
        fsT.Writetext("            this.l = a;" & vbCrLf)
        fsT.Writetext("            this.t = b;" & vbCrLf)
        fsT.Writetext("            this.r = c;" & vbCrLf)
        fsT.Writetext("            this.b = e;" & vbCrLf)
        fsT.Writetext("            this.destroyTO && clearTimeout(this.destroyTO)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        showBalloon: function (a) {" & vbCrLf)
        fsT.Writetext("            this.text = a;" & vbCrLf)
        fsT.Writetext("            this.show = !0;" & vbCrLf)
        fsT.Writetext("            this.destroyTO && clearTimeout(this.destroyTO);" & vbCrLf)
        fsT.Writetext("            a = this.chart;" & vbCrLf)
        fsT.Writetext("            this.fadeAnim1 && a.stopAnim(this.fadeAnim1);" & vbCrLf)
        fsT.Writetext("            this.fadeAnim2 && a.stopAnim(this.fadeAnim2);" & vbCrLf)
        fsT.Writetext("            this.draw()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        hide: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = this;" & vbCrLf)
        fsT.Writetext("            isNaN(a) && (a = b.fadeOutDuration);" & vbCrLf)
        fsT.Writetext("            var c = b.chart;" & vbCrLf)
        fsT.Writetext("            if (0 < a) {" & vbCrLf)
        fsT.Writetext("                b.destroyTO && clearTimeout(b.destroyTO);" & vbCrLf)
        fsT.Writetext("                b.destroyTO = setTimeout(function () {" & vbCrLf)
        fsT.Writetext("                    b.destroy.call(b)" & vbCrLf)
        fsT.Writetext("                }, 1E3 * a);" & vbCrLf)
        fsT.Writetext("                b.follow = !1;" & vbCrLf)
        fsT.Writetext("                b.show = !1;" & vbCrLf)
        fsT.Writetext("                var e = b.set;" & vbCrLf)
        fsT.Writetext("                e && (e.setAttr(" & Chr(34) & "opacity" & Chr(34) & ", b.fillAlpha), b.fadeAnim1 = e.animate({" & vbCrLf)
        fsT.Writetext("                    opacity: 0" & vbCrLf)
        fsT.Writetext("                }, a, " & Chr(34) & "easeInSine" & Chr(34) & "));" & vbCrLf)
        fsT.Writetext("                b.textDiv && (b.fadeAnim2 = c.animate({" & vbCrLf)
        fsT.Writetext("                    node: b.textDiv" & vbCrLf)
        fsT.Writetext("                }," & vbCrLf)
        fsT.Writetext("                    " & Chr(34) & "opacity" & Chr(34) & ", 1, 0, a, " & Chr(34) & "easeInSine" & Chr(34) & ", " & Chr(34) & "" & Chr(34) & "))" & vbCrLf)
        fsT.Writetext("            } else b.show = !1, b.follow = !1, b.destroy()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        setPosition: function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            this.pointToX = a;" & vbCrLf)
        fsT.Writetext("            this.pointToY = b;" & vbCrLf)
        fsT.Writetext("            c && (a == this.previousX && b == this.previousY || this.draw());" & vbCrLf)
        fsT.Writetext("            this.previousX = a;" & vbCrLf)
        fsT.Writetext("            this.previousY = b" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        followCursor: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = this;" & vbCrLf)
        fsT.Writetext("            (b.follow = a) ? (b.pShowBullet = b.showBullet, b.showBullet = !1) : void 0 !== b.pShowBullet && (b.showBullet = b.pShowBullet);" & vbCrLf)
        fsT.Writetext("            clearInterval(b.interval);" & vbCrLf)
        fsT.Writetext("            var c = b.chart.mouseX," & vbCrLf)
        fsT.Writetext("                e = b.chart.mouseY;" & vbCrLf)
        fsT.Writetext("            !isNaN(c) && a && (b.pointToX = c - b.offsetX * b.deltaSignX, b.pointToY = e, b.followMouse()," & vbCrLf)
        fsT.Writetext("            b.interval = setInterval(function () {" & vbCrLf)
        fsT.Writetext("                b.followMouse.call(b)" & vbCrLf)
        fsT.Writetext("            }, 40))" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        removeDiv: function () {" & vbCrLf)
        fsT.Writetext("            if (this.textDiv) {" & vbCrLf)
        fsT.Writetext("                var a = this.textDiv.parentNode;" & vbCrLf)
        fsT.Writetext("                a && a.removeChild(this.textDiv)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        destroy: function () {" & vbCrLf)
        fsT.Writetext("            clearInterval(this.interval);" & vbCrLf)
        fsT.Writetext("            d.remove(this.set);" & vbCrLf)
        fsT.Writetext("            this.removeDiv();" & vbCrLf)
        fsT.Writetext("            this.set = null" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    })" & vbCrLf)
        fsT.Writetext("})();" & vbCrLf)
        fsT.Writetext("(function () {" & vbCrLf)
        fsT.Writetext("    var d = window.AmCharts;" & vbCrLf)
        fsT.Writetext("    d.AmCoordinateChart = d.Class({" & vbCrLf)
        fsT.Writetext("        inherits: d.AmChart," & vbCrLf)
        fsT.Writetext("        construct: function (a) {" & vbCrLf)
        fsT.Writetext("            d.AmCoordinateChart.base.construct.call(this, a);" & vbCrLf)
        fsT.Writetext("            this.theme = a;" & vbCrLf)
        fsT.Writetext("            this.createEvents(" & Chr(34) & "rollOverGraphItem" & Chr(34) & ", " & Chr(34) & "rollOutGraphItem" & Chr(34) & ", " & Chr(34) & "clickGraphItem" & Chr(34) & ", " & Chr(34) & "doubleClickGraphItem" & Chr(34) & ", " & Chr(34) & "rightClickGraphItem" & Chr(34) & ", " & Chr(34) & "clickGraph" & Chr(34) & ", " & Chr(34) & "rollOverGraph" & Chr(34) & ", " & Chr(34) & "rollOutGraph" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            this.startAlpha = 1;" & vbCrLf)
        fsT.Writetext("            this.startDuration = 0;" & vbCrLf)
        fsT.Writetext("            this.startEffect = " & Chr(34) & "elastic" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.sequencedAnimation = !0;" & vbCrLf)
        fsT.Writetext("            this.colors = " & Chr(34) & "#FF6600 #FCD202 #B0DE09 #0D8ECF #2A0CD0 #CD0D74 #CC0000 #00CC00 #0000CC #DDDDDD #999999 #333333 #990000" & Chr(34) & ".split(" & Chr(34) & " " & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            this.balloonDateFormat = " & Chr(34) & "MMM DD, YYYY" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.valueAxes = [];" & vbCrLf)
        fsT.Writetext("            this.graphs = [];" & vbCrLf)
        fsT.Writetext("            this.guides = [];" & vbCrLf)
        fsT.Writetext("            this.gridAboveGraphs = !1;" & vbCrLf)
        fsT.Writetext("            d.applyTheme(this, a, " & Chr(34) & "AmCoordinateChart" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        initChart: function () {" & vbCrLf)
        fsT.Writetext("            d.AmCoordinateChart.base.initChart.call(this);" & vbCrLf)
        fsT.Writetext("            var a = this.categoryAxis;" & vbCrLf)
        fsT.Writetext("            a && (this.categoryAxis = d.processObject(a, d.CategoryAxis, this.theme));" & vbCrLf)
        fsT.Writetext("            this.processValueAxes();" & vbCrLf)
        fsT.Writetext("            this.createValueAxes();" & vbCrLf)
        fsT.Writetext("            this.processGraphs();" & vbCrLf)
        fsT.Writetext("            this.processGuides();" & vbCrLf)
        fsT.Writetext("            d.VML && (this.startAlpha = 1);" & vbCrLf)
        fsT.Writetext("            this.setLegendData(this.graphs);" & vbCrLf)
        fsT.Writetext("            this.gridAboveGraphs && this.gridSet.toFront()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        createValueAxes: function () {" & vbCrLf)
        fsT.Writetext("            if (0 === this.valueAxes.length) {" & vbCrLf)
        fsT.Writetext("                var a = new d.ValueAxis;" & vbCrLf)
        fsT.Writetext("                this.addValueAxis(a)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        parseData: function () {" & vbCrLf)
        fsT.Writetext("            this.processValueAxes();" & vbCrLf)
        fsT.Writetext("            this.processGraphs()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        parseSerialData: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = this.graphs," & vbCrLf)
        fsT.Writetext("                c, e = {}, h = this.seriesIdField;" & vbCrLf)
        fsT.Writetext("            h || (h = this.categoryField);" & vbCrLf)
        fsT.Writetext("            this.chartData = [];" & vbCrLf)
        fsT.Writetext("            if (a) {" & vbCrLf)
        fsT.Writetext("                var f = !1," & vbCrLf)
        fsT.Writetext("                    g, k = this.categoryAxis," & vbCrLf)
        fsT.Writetext("                    l, m, n;" & vbCrLf)
        fsT.Writetext("                k && (f = k.parseDates, l = k.forceShowField, n = k.classNameField, m = k.labelColorField, g = k.categoryFunction);" & vbCrLf)
        fsT.Writetext("                var q, p, r = {}, t;" & vbCrLf)
        fsT.Writetext("                f && (c = d.extractPeriod(k.minPeriod), q = c.period, p = c.count, t = d.getPeriodDuration(q, p));" & vbCrLf)
        fsT.Writetext("                var u = {};" & vbCrLf)
        fsT.Writetext("                this.lookupTable = u;" & vbCrLf)
        fsT.Writetext("                var z, v = this.dataDateFormat," & vbCrLf)
        fsT.Writetext("                    w = {};" & vbCrLf)
        fsT.Writetext("                for (z = 0; z < a.length; z++) {" & vbCrLf)
        fsT.Writetext("                    var x = {}, A = a[z];" & vbCrLf)
        fsT.Writetext("                    c = A[this.categoryField];" & vbCrLf)
        fsT.Writetext("                    x.dataContext = A;" & vbCrLf)
        fsT.Writetext("                    x.category = g ? g(c, A, k) : String(c);" & vbCrLf)
        fsT.Writetext("                    l && (x.forceShow = A[l]);" & vbCrLf)
        fsT.Writetext("                    n && (x.className = A[n]);" & vbCrLf)
        fsT.Writetext("                    m && (x.labelColor = A[m]);" & vbCrLf)
        fsT.Writetext("                    u[A[h]] = x;" & vbCrLf)
        fsT.Writetext("                    if (f && (k.categoryFunction ? c = k.categoryFunction(c, A, k) : (!v || c instanceof Date || (c = c.toString() + " & Chr(34) & " |" & Chr(34) & "), c = d.getDate(c, v, k.minPeriod)), c = d.resetDateToMin(c, q, p, k.firstDayOfWeek), x.category = c, x.time = c.getTime(), isNaN(x.time))) continue;" & vbCrLf)
        fsT.Writetext("                    var B = this.valueAxes;" & vbCrLf)
        fsT.Writetext("                    x.axes = {};" & vbCrLf)
        fsT.Writetext("                    x.x = {};" & vbCrLf)
        fsT.Writetext("                    var D;" & vbCrLf)
        fsT.Writetext("                    for (D = 0; D < B.length; D++) {" & vbCrLf)
        fsT.Writetext("                        var C = B[D].id;" & vbCrLf)
        fsT.Writetext("                        x.axes[C] = {};" & vbCrLf)
        fsT.Writetext("                        x.axes[C].graphs = {};" & vbCrLf)
        fsT.Writetext("                        var I;" & vbCrLf)
        fsT.Writetext("                        for (I = 0; I < b.length; I++) {" & vbCrLf)
        fsT.Writetext("                            c = b[I];" & vbCrLf)
        fsT.Writetext("                            var H = c.id," & vbCrLf)
        fsT.Writetext("                                O = 1.1;" & vbCrLf)
        fsT.Writetext("                            isNaN(c.gapPeriod) || (O = c.gapPeriod);" & vbCrLf)
        fsT.Writetext("                            var J = c.periodValue;" & vbCrLf)
        fsT.Writetext("                            if (c.valueAxis.id == C) {" & vbCrLf)
        fsT.Writetext("                                x.axes[C].graphs[H] = {};" & vbCrLf)
        fsT.Writetext("                                var da = {};" & vbCrLf)
        fsT.Writetext("                                da.index = z;" & vbCrLf)
        fsT.Writetext("                                var pa = A;" & vbCrLf)
        fsT.Writetext("                                c.dataProvider && (pa = e);" & vbCrLf)
        fsT.Writetext("                                da.values = this.processValues(pa, c, J);" & vbCrLf)
        fsT.Writetext("                                !c.connect && w && w[H] && x.time - r[H] >= t * O && (w[H].gap = !0);" & vbCrLf)
        fsT.Writetext("                                this.processFields(c, da, pa);" & vbCrLf)
        fsT.Writetext("                                da.category = x.category;" & vbCrLf)
        fsT.Writetext("                                da.serialDataItem = x;" & vbCrLf)
        fsT.Writetext("                                da.graph = c;" & vbCrLf)
        fsT.Writetext("                                x.axes[C].graphs[H] = da;" & vbCrLf)
        fsT.Writetext("                                r[H] = x.time;" & vbCrLf)
        fsT.Writetext("                                w[H] = da" & vbCrLf)
        fsT.Writetext("                            }" & vbCrLf)
        fsT.Writetext("                        }" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                    this.chartData[z] = x" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            for (a = 0; a < b.length; a++) c = b[a], c.dataProvider && this.parseGraphData(c)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        processValues: function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            var e = {}, h, f = !1;" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "candlestick" & Chr(34) & " != b.type && " & Chr(34) & "ohlc" & Chr(34) & " != b.type || " & Chr(34) & "" & Chr(34) & " === c || (f = !0);" & vbCrLf)
        fsT.Writetext("            for (var g = " & Chr(34) & "value error open close low high" & Chr(34) & ".split(" & Chr(34) & " " & Chr(34) & "), k = 0; k < g.length; k++) {" & vbCrLf)
        fsT.Writetext("                var l = g[k];" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "value" & Chr(34) & " != l && " & Chr(34) & "error" & Chr(34) & " != l && f && (c = l.charAt(0).toUpperCase() + l.slice(1));" & vbCrLf)
        fsT.Writetext("                var m = a[b[l + " & Chr(34) & "Field" & Chr(34) & "] + c];" & vbCrLf)
        fsT.Writetext("                h = Number(m);" & vbCrLf)
        fsT.Writetext("                isNaN(h) || (e[l] = h);" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "date" & Chr(34) & " == b.valueAxis.type && void 0 !== m && (h = d.getDate(m, b.chart.dataDateFormat)," & vbCrLf)
        fsT.Writetext("                e[l] = h.getTime())" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            return e" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        parseGraphData: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = a.dataProvider," & vbCrLf)
        fsT.Writetext("                c = a.seriesIdField;" & vbCrLf)
        fsT.Writetext("            c || (c = this.seriesIdField);" & vbCrLf)
        fsT.Writetext("            c || (c = this.categoryField);" & vbCrLf)
        fsT.Writetext("            var e;" & vbCrLf)
        fsT.Writetext("            for (e = 0; e < b.length; e++) {" & vbCrLf)
        fsT.Writetext("                var d = b[e]," & vbCrLf)
        fsT.Writetext("                    f = this.lookupTable[String(d[c])]," & vbCrLf)
        fsT.Writetext("                    g = a.valueAxis.id;" & vbCrLf)
        fsT.Writetext("                f && (g = f.axes[g].graphs[a.id], g.serialDataItem = f, g.values = this.processValues(d, a, a.periodValue), this.processFields(a, g, d))" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        addValueAxis: function (a) {" & vbCrLf)
        fsT.Writetext("            a.chart = this;" & vbCrLf)
        fsT.Writetext("            this.valueAxes.push(a);" & vbCrLf)
        fsT.Writetext("            this.validateData()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        removeValueAxesAndGraphs: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.valueAxes," & vbCrLf)
        fsT.Writetext("                b;" & vbCrLf)
        fsT.Writetext("            for (b = a.length - 1; - 1 < b; b--) this.removeValueAxis(a[b])" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        removeValueAxis: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = this.graphs," & vbCrLf)
        fsT.Writetext("                c;" & vbCrLf)
        fsT.Writetext("            for (c = b.length - 1; 0 <= c; c--) {" & vbCrLf)
        fsT.Writetext("                var e = b[c];" & vbCrLf)
        fsT.Writetext("                e && e.valueAxis == a && this.removeGraph(e)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            b = this.valueAxes;" & vbCrLf)
        fsT.Writetext("            for (c = b.length - 1; 0 <= c; c--) b[c] == a && b.splice(c, 1);" & vbCrLf)
        fsT.Writetext("            this.validateData()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        addGraph: function (a) {" & vbCrLf)
        fsT.Writetext("            this.graphs.push(a);" & vbCrLf)
        fsT.Writetext("            this.chooseGraphColor(a, this.graphs.length - 1);" & vbCrLf)
        fsT.Writetext("            this.validateData()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        removeGraph: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = this.graphs," & vbCrLf)
        fsT.Writetext("                c;" & vbCrLf)
        fsT.Writetext("            for (c = b.length - 1; 0 <= c; c--) b[c] == a && (b.splice(c, 1), a.destroy());" & vbCrLf)
        fsT.Writetext("            this.validateData()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        processValueAxes: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.valueAxes," & vbCrLf)
        fsT.Writetext("                b;" & vbCrLf)
        fsT.Writetext("            for (b = 0; b < a.length; b++) {" & vbCrLf)
        fsT.Writetext("                var c = a[b]," & vbCrLf)
        fsT.Writetext("                    c = d.processObject(c, d.ValueAxis, this.theme);" & vbCrLf)
        fsT.Writetext("                a[b] = c;" & vbCrLf)
        fsT.Writetext("                c.chart = this;" & vbCrLf)
        fsT.Writetext("                c.id || (c.id = " & Chr(34) & "valueAxisAuto" & Chr(34) & " + b + " & Chr(34) & "_" & Chr(34) & " + (new Date).getTime());" & vbCrLf)
        fsT.Writetext("                void 0 === c.usePrefixes && (c.usePrefixes = this.usePrefixes)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        processGuides: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.guides," & vbCrLf)
        fsT.Writetext("                b = this.categoryAxis;" & vbCrLf)
        fsT.Writetext("            if (a) for (var c = 0; c < a.length; c++) {" & vbCrLf)
        fsT.Writetext("                var e = a[c];" & vbCrLf)
        fsT.Writetext("                (void 0 !== e.category || void 0 !== e.date) && b && b.addGuide(e);" & vbCrLf)
        fsT.Writetext("                e.id || (e.id = " & Chr(34) & "guideAuto" & Chr(34) & " + c + " & Chr(34) & "_" & Chr(34) & " + (new Date).getTime());" & vbCrLf)
        fsT.Writetext("                var h = e.valueAxis;" & vbCrLf)
        fsT.Writetext("                h ? (d.isString(h) && (h = this.getValueAxisById(h)), h ? h.addGuide(e) : this.valueAxes[0].addGuide(e)) : isNaN(e.value) || this.valueAxes[0].addGuide(e)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        processGraphs: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.graphs," & vbCrLf)
        fsT.Writetext("                b;" & vbCrLf)
        fsT.Writetext("            for (b = 0; b < a.length; b++) {" & vbCrLf)
        fsT.Writetext("                var c = a[b]," & vbCrLf)
        fsT.Writetext("                    c = d.processObject(c, d.AmGraph, this.theme);" & vbCrLf)
        fsT.Writetext("                a[b] = c;" & vbCrLf)
        fsT.Writetext("                this.chooseGraphColor(c, b);" & vbCrLf)
        fsT.Writetext("                c.chart = this;" & vbCrLf)
        fsT.Writetext("                d.isString(c.valueAxis) && (c.valueAxis = this.getValueAxisById(c.valueAxis));" & vbCrLf)
        fsT.Writetext("                c.valueAxis || (c.valueAxis = this.valueAxes[0]);" & vbCrLf)
        fsT.Writetext("                c.id || (c.id = " & Chr(34) & "graphAuto" & Chr(34) & " + b + " & Chr(34) & "_" & Chr(34) & " + (new Date).getTime())" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        formatString: function (a," & vbCrLf)
        fsT.Writetext("        b, c) {" & vbCrLf)
        fsT.Writetext("            var e = b.graph," & vbCrLf)
        fsT.Writetext("                h = e.valueAxis;" & vbCrLf)
        fsT.Writetext("            h.duration && b.values.value && (h = d.formatDuration(b.values.value, h.duration, " & Chr(34) & "" & Chr(34) & ", h.durationUnits, h.maxInterval, h.numberFormatter), a = a.split(" & Chr(34) & "[[value]]" & Chr(34) & ").join(h));" & vbCrLf)
        fsT.Writetext("            a = d.massReplace(a, {" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "[[title]]" & Chr(34) & ": e.title," & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "[[description]]" & Chr(34) & ": b.description" & vbCrLf)
        fsT.Writetext("            });" & vbCrLf)
        fsT.Writetext("            a = c ? d.fixNewLines(a) : d.fixBrakes(a);" & vbCrLf)
        fsT.Writetext("            return a = d.cleanFromEmpty(a)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getBalloonColor: function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            var e = a.lineColor," & vbCrLf)
        fsT.Writetext("                d = a.balloonColor;" & vbCrLf)
        fsT.Writetext("            c && (d = e);" & vbCrLf)
        fsT.Writetext("            c = a.fillColorsR;" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "object" & Chr(34) & " == typeof c ? e = c[0] : void 0 !== c && (e = c);" & vbCrLf)
        fsT.Writetext("            b.isNegative && (c = a.negativeLineColor," & vbCrLf)
        fsT.Writetext("            a = a.negativeFillColors, " & Chr(34) & "object" & Chr(34) & " == typeof a ? c = a[0] : void 0 !== a && (c = a), void 0 !== c && (e = c));" & vbCrLf)
        fsT.Writetext("            void 0 !== b.color && (e = b.color);" & vbCrLf)
        fsT.Writetext("            void 0 === d && (d = e);" & vbCrLf)
        fsT.Writetext("            return d" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getGraphById: function (a) {" & vbCrLf)
        fsT.Writetext("            return d.getObjById(this.graphs, a)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getValueAxisById: function (a) {" & vbCrLf)
        fsT.Writetext("            return d.getObjById(this.valueAxes, a)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        processFields: function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            if (a.itemColors) {" & vbCrLf)
        fsT.Writetext("                var e = a.itemColors," & vbCrLf)
        fsT.Writetext("                    h = b.index;" & vbCrLf)
        fsT.Writetext("                b.color = h < e.length ? e[h] : d.randomColor()" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            e = " & Chr(34) & "lineColor color alpha fillColors description bullet customBullet bulletSize bulletConfig url labelColor dashLength pattern gap className" & Chr(34) & ".split(" & Chr(34) & " " & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            for (h = 0; h < e.length; h++) {" & vbCrLf)
        fsT.Writetext("                var f = e[h]," & vbCrLf)
        fsT.Writetext("                    g = a[f + " & Chr(34) & "Field" & Chr(34) & "];" & vbCrLf)
        fsT.Writetext("                g && (g = c[g], d.isDefined(g) && (b[f] = g))" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            b.dataContext = c" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        chooseGraphColor: function (a, b) {" & vbCrLf)
        fsT.Writetext("            if (a.lineColor) a.lineColorR = a.lineColor;" & vbCrLf)
        fsT.Writetext("            else {" & vbCrLf)
        fsT.Writetext("                var c;" & vbCrLf)
        fsT.Writetext("                c = this.colors.length > b ? this.colors[b] : d.randomColor();" & vbCrLf)
        fsT.Writetext("                a.lineColorR = c" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            a.fillColorsR = a.fillColors ? a.fillColors : a.lineColorR;" & vbCrLf)
        fsT.Writetext("            a.bulletBorderColorR = a.bulletBorderColor ? a.bulletBorderColor : a.useLineColorForBulletBorder ? a.lineColorR : a.bulletColor;" & vbCrLf)
        fsT.Writetext("            a.bulletColorR = a.bulletColor ? a.bulletColor : a.lineColorR;" & vbCrLf)
        fsT.Writetext("            if (c = this.patterns) a.pattern = c[b]" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleLegendEvent: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = a.type;" & vbCrLf)
        fsT.Writetext("            a = a.dataItem;" & vbCrLf)
        fsT.Writetext("            if (!this.legend.data && a) {" & vbCrLf)
        fsT.Writetext("                var c = a.hidden," & vbCrLf)
        fsT.Writetext("                    e = a.showBalloon;" & vbCrLf)
        fsT.Writetext("                switch (b) {" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "clickMarker" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        this.textClickEnabled && (e ? this.hideGraphsBalloon(a) : this.showGraphsBalloon(a));" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "clickLabel" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        e ? this.hideGraphsBalloon(a) : this.showGraphsBalloon(a);" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "rollOverItem" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        c || this.highlightGraph(a);" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "rollOutItem" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        c || this.unhighlightGraph();" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "hideItem" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        this.hideGraph(a);" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "showItem" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        this.showGraph(a)" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        highlightGraph: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = this.graphs," & vbCrLf)
        fsT.Writetext("                c, e = .2;" & vbCrLf)
        fsT.Writetext("            this.legend && (e = this.legend.rollOverGraphAlpha);" & vbCrLf)
        fsT.Writetext("            if (1 != e) for (c = 0; c < b.length; c++) {" & vbCrLf)
        fsT.Writetext("                var d = b[c];" & vbCrLf)
        fsT.Writetext("                d != a && d.changeOpacity(e)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        unhighlightGraph: function () {" & vbCrLf)
        fsT.Writetext("            var a;" & vbCrLf)
        fsT.Writetext("            this.legend && (a = this.legend.rollOverGraphAlpha);" & vbCrLf)
        fsT.Writetext("            if (1 != a) {" & vbCrLf)
        fsT.Writetext("                a = this.graphs;" & vbCrLf)
        fsT.Writetext("                var b;" & vbCrLf)
        fsT.Writetext("                for (b = 0; b < a.length; b++) a[b].changeOpacity(1)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        showGraph: function (a) {" & vbCrLf)
        fsT.Writetext("            a.switchable && (a.hidden = !1, this.dataChanged = !0, " & Chr(34) & "xy" & Chr(34) & " != this.type && (this.marginsUpdated = !1), this.chartCreated && this.initChart())" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        hideGraph: function (a) {" & vbCrLf)
        fsT.Writetext("            a.switchable && (this.dataChanged = !0," & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "xy" & Chr(34) & " != this.type && (this.marginsUpdated = !1), a.hidden = !0, this.chartCreated && this.initChart())" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        hideGraphsBalloon: function (a) {" & vbCrLf)
        fsT.Writetext("            a.showBalloon = !1;" & vbCrLf)
        fsT.Writetext("            this.updateLegend()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        showGraphsBalloon: function (a) {" & vbCrLf)
        fsT.Writetext("            a.showBalloon = !0;" & vbCrLf)
        fsT.Writetext("            this.updateLegend()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateLegend: function () {" & vbCrLf)
        fsT.Writetext("            this.legend && this.legend.invalidateSize()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        resetAnimation: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.graphs;" & vbCrLf)
        fsT.Writetext("            if (a) {" & vbCrLf)
        fsT.Writetext("                var b;" & vbCrLf)
        fsT.Writetext("                for (b = 0; b < a.length; b++) a[b].animationPlayed = !1" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        animateAgain: function () {" & vbCrLf)
        fsT.Writetext("            this.resetAnimation();" & vbCrLf)
        fsT.Writetext("            this.validateNow()" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    })" & vbCrLf)
        fsT.Writetext("})();" & vbCrLf)
        fsT.Writetext("(function () {" & vbCrLf)
        fsT.Writetext("    var d = window.AmCharts;" & vbCrLf)
        fsT.Writetext("    d.AmSlicedChart = d.Class({" & vbCrLf)
        fsT.Writetext("        inherits: d.AmChart," & vbCrLf)
        fsT.Writetext("        construct: function (a) {" & vbCrLf)
        fsT.Writetext("            this.createEvents(" & Chr(34) & "rollOverSlice" & Chr(34) & ", " & Chr(34) & "rollOutSlice" & Chr(34) & ", " & Chr(34) & "clickSlice" & Chr(34) & ", " & Chr(34) & "pullOutSlice" & Chr(34) & ", " & Chr(34) & "pullInSlice" & Chr(34) & ", " & Chr(34) & "rightClickSlice" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            d.AmSlicedChart.base.construct.call(this, a);" & vbCrLf)
        fsT.Writetext("            this.colors = " & Chr(34) & "#FF0F00 #FF6600 #FF9E01 #FCD202 #F8FF01 #B0DE09 #04D215 #0D8ECF #0D52D1 #2A0CD0 #8A0CCF #CD0D74 #754DEB #DDDDDD #999999 #333333 #000000 #57032A #CA9726 #990000 #4B0C25" & Chr(34) & ".split(" & Chr(34) & " " & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            this.alpha = 1;" & vbCrLf)
        fsT.Writetext("            this.groupPercent = 0;" & vbCrLf)
        fsT.Writetext("            this.groupedTitle = " & Chr(34) & "Other" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.groupedPulled = !1;" & vbCrLf)
        fsT.Writetext("            this.groupedAlpha = 1;" & vbCrLf)
        fsT.Writetext("            this.marginLeft = 0;" & vbCrLf)
        fsT.Writetext("            this.marginBottom = this.marginTop = 10;" & vbCrLf)
        fsT.Writetext("            this.marginRight = 0;" & vbCrLf)
        fsT.Writetext("            this.hoverAlpha = 1;" & vbCrLf)
        fsT.Writetext("            this.outlineColor = " & Chr(34) & "#FFFFFF" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.outlineAlpha = 0;" & vbCrLf)
        fsT.Writetext("            this.outlineThickness = 1;" & vbCrLf)
        fsT.Writetext("            this.startAlpha = 0;" & vbCrLf)
        fsT.Writetext("            this.startDuration = 1;" & vbCrLf)
        fsT.Writetext("            this.startEffect = " & Chr(34) & "bounce" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.sequencedAnimation = !0;" & vbCrLf)
        fsT.Writetext("            this.pullOutDuration = 1;" & vbCrLf)
        fsT.Writetext("            this.pullOutEffect = " & Chr(34) & "bounce" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.pullOnHover = this.pullOutOnlyOne = !1;" & vbCrLf)
        fsT.Writetext("            this.labelsEnabled = !0;" & vbCrLf)
        fsT.Writetext("            this.labelTickColor = " & Chr(34) & "#000000" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.labelTickAlpha = .2;" & vbCrLf)
        fsT.Writetext("            this.hideLabelsPercent = 0;" & vbCrLf)
        fsT.Writetext("            this.urlTarget =" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "_self" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.autoMarginOffset = 10;" & vbCrLf)
        fsT.Writetext("            this.gradientRatio = [];" & vbCrLf)
        fsT.Writetext("            this.maxLabelWidth = 200;" & vbCrLf)
        fsT.Writetext("            d.applyTheme(this, a, " & Chr(34) & "AmSlicedChart" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        initChart: function () {" & vbCrLf)
        fsT.Writetext("            d.AmSlicedChart.base.initChart.call(this);" & vbCrLf)
        fsT.Writetext("            this.dataChanged && (this.parseData(), this.dispatchDataUpdated = !0, this.dataChanged = !1, this.setLegendData(this.chartData));" & vbCrLf)
        fsT.Writetext("            this.drawChart()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleLegendEvent: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = a.type," & vbCrLf)
        fsT.Writetext("                c = a.dataItem," & vbCrLf)
        fsT.Writetext("                e = this.legend;" & vbCrLf)
        fsT.Writetext("            if (!e.data && c) {" & vbCrLf)
        fsT.Writetext("                var d = c.hidden;" & vbCrLf)
        fsT.Writetext("                a = a.event;" & vbCrLf)
        fsT.Writetext("                switch (b) {" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "clickMarker" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        d || e.switchable || this.clickSlice(c, a);" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "clickLabel" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        d || this.clickSlice(c, a, !1);" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "rollOverItem" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        d || this.rollOverSlice(c, !1, a);" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "rollOutItem" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        d || this.rollOutSlice(c, a);" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "hideItem" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        this.hideSlice(c, a);" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "showItem" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        this.showSlice(c, a)" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        invalidateVisibility: function () {" & vbCrLf)
        fsT.Writetext("            this.recalculatePercents();" & vbCrLf)
        fsT.Writetext("            this.initChart();" & vbCrLf)
        fsT.Writetext("            var a = this.legend;" & vbCrLf)
        fsT.Writetext("            a && a.invalidateSize()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        addEventListeners: function (a, b) {" & vbCrLf)
        fsT.Writetext("            var c = this;" & vbCrLf)
        fsT.Writetext("            a.mouseover(function (a) {" & vbCrLf)
        fsT.Writetext("                c.rollOverSlice(b, !0, a)" & vbCrLf)
        fsT.Writetext("            }).mouseout(function (a) {" & vbCrLf)
        fsT.Writetext("                c.rollOutSlice(b, a)" & vbCrLf)
        fsT.Writetext("            }).touchend(function (a) {" & vbCrLf)
        fsT.Writetext("                c.rollOverSlice(b," & vbCrLf)
        fsT.Writetext("                a);" & vbCrLf)
        fsT.Writetext("                c.panEventsEnabled && c.clickSlice(b, a)" & vbCrLf)
        fsT.Writetext("            }).touchstart(function (a) {" & vbCrLf)
        fsT.Writetext("                c.rollOverSlice(b, a)" & vbCrLf)
        fsT.Writetext("            }).click(function (a) {" & vbCrLf)
        fsT.Writetext("                c.clickSlice(b, a)" & vbCrLf)
        fsT.Writetext("            }).contextmenu(function (a) {" & vbCrLf)
        fsT.Writetext("                c.handleRightClick(b, a)" & vbCrLf)
        fsT.Writetext("            })" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        formatString: function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            a = d.formatValue(a, b, [" & Chr(34) & "value" & Chr(34) & "], this.nf, " & Chr(34) & "" & Chr(34) & ", this.usePrefixes, this.prefixesOfSmallNumbers, this.prefixesOfBigNumbers);" & vbCrLf)
        fsT.Writetext("            var e = this.pf.precision;" & vbCrLf)
        fsT.Writetext("            isNaN(this.tempPrec) || (this.pf.precision = this.tempPrec);" & vbCrLf)
        fsT.Writetext("            a = d.formatValue(a, b, [" & Chr(34) & "percents" & Chr(34) & "], this.pf);" & vbCrLf)
        fsT.Writetext("            a = d.massReplace(a, {" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "[[title]]" & Chr(34) & ": b.title," & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "[[description]]" & Chr(34) & ": b.description" & vbCrLf)
        fsT.Writetext("            });" & vbCrLf)
        fsT.Writetext("            this.pf.precision = e; - 1 != a.indexOf(" & Chr(34) & "[[" & Chr(34) & ") && (a = d.formatDataContextValue(a, b.dataContext));" & vbCrLf)
        fsT.Writetext("            a = c ? d.fixNewLines(a) : d.fixBrakes(a);" & vbCrLf)
        fsT.Writetext("            return a = d.cleanFromEmpty(a)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        startSlices: function () {" & vbCrLf)
        fsT.Writetext("            var a;" & vbCrLf)
        fsT.Writetext("            for (a = 0; a < this.chartData.length; a++) 0 < this.startDuration && this.sequencedAnimation ? this.setStartTO(a) : this.startSlice(this.chartData[a])" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        setStartTO: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = this;" & vbCrLf)
        fsT.Writetext("            a = setTimeout(function () {" & vbCrLf)
        fsT.Writetext("                b.startSequenced.call(b)" & vbCrLf)
        fsT.Writetext("            }, b.startDuration / b.chartData.length * 500 * a);" & vbCrLf)
        fsT.Writetext("            b.timeOuts.push(a)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        pullSlices: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = this.chartData," & vbCrLf)
        fsT.Writetext("                c;" & vbCrLf)
        fsT.Writetext("            for (c = 0; c < b.length; c++) {" & vbCrLf)
        fsT.Writetext("                var e = b[c];" & vbCrLf)
        fsT.Writetext("                e.pulled && this.pullSlice(e, 1, a)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        startSequenced: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.chartData," & vbCrLf)
        fsT.Writetext("                b;" & vbCrLf)
        fsT.Writetext("            for (b = 0; b < a.length; b++) if (!a[b].started) {" & vbCrLf)
        fsT.Writetext("                this.startSlice(this.chartData[b]);" & vbCrLf)
        fsT.Writetext("                break" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        startSlice: function (a) {" & vbCrLf)
        fsT.Writetext("            a.started = !0;" & vbCrLf)
        fsT.Writetext("            var b = a.wedge," & vbCrLf)
        fsT.Writetext("                c = this.startDuration;" & vbCrLf)
        fsT.Writetext("            b && 0 < c && (0 < a.alpha && b.show(), b.translate(a.startX, a.startY), b.animate({" & vbCrLf)
        fsT.Writetext("                opacity: 1," & vbCrLf)
        fsT.Writetext("                translate: " & Chr(34) & "0,0" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }, c, this.startEffect))" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        showLabels: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.chartData," & vbCrLf)
        fsT.Writetext("                b;" & vbCrLf)
        fsT.Writetext("            for (b = 0; b < a.length; b++) {" & vbCrLf)
        fsT.Writetext("                var c = a[b];" & vbCrLf)
        fsT.Writetext("                if (0 < c.alpha) {" & vbCrLf)
        fsT.Writetext("                    var e = c.label;" & vbCrLf)
        fsT.Writetext("                    e && e.show();" & vbCrLf)
        fsT.Writetext("                    (c = c.tick) && c.show()" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        showSlice: function (a) {" & vbCrLf)
        fsT.Writetext("            isNaN(a) ? a.hidden = !1 : this.chartData[a].hidden = !1;" & vbCrLf)
        fsT.Writetext("            this.invalidateVisibility()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        hideSlice: function (a) {" & vbCrLf)
        fsT.Writetext("            isNaN(a) ? a.hidden = !0 : this.chartData[a].hidden = !0;" & vbCrLf)
        fsT.Writetext("            this.hideBalloon();" & vbCrLf)
        fsT.Writetext("            this.invalidateVisibility()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        rollOverSlice: function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            isNaN(a) || (a = this.chartData[a]);" & vbCrLf)
        fsT.Writetext("            clearTimeout(this.hoverInt);" & vbCrLf)
        fsT.Writetext("            if (!a.hidden) {" & vbCrLf)
        fsT.Writetext("                this.pullOnHover && this.pullSlice(a, 1);" & vbCrLf)
        fsT.Writetext("                1 > this.hoverAlpha && a.wedge && a.wedge.attr({" & vbCrLf)
        fsT.Writetext("                    opacity: this.hoverAlpha" & vbCrLf)
        fsT.Writetext("                });" & vbCrLf)
        fsT.Writetext("                var e = a.balloonX," & vbCrLf)
        fsT.Writetext("                    h = a.balloonY;" & vbCrLf)
        fsT.Writetext("                a.pulled && (e += a.pullX, h += a.pullY);" & vbCrLf)
        fsT.Writetext("                var f = this.formatString(this.balloonText, a, !0)," & vbCrLf)
        fsT.Writetext("                    g = this.balloonFunction;" & vbCrLf)
        fsT.Writetext("                g && (f = g(a, f));" & vbCrLf)
        fsT.Writetext("                g = d.adjustLuminosity(a.color, -.15);" & vbCrLf)
        fsT.Writetext("                f ? this.showBalloon(f, g, b, e, h) : this.hideBalloon();" & vbCrLf)
        fsT.Writetext("                0 === a.value && this.hideBalloon();" & vbCrLf)
        fsT.Writetext("                a = {" & vbCrLf)
        fsT.Writetext("                    type: " & Chr(34) & "rollOverSlice" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                    dataItem: a," & vbCrLf)
        fsT.Writetext("                    chart: this," & vbCrLf)
        fsT.Writetext("                    event: c" & vbCrLf)
        fsT.Writetext("                };" & vbCrLf)
        fsT.Writetext("                this.fire(a.type, a)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        rollOutSlice: function (a, b) {" & vbCrLf)
        fsT.Writetext("            isNaN(a) || (a = this.chartData[a]);" & vbCrLf)
        fsT.Writetext("            a.wedge && a.wedge.attr({" & vbCrLf)
        fsT.Writetext("                opacity: 1" & vbCrLf)
        fsT.Writetext("            });" & vbCrLf)
        fsT.Writetext("            this.hideBalloon();" & vbCrLf)
        fsT.Writetext("            var c = {" & vbCrLf)
        fsT.Writetext("                type: " & Chr(34) & "rollOutSlice" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                dataItem: a," & vbCrLf)
        fsT.Writetext("                chart: this," & vbCrLf)
        fsT.Writetext("                event: b" & vbCrLf)
        fsT.Writetext("            };" & vbCrLf)
        fsT.Writetext("            this.fire(c.type, c)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        clickSlice: function (a," & vbCrLf)
        fsT.Writetext("        b, c) {" & vbCrLf)
        fsT.Writetext("            isNaN(a) || (a = this.chartData[a]);" & vbCrLf)
        fsT.Writetext("            a.pulled ? this.pullSlice(a, 0) : this.pullSlice(a, 1);" & vbCrLf)
        fsT.Writetext("            d.getURL(a.url, this.urlTarget);" & vbCrLf)
        fsT.Writetext("            c || (a = {" & vbCrLf)
        fsT.Writetext("                type: " & Chr(34) & "clickSlice" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                dataItem: a," & vbCrLf)
        fsT.Writetext("                chart: this," & vbCrLf)
        fsT.Writetext("                event: b" & vbCrLf)
        fsT.Writetext("            }, this.fire(a.type, a))" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleRightClick: function (a, b) {" & vbCrLf)
        fsT.Writetext("            isNaN(a) || (a = this.chartData[a]);" & vbCrLf)
        fsT.Writetext("            var c = {" & vbCrLf)
        fsT.Writetext("                type: " & Chr(34) & "rightClickSlice" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                dataItem: a," & vbCrLf)
        fsT.Writetext("                chart: this," & vbCrLf)
        fsT.Writetext("                event: b" & vbCrLf)
        fsT.Writetext("            };" & vbCrLf)
        fsT.Writetext("            this.fire(c.type, c)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        drawTicks: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.chartData," & vbCrLf)
        fsT.Writetext("                b;" & vbCrLf)
        fsT.Writetext("            for (b = 0; b < a.length; b++) {" & vbCrLf)
        fsT.Writetext("                var c = a[b];" & vbCrLf)
        fsT.Writetext("                if (c.label) {" & vbCrLf)
        fsT.Writetext("                    var e = c.ty," & vbCrLf)
        fsT.Writetext("                        e = d.line(this.container, [c.tx0, c.tx, c.tx2], [c.ty0, e, e], this.labelTickColor," & vbCrLf)
        fsT.Writetext("                        this.labelTickAlpha);" & vbCrLf)
        fsT.Writetext("                    d.setCN(this, e, this.type + " & Chr(34) & "-tick" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                    d.setCN(this, e, c.className, !0);" & vbCrLf)
        fsT.Writetext("                    c.tick = e;" & vbCrLf)
        fsT.Writetext("                    c.wedge.push(e)" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        initialStart: function () {" & vbCrLf)
        fsT.Writetext("            var a = this," & vbCrLf)
        fsT.Writetext("                b = a.startDuration," & vbCrLf)
        fsT.Writetext("                c = setTimeout(function () {" & vbCrLf)
        fsT.Writetext("                    a.showLabels.call(a)" & vbCrLf)
        fsT.Writetext("                }, 1E3 * b);" & vbCrLf)
        fsT.Writetext("            a.timeOuts.push(c);" & vbCrLf)
        fsT.Writetext("            a.chartCreated ? a.pullSlices(!0) : (a.startSlices(), 0 < b ? (b = setTimeout(function () {" & vbCrLf)
        fsT.Writetext("                a.pullSlices.call(a)" & vbCrLf)
        fsT.Writetext("            }, 1200 * b), a.timeOuts.push(b)) : a.pullSlices(!0))" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        pullSlice: function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            var e = this.pullOutDuration;" & vbCrLf)
        fsT.Writetext("            !0 === c && (e = 0);" & vbCrLf)
        fsT.Writetext("            (c = a.wedge) && (0 < e ? c.animate({" & vbCrLf)
        fsT.Writetext("                translate: b * a.pullX +" & vbCrLf)
        fsT.Writetext("                    " & Chr(34) & "," & Chr(34) & " + b * a.pullY" & vbCrLf)
        fsT.Writetext("            }, e, this.pullOutEffect) : c.translate(b * a.pullX, b * a.pullY));" & vbCrLf)
        fsT.Writetext("            1 == b ? (a.pulled = !0, this.pullOutOnlyOne && this.pullInAll(a.index), a = {" & vbCrLf)
        fsT.Writetext("                type: " & Chr(34) & "pullOutSlice" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                dataItem: a," & vbCrLf)
        fsT.Writetext("                chart: this" & vbCrLf)
        fsT.Writetext("            }) : (a.pulled = !1, a = {" & vbCrLf)
        fsT.Writetext("                type: " & Chr(34) & "pullInSlice" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                dataItem: a," & vbCrLf)
        fsT.Writetext("                chart: this" & vbCrLf)
        fsT.Writetext("            });" & vbCrLf)
        fsT.Writetext("            this.fire(a.type, a)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        pullInAll: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = this.chartData," & vbCrLf)
        fsT.Writetext("                c;" & vbCrLf)
        fsT.Writetext("            for (c = 0; c < this.chartData.length; c++) c != a && b[c].pulled && this.pullSlice(b[c], 0)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        pullOutAll: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.chartData," & vbCrLf)
        fsT.Writetext("                b;" & vbCrLf)
        fsT.Writetext("            for (b = 0; b < a.length; b++) a[b].pulled || this.pullSlice(a[b], 1)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        parseData: function () {" & vbCrLf)
        fsT.Writetext("            var a = [];" & vbCrLf)
        fsT.Writetext("            this.chartData = a;" & vbCrLf)
        fsT.Writetext("            var b = this.dataProvider;" & vbCrLf)
        fsT.Writetext("            isNaN(this.pieAlpha) || (this.alpha = this.pieAlpha);" & vbCrLf)
        fsT.Writetext("            if (void 0 !== b) {" & vbCrLf)
        fsT.Writetext("                var c = b.length," & vbCrLf)
        fsT.Writetext("                    e = 0," & vbCrLf)
        fsT.Writetext("                    h, f, g;" & vbCrLf)
        fsT.Writetext("                for (h = 0; h < c; h++) {" & vbCrLf)
        fsT.Writetext("                    f = {};" & vbCrLf)
        fsT.Writetext("                    var k = b[h];" & vbCrLf)
        fsT.Writetext("                    f.dataContext = k;" & vbCrLf)
        fsT.Writetext("                    f.value = Number(k[this.valueField]);" & vbCrLf)
        fsT.Writetext("                    (g = k[this.titleField]) || (g = " & Chr(34) & "" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                    f.title = g;" & vbCrLf)
        fsT.Writetext("                    f.pulled = d.toBoolean(k[this.pulledField], !1);" & vbCrLf)
        fsT.Writetext("                    (g = k[this.descriptionField]) || (g = " & Chr(34) & "" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                    f.description = g;" & vbCrLf)
        fsT.Writetext("                    f.labelRadius = Number(k[this.labelRadiusField]);" & vbCrLf)
        fsT.Writetext("                    f.switchable = !0;" & vbCrLf)
        fsT.Writetext("                    f.className = k[this.classNameField];" & vbCrLf)
        fsT.Writetext("                    f.url = k[this.urlField];" & vbCrLf)
        fsT.Writetext("                    g = k[this.patternField];" & vbCrLf)
        fsT.Writetext("                    !g && this.patterns && (g = this.patterns[h]);" & vbCrLf)
        fsT.Writetext("                    f.pattern = g;" & vbCrLf)
        fsT.Writetext("                    f.visibleInLegend = d.toBoolean(k[this.visibleInLegendField], !0);" & vbCrLf)
        fsT.Writetext("                    g = k[this.alphaField];" & vbCrLf)
        fsT.Writetext("                    f.alpha = void 0 !== g ? Number(g) : this.alpha;" & vbCrLf)
        fsT.Writetext("                    g = k[this.colorField];" & vbCrLf)
        fsT.Writetext("                    void 0 !== g && (f.color = g);" & vbCrLf)
        fsT.Writetext("                    f.labelColor = d.toColor(k[this.labelColorField]);" & vbCrLf)
        fsT.Writetext("                    e += f.value;" & vbCrLf)
        fsT.Writetext("                    f.hidden = !1;" & vbCrLf)
        fsT.Writetext("                    a[h] = f" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("                for (h = b = 0; h < c; h++) f = a[h], f.percents = f.value / e * 100, f.percents < this.groupPercent && b++;" & vbCrLf)
        fsT.Writetext("                1 < b && (this.groupValue = 0, this.removeSmallSlices(), a.push({" & vbCrLf)
        fsT.Writetext("                    title: this.groupedTitle," & vbCrLf)
        fsT.Writetext("                    value: this.groupValue," & vbCrLf)
        fsT.Writetext("                    percents: this.groupValue / e * 100," & vbCrLf)
        fsT.Writetext("                    pulled: this.groupedPulled," & vbCrLf)
        fsT.Writetext("                    color: this.groupedColor," & vbCrLf)
        fsT.Writetext("                    url: this.groupedUrl," & vbCrLf)
        fsT.Writetext("                    description: this.groupedDescription," & vbCrLf)
        fsT.Writetext("                    alpha: this.groupedAlpha," & vbCrLf)
        fsT.Writetext("                    pattern: this.groupedPattern," & vbCrLf)
        fsT.Writetext("                    className: this.groupedClassName," & vbCrLf)
        fsT.Writetext("                    dataContext: {}" & vbCrLf)
        fsT.Writetext("                }));" & vbCrLf)
        fsT.Writetext("                c = this.baseColor;" & vbCrLf)
        fsT.Writetext("                c || (c = this.pieBaseColor);" & vbCrLf)
        fsT.Writetext("                e = this.brightnessStep;" & vbCrLf)
        fsT.Writetext("                e || (e = this.pieBrightnessStep);" & vbCrLf)
        fsT.Writetext("                for (h = 0; h < a.length; h++) c ? g = d.adjustLuminosity(c, h * e / 100) : (g = this.colors[h], void 0 === g && (g = d.randomColor())), void 0 === a[h].color && (a[h].color = g);" & vbCrLf)
        fsT.Writetext("                this.recalculatePercents()" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        recalculatePercents: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.chartData," & vbCrLf)
        fsT.Writetext("                b = 0," & vbCrLf)
        fsT.Writetext("                c, e;" & vbCrLf)
        fsT.Writetext("            for (c = 0; c < a.length; c++) e = a[c], !e.hidden && 0 < e.value && (b += e.value);" & vbCrLf)
        fsT.Writetext("            for (c = 0; c < a.length; c++) e = this.chartData[c], e.percents = !e.hidden && 0 < e.value ? 100 * e.value / b : 0" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        removeSmallSlices: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.chartData," & vbCrLf)
        fsT.Writetext("                b;" & vbCrLf)
        fsT.Writetext("            for (b = a.length - 1; 0 <= b; b--) a[b].percents < this.groupPercent && (this.groupValue += a[b].value, a.splice(b, 1))" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        animateAgain: function () {" & vbCrLf)
        fsT.Writetext("            var a = this;" & vbCrLf)
        fsT.Writetext("            a.startSlices();" & vbCrLf)
        fsT.Writetext("            for (var b = 0; b < a.chartData.length; b++) {" & vbCrLf)
        fsT.Writetext("                var c = a.chartData[b];" & vbCrLf)
        fsT.Writetext("                c.started = !1;" & vbCrLf)
        fsT.Writetext("                var e = c.wedge;" & vbCrLf)
        fsT.Writetext("                e && e.translate(c.startX, c.startY)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            b = a.startDuration;" & vbCrLf)
        fsT.Writetext("            0 < b ? (b = setTimeout(function () {" & vbCrLf)
        fsT.Writetext("                a.pullSlices.call(a)" & vbCrLf)
        fsT.Writetext("            }, 1200 * b), a.timeOuts.push(b)) : a.pullSlices()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        measureMaxLabel: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.chartData," & vbCrLf)
        fsT.Writetext("                b = 0," & vbCrLf)
        fsT.Writetext("                c;" & vbCrLf)
        fsT.Writetext("            for (c = 0; c < a.length; c++) {" & vbCrLf)
        fsT.Writetext("                var e = a[c]," & vbCrLf)
        fsT.Writetext("                    h = this.formatString(this.labelText, e)," & vbCrLf)
        fsT.Writetext("                    f = this.labelFunction;" & vbCrLf)
        fsT.Writetext("                f && (h = f(e, h));" & vbCrLf)
        fsT.Writetext("                e = d.text(this.container, h, this.color, this.fontFamily, this.fontSize);" & vbCrLf)
        fsT.Writetext("                h = e.getBBox().width;" & vbCrLf)
        fsT.Writetext("                h > b && (b = h);" & vbCrLf)
        fsT.Writetext("                e.remove()" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            return b" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    })" & vbCrLf)
        fsT.Writetext("})();" & vbCrLf)
        fsT.Writetext("(function () {" & vbCrLf)
        fsT.Writetext("    var d = window.AmCharts;" & vbCrLf)
        fsT.Writetext("    d.AmRectangularChart = d.Class({" & vbCrLf)
        fsT.Writetext("        inherits: d.AmCoordinateChart," & vbCrLf)
        fsT.Writetext("        construct: function (a) {" & vbCrLf)
        fsT.Writetext("            d.AmRectangularChart.base.construct.call(this, a);" & vbCrLf)
        fsT.Writetext("            this.theme = a;" & vbCrLf)
        fsT.Writetext("            this.createEvents(" & Chr(34) & "zoomed" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            this.marginRight = this.marginBottom = this.marginTop = this.marginLeft = 20;" & vbCrLf)
        fsT.Writetext("            this.verticalPosition = this.horizontalPosition = this.depth3D = this.angle = 0;" & vbCrLf)
        fsT.Writetext("            this.heightMultiplier = this.widthMultiplier = 1;" & vbCrLf)
        fsT.Writetext("            this.plotAreaFillColors = " & Chr(34) & "#FFFFFF" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.plotAreaFillAlphas = 0;" & vbCrLf)
        fsT.Writetext("            this.plotAreaBorderColor = " & Chr(34) & "#000000" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.plotAreaBorderAlpha = 0;" & vbCrLf)
        fsT.Writetext("            this.zoomOutButtonImageSize = 19;" & vbCrLf)
        fsT.Writetext("            this.zoomOutButtonImage = " & Chr(34) & "lens.png" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.zoomOutText = " & Chr(34) & "Show all" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.zoomOutButtonColor = " & Chr(34) & "#e5e5e5" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.zoomOutButtonAlpha = 0;" & vbCrLf)
        fsT.Writetext("            this.zoomOutButtonRollOverAlpha = 1;" & vbCrLf)
        fsT.Writetext("            this.zoomOutButtonPadding = 8;" & vbCrLf)
        fsT.Writetext("            this.trendLines = [];" & vbCrLf)
        fsT.Writetext("            this.autoMargins = !0;" & vbCrLf)
        fsT.Writetext("            this.marginsUpdated = !1;" & vbCrLf)
        fsT.Writetext("            this.autoMarginOffset = 10;" & vbCrLf)
        fsT.Writetext("            d.applyTheme(this, a, " & Chr(34) & "AmRectangularChart" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        initChart: function () {" & vbCrLf)
        fsT.Writetext("            d.AmRectangularChart.base.initChart.call(this);" & vbCrLf)
        fsT.Writetext("            this.updateDxy();" & vbCrLf)
        fsT.Writetext("            var a = !0;" & vbCrLf)
        fsT.Writetext("            !this.marginsUpdated && this.autoMargins && (this.resetMargins()," & vbCrLf)
        fsT.Writetext("            a = !1);" & vbCrLf)
        fsT.Writetext("            this.processScrollbars();" & vbCrLf)
        fsT.Writetext("            this.updateMargins();" & vbCrLf)
        fsT.Writetext("            this.updatePlotArea();" & vbCrLf)
        fsT.Writetext("            this.updateScrollbars();" & vbCrLf)
        fsT.Writetext("            this.updateTrendLines();" & vbCrLf)
        fsT.Writetext("            this.updateChartCursor();" & vbCrLf)
        fsT.Writetext("            this.updateValueAxes();" & vbCrLf)
        fsT.Writetext("            a && (this.scrollbarOnly || this.updateGraphs())" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        drawChart: function () {" & vbCrLf)
        fsT.Writetext("            d.AmRectangularChart.base.drawChart.call(this);" & vbCrLf)
        fsT.Writetext("            this.drawPlotArea();" & vbCrLf)
        fsT.Writetext("            if (d.ifArray(this.chartData)) {" & vbCrLf)
        fsT.Writetext("                var a = this.chartCursor;" & vbCrLf)
        fsT.Writetext("                a && a.draw()" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        resetMargins: function () {" & vbCrLf)
        fsT.Writetext("            var a = {}, b;" & vbCrLf)
        fsT.Writetext("            if (" & Chr(34) & "xy" & Chr(34) & " == this.type) {" & vbCrLf)
        fsT.Writetext("                var c = this.xAxes," & vbCrLf)
        fsT.Writetext("                    e = this.yAxes;" & vbCrLf)
        fsT.Writetext("                for (b = 0; b < c.length; b++) {" & vbCrLf)
        fsT.Writetext("                    var d = c[b];" & vbCrLf)
        fsT.Writetext("                    d.ignoreAxisWidth || (d.setOrientation(!0), d.fixAxisPosition(), a[d.position] = !0)" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("                for (b = 0; b < e.length; b++) c = e[b], c.ignoreAxisWidth || (c.setOrientation(!1), c.fixAxisPosition(), a[c.position] = !0)" & vbCrLf)
        fsT.Writetext("            } else {" & vbCrLf)
        fsT.Writetext("                e = this.valueAxes;" & vbCrLf)
        fsT.Writetext("                for (b = 0; b < e.length; b++) c = e[b], c.ignoreAxisWidth || (c.setOrientation(this.rotate), c.fixAxisPosition(), a[c.position] = !0);" & vbCrLf)
        fsT.Writetext("                (b = this.categoryAxis) && !b.ignoreAxisWidth && (b.setOrientation(!this.rotate), b.fixAxisPosition(), b.fixAxisPosition(), a[b.position] = !0)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            a.left && (this.marginLeft = 0);" & vbCrLf)
        fsT.Writetext("            a.right && (this.marginRight = 0);" & vbCrLf)
        fsT.Writetext("            a.top && (this.marginTop = 0);" & vbCrLf)
        fsT.Writetext("            a.bottom && (this.marginBottom = 0);" & vbCrLf)
        fsT.Writetext("            this.fixMargins = a" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        measureMargins: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.valueAxes," & vbCrLf)
        fsT.Writetext("                b, c = this.autoMarginOffset," & vbCrLf)
        fsT.Writetext("                e = this.fixMargins," & vbCrLf)
        fsT.Writetext("                d = this.realWidth," & vbCrLf)
        fsT.Writetext("                f = this.realHeight," & vbCrLf)
        fsT.Writetext("                g = c," & vbCrLf)
        fsT.Writetext("                k = c," & vbCrLf)
        fsT.Writetext("                l = d;" & vbCrLf)
        fsT.Writetext("            b = f;" & vbCrLf)
        fsT.Writetext("            var m;" & vbCrLf)
        fsT.Writetext("            for (m = 0; m < a.length; m++) a[m].handleSynchronization(), b = this.getAxisBounds(a[m], g, l, k, b), g = Math.round(b.l), l = Math.round(b.r), k = Math.round(b.t), b = Math.round(b.b);" & vbCrLf)
        fsT.Writetext("            if (a = this.categoryAxis) b = this.getAxisBounds(a, g, l, k, b), g = Math.round(b.l), l = Math.round(b.r), k = Math.round(b.t), b = Math.round(b.b);" & vbCrLf)
        fsT.Writetext("            e.left && g < c && (this.marginLeft = Math.round(-g + c));" & vbCrLf)
        fsT.Writetext("            e.right && l >= d - c && (this.marginRight = Math.round(l - d + c));" & vbCrLf)
        fsT.Writetext("            e.top && k < c + this.titleHeight && (this.marginTop = Math.round(this.marginTop - k + c + this.titleHeight));" & vbCrLf)
        fsT.Writetext("            e.bottom && b > f - c && (this.marginBottom = Math.round(this.marginBottom + b - f + c));" & vbCrLf)
        fsT.Writetext("            this.initChart()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getAxisBounds: function (a, b, c, e, d) {" & vbCrLf)
        fsT.Writetext("            if (!a.ignoreAxisWidth) {" & vbCrLf)
        fsT.Writetext("                var f = a.labelsSet," & vbCrLf)
        fsT.Writetext("                    g = a.tickLength;" & vbCrLf)
        fsT.Writetext("                a.inside && (g = 0);" & vbCrLf)
        fsT.Writetext("                if (f) switch (f = a.getBBox(), a.position) {" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "top" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        a = f.y;" & vbCrLf)
        fsT.Writetext("                        e > a && (e = a);" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "bottom" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        a = f.y + f.height;" & vbCrLf)
        fsT.Writetext("                        d < a && (d = a);" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "right" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        a = f.x + f.width + g + 3;" & vbCrLf)
        fsT.Writetext("                        c < a && (c = a);" & vbCrLf)
        fsT.Writetext("                        break;" & vbCrLf)
        fsT.Writetext("                    case " & Chr(34) & "left" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                        a = f.x - g, b > a && (b = a)" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            return {" & vbCrLf)
        fsT.Writetext("                l: b," & vbCrLf)
        fsT.Writetext("                t: e," & vbCrLf)
        fsT.Writetext("                r: c," & vbCrLf)
        fsT.Writetext("                b: d" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        drawZoomOutButton: function () {" & vbCrLf)
        fsT.Writetext("            var a = this;" & vbCrLf)
        fsT.Writetext("            if (!a.zbSet) {" & vbCrLf)
        fsT.Writetext("                var b = a.container.set();" & vbCrLf)
        fsT.Writetext("                a.zoomButtonSet.push(b);" & vbCrLf)
        fsT.Writetext("                var c = a.color," & vbCrLf)
        fsT.Writetext("                    e = a.fontSize," & vbCrLf)
        fsT.Writetext("                    h = a.zoomOutButtonImageSize," & vbCrLf)
        fsT.Writetext("                    f = a.zoomOutButtonImage," & vbCrLf)
        fsT.Writetext("                    g = d.lang.zoomOutText || a.zoomOutText," & vbCrLf)
        fsT.Writetext("                    k = a.zoomOutButtonColor," & vbCrLf)
        fsT.Writetext("                    l = a.zoomOutButtonAlpha," & vbCrLf)
        fsT.Writetext("                    m = a.zoomOutButtonFontSize," & vbCrLf)
        fsT.Writetext("                    n = a.zoomOutButtonPadding;" & vbCrLf)
        fsT.Writetext("                isNaN(m) || (e = m);" & vbCrLf)
        fsT.Writetext("                (m = a.zoomOutButtonFontColor) && (c = m);" & vbCrLf)
        fsT.Writetext("                var m = a.zoomOutButton," & vbCrLf)
        fsT.Writetext("                    q;" & vbCrLf)
        fsT.Writetext("                m && (m.fontSize && (e = m.fontSize), m.color && (c = m.color), m.backgroundColor && (k = m.backgroundColor), isNaN(m.backgroundAlpha) || (a.zoomOutButtonRollOverAlpha = m.backgroundAlpha));" & vbCrLf)
        fsT.Writetext("                var p = m = 0;" & vbCrLf)
        fsT.Writetext("                void 0 !== a.pathToImages && f && (q = a.container.image(a.pathToImages + f, 0, 0, h, h), d.setCN(a, q, " & Chr(34) & "zoom-out-image" & Chr(34) & "), b.push(q), q = q.getBBox(), m = q.width + 5);" & vbCrLf)
        fsT.Writetext("                void 0 !== g && (c = d.text(a.container, g, c, a.fontFamily, e, " & Chr(34) & "start" & Chr(34) & "), d.setCN(a, c, " & Chr(34) & "zoom-out-label" & Chr(34) & "), e = c.getBBox(), p = q ? q.height / 2 - 3 : e.height / 2, c.translate(m, p), b.push(c));" & vbCrLf)
        fsT.Writetext("                q = b.getBBox();" & vbCrLf)
        fsT.Writetext("                c = 1;" & vbCrLf)
        fsT.Writetext("                d.isModern || (c = 0);" & vbCrLf)
        fsT.Writetext("                k = d.rect(a.container, q.width + 2 * n + 5, q.height + 2 * n - 2, k, 1, 1, k, c);" & vbCrLf)
        fsT.Writetext("                k.setAttr(" & Chr(34) & "opacity" & Chr(34) & ", l);" & vbCrLf)
        fsT.Writetext("                k.translate(-n, -n);" & vbCrLf)
        fsT.Writetext("                d.setCN(a, k, " & Chr(34) & "zoom-out-bg" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                b.push(k);" & vbCrLf)
        fsT.Writetext("                k.toBack();" & vbCrLf)
        fsT.Writetext("                a.zbBG = k;" & vbCrLf)
        fsT.Writetext("                q = k.getBBox();" & vbCrLf)
        fsT.Writetext("                b.translate(a.marginLeftReal + a.plotAreaWidth - q.width + n, a.marginTopReal + n);" & vbCrLf)
        fsT.Writetext("                b.hide();" & vbCrLf)
        fsT.Writetext("                b.mouseover(function () {" & vbCrLf)
        fsT.Writetext("                    a.rollOverZB()" & vbCrLf)
        fsT.Writetext("                }).mouseout(function () {" & vbCrLf)
        fsT.Writetext("                    a.rollOutZB()" & vbCrLf)
        fsT.Writetext("                }).click(function () {" & vbCrLf)
        fsT.Writetext("                    a.clickZB()" & vbCrLf)
        fsT.Writetext("                }).touchstart(function () {" & vbCrLf)
        fsT.Writetext("                    a.rollOverZB()" & vbCrLf)
        fsT.Writetext("                }).touchend(function () {" & vbCrLf)
        fsT.Writetext("                    a.rollOutZB();" & vbCrLf)
        fsT.Writetext("                    a.clickZB()" & vbCrLf)
        fsT.Writetext("                });" & vbCrLf)
        fsT.Writetext("                for (l = 0; l < b.length; l++) b[l].attr({" & vbCrLf)
        fsT.Writetext("                    cursor: " & Chr(34) & "pointer" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("                });" & vbCrLf)
        fsT.Writetext("                a.zbSet = b" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        rollOverZB: function () {" & vbCrLf)
        fsT.Writetext("            this.zbBG.setAttr(" & Chr(34) & "opacity" & Chr(34) & ", this.zoomOutButtonRollOverAlpha)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        rollOutZB: function () {" & vbCrLf)
        fsT.Writetext("            this.zbBG.setAttr(" & Chr(34) & "opacity" & Chr(34) & ", this.zoomOutButtonAlpha)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        clickZB: function () {" & vbCrLf)
        fsT.Writetext("            this.zoomOut()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        zoomOut: function () {" & vbCrLf)
        fsT.Writetext("            this.updateScrollbar = !0;" & vbCrLf)
        fsT.Writetext("            this.zoom()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        drawPlotArea: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.dx," & vbCrLf)
        fsT.Writetext("                b = this.dy," & vbCrLf)
        fsT.Writetext("                c = this.marginLeftReal," & vbCrLf)
        fsT.Writetext("                e = this.marginTopReal," & vbCrLf)
        fsT.Writetext("                h = this.plotAreaWidth - 1," & vbCrLf)
        fsT.Writetext("                f = this.plotAreaHeight - 1," & vbCrLf)
        fsT.Writetext("                g = this.plotAreaFillColors," & vbCrLf)
        fsT.Writetext("                k = this.plotAreaFillAlphas," & vbCrLf)
        fsT.Writetext("                l = this.plotAreaBorderColor," & vbCrLf)
        fsT.Writetext("                m = this.plotAreaBorderAlpha;" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "object" & Chr(34) & " == typeof k && (k = k[0]);" & vbCrLf)
        fsT.Writetext("            g = d.polygon(this.container, [0, h, h, 0, 0], [0, 0, f, f, 0], g, k, 1, l, m, this.plotAreaGradientAngle);" & vbCrLf)
        fsT.Writetext("            d.setCN(this, g, " & Chr(34) & "plot-area" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            g.translate(c + a, e + b);" & vbCrLf)
        fsT.Writetext("            this.set.push(g);" & vbCrLf)
        fsT.Writetext("            0 !== a && 0 !== b && (g = this.plotAreaFillColors, " & Chr(34) & "object" & Chr(34) & " == typeof g && (g = g[0]), g = d.adjustLuminosity(g, -.15), h = d.polygon(this.container, [0, a, h + a, h, 0], [0, b, b, 0, 0], g, k, 1, l, m), d.setCN(this, h, " & Chr(34) & "plot-area-bottom" & Chr(34) & "), h.translate(c, e + f), this.set.push(h), a = d.polygon(this.container, [0, 0, a, a, 0], [0, f, f + b, b, 0], g, k, 1, l, m), d.setCN(this, a, " & Chr(34) & "plot-area-left" & Chr(34) & ")," & vbCrLf)
        fsT.Writetext("            a.translate(c, e), this.set.push(a));" & vbCrLf)
        fsT.Writetext("            (c = this.bbset) && this.scrollbarOnly && c.remove()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updatePlotArea: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.updateWidth()," & vbCrLf)
        fsT.Writetext("                b = this.updateHeight()," & vbCrLf)
        fsT.Writetext("                c = this.container;" & vbCrLf)
        fsT.Writetext("            this.realWidth = a;" & vbCrLf)
        fsT.Writetext("            this.realWidth = b;" & vbCrLf)
        fsT.Writetext("            c && this.container.setSize(a, b);" & vbCrLf)
        fsT.Writetext("            a = a - this.marginLeftReal - this.marginRightReal - this.dx;" & vbCrLf)
        fsT.Writetext("            b = b - this.marginTopReal - this.marginBottomReal;" & vbCrLf)
        fsT.Writetext("            1 > a && (a = 1);" & vbCrLf)
        fsT.Writetext("            1 > b && (b = 1);" & vbCrLf)
        fsT.Writetext("            this.plotAreaWidth = Math.round(a);" & vbCrLf)
        fsT.Writetext("            this.plotAreaHeight = Math.round(b)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateDxy: function () {" & vbCrLf)
        fsT.Writetext("            this.dx = Math.round(this.depth3D * Math.cos(this.angle * Math.PI / 180));" & vbCrLf)
        fsT.Writetext("            this.dy = Math.round(-this.depth3D * Math.sin(this.angle * Math.PI / 180));" & vbCrLf)
        fsT.Writetext("            this.d3x = Math.round(this.columnSpacing3D * Math.cos(this.angle * Math.PI / 180));" & vbCrLf)
        fsT.Writetext("            this.d3y = Math.round(-this.columnSpacing3D * Math.sin(this.angle * Math.PI / 180))" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateMargins: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.getTitleHeight();" & vbCrLf)
        fsT.Writetext("            this.titleHeight = a;" & vbCrLf)
        fsT.Writetext("            this.marginTopReal = this.marginTop - this.dy;" & vbCrLf)
        fsT.Writetext("            this.fixMargins && !this.fixMargins.top && (this.marginTopReal += a);" & vbCrLf)
        fsT.Writetext("            this.marginBottomReal = this.marginBottom;" & vbCrLf)
        fsT.Writetext("            this.marginLeftReal = this.marginLeft;" & vbCrLf)
        fsT.Writetext("            this.marginRightReal = this.marginRight" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateValueAxes: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.valueAxes," & vbCrLf)
        fsT.Writetext("                b = this.marginLeftReal," & vbCrLf)
        fsT.Writetext("                c = this.marginTopReal," & vbCrLf)
        fsT.Writetext("                e = this.plotAreaHeight," & vbCrLf)
        fsT.Writetext("                h = this.plotAreaWidth," & vbCrLf)
        fsT.Writetext("                f;" & vbCrLf)
        fsT.Writetext("            for (f = 0; f < a.length; f++) {" & vbCrLf)
        fsT.Writetext("                var g = a[f];" & vbCrLf)
        fsT.Writetext("                g.axisRenderer = d.RecAxis;" & vbCrLf)
        fsT.Writetext("                g.guideFillRenderer = d.RecFill;" & vbCrLf)
        fsT.Writetext("                g.axisItemRenderer = d.RecItem;" & vbCrLf)
        fsT.Writetext("                g.dx = this.dx;" & vbCrLf)
        fsT.Writetext("                g.dy = this.dy;" & vbCrLf)
        fsT.Writetext("                g.viW = h - 1;" & vbCrLf)
        fsT.Writetext("                g.viH = e - 1;" & vbCrLf)
        fsT.Writetext("                g.marginsChanged = !0;" & vbCrLf)
        fsT.Writetext("                g.viX = b;" & vbCrLf)
        fsT.Writetext("                g.viY = c;" & vbCrLf)
        fsT.Writetext("                this.updateObjectSize(g)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateObjectSize: function (a) {" & vbCrLf)
        fsT.Writetext("            a.width = (this.plotAreaWidth - 1) * this.widthMultiplier;" & vbCrLf)
        fsT.Writetext("            a.height = (this.plotAreaHeight - 1) * this.heightMultiplier;" & vbCrLf)
        fsT.Writetext("            a.x = this.marginLeftReal + this.horizontalPosition;" & vbCrLf)
        fsT.Writetext("            a.y = this.marginTopReal + this.verticalPosition" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateGraphs: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.graphs," & vbCrLf)
        fsT.Writetext("                b;" & vbCrLf)
        fsT.Writetext("            for (b = 0; b < a.length; b++) {" & vbCrLf)
        fsT.Writetext("                var c = a[b];" & vbCrLf)
        fsT.Writetext("                c.x = this.marginLeftReal + this.horizontalPosition;" & vbCrLf)
        fsT.Writetext("                c.y = this.marginTopReal + this.verticalPosition;" & vbCrLf)
        fsT.Writetext("                c.width = this.plotAreaWidth * this.widthMultiplier;" & vbCrLf)
        fsT.Writetext("                c.height = this.plotAreaHeight * this.heightMultiplier;" & vbCrLf)
        fsT.Writetext("                c.index = b;" & vbCrLf)
        fsT.Writetext("                c.dx = this.dx;" & vbCrLf)
        fsT.Writetext("                c.dy = this.dy;" & vbCrLf)
        fsT.Writetext("                c.rotate = this.rotate" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateChartCursor: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.chartCursor;" & vbCrLf)
        fsT.Writetext("            a && (a = d.processObject(a, d.ChartCursor," & vbCrLf)
        fsT.Writetext("            this.theme), this.addChartCursor(a), a.x = this.marginLeftReal, a.y = this.marginTopReal, a.width = this.plotAreaWidth - 1, a.height = this.plotAreaHeight - 1, a.chart = this)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        processScrollbars: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.chartScrollbar;" & vbCrLf)
        fsT.Writetext("            a && (a = d.processObject(a, d.ChartScrollbar, this.theme), this.addChartScrollbar(a))" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateScrollbars: function () {}," & vbCrLf)
        fsT.Writetext("        addChartCursor: function (a) {" & vbCrLf)
        fsT.Writetext("            d.callMethod(" & Chr(34) & "destroy" & Chr(34) & ", [this.chartCursor]);" & vbCrLf)
        fsT.Writetext("            a && (this.listenTo(a, " & Chr(34) & "changed" & Chr(34) & ", this.handleCursorChange), this.listenTo(a, " & Chr(34) & "zoomed" & Chr(34) & ", this.handleCursorZoom));" & vbCrLf)
        fsT.Writetext("            this.chartCursor = a" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        removeChartCursor: function () {" & vbCrLf)
        fsT.Writetext("            d.callMethod(" & Chr(34) & "destroy" & Chr(34) & ", [this.chartCursor]);" & vbCrLf)
        fsT.Writetext("            this.chartCursor = null" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        zoomTrendLines: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.trendLines," & vbCrLf)
        fsT.Writetext("                b;" & vbCrLf)
        fsT.Writetext("            for (b = 0; b < a.length; b++) {" & vbCrLf)
        fsT.Writetext("                var c = a[b];" & vbCrLf)
        fsT.Writetext("                c.valueAxis.recalculateToPercents ? c.set && c.set.hide() : (c.x = this.marginLeftReal + this.horizontalPosition, c.y = this.marginTopReal + this.verticalPosition, c.draw())" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        addTrendLine: function (a) {" & vbCrLf)
        fsT.Writetext("            this.trendLines.push(a)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        removeTrendLine: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = this.trendLines," & vbCrLf)
        fsT.Writetext("                c;" & vbCrLf)
        fsT.Writetext("            for (c = b.length - 1; 0 <= c; c--) b[c] == a && b.splice(c, 1)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        adjustMargins: function (a," & vbCrLf)
        fsT.Writetext("        b) {" & vbCrLf)
        fsT.Writetext("            var c = a.position," & vbCrLf)
        fsT.Writetext("                e = a.scrollbarHeight + a.offset;" & vbCrLf)
        fsT.Writetext("            a.enabled && (" & Chr(34) & "top" & Chr(34) & " == c ? b ? this.marginLeftReal += e : this.marginTopReal += e : b ? this.marginRightReal += e : this.marginBottomReal += e)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getScrollbarPosition: function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            var e = " & Chr(34) & "bottom" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                d = " & Chr(34) & "top" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            a.oppositeAxis || (d = e, e = " & Chr(34) & "top" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            a.position = b ? " & Chr(34) & "bottom" & Chr(34) & " == c || " & Chr(34) & "left" & Chr(34) & " == c ? e : d : " & Chr(34) & "top" & Chr(34) & " == c || " & Chr(34) & "right" & Chr(34) & " == c ? e : d" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateChartScrollbar: function (a, b) {" & vbCrLf)
        fsT.Writetext("            if (a) {" & vbCrLf)
        fsT.Writetext("                a.rotate = b;" & vbCrLf)
        fsT.Writetext("                var c = this.marginTopReal," & vbCrLf)
        fsT.Writetext("                    e = this.marginLeftReal," & vbCrLf)
        fsT.Writetext("                    d = a.scrollbarHeight," & vbCrLf)
        fsT.Writetext("                    f = this.dx," & vbCrLf)
        fsT.Writetext("                    g = this.dy," & vbCrLf)
        fsT.Writetext("                    k = a.offset;" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "top" & Chr(34) & " == a.position ? b ? (a.y = c, a.x = e - d - k) : (a.y = c - d + g - k, a.x = e + f) : b ? (a.y = c + g, a.x = e + this.plotAreaWidth + f + k) : (a.y = c + this.plotAreaHeight + k, a.x = this.marginLeftReal)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        showZB: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = this.zbSet;" & vbCrLf)
        fsT.Writetext("            a && (b = this.zoomOutText, " & Chr(34) & "" & Chr(34) & " !== b && b && this.drawZoomOutButton());" & vbCrLf)
        fsT.Writetext("            if (b = this.zbSet) this.zoomButtonSet.push(b), a ? b.show() : b.hide(), this.rollOutZB()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleReleaseOutside: function (a) {" & vbCrLf)
        fsT.Writetext("            d.AmRectangularChart.base.handleReleaseOutside.call(this, a);" & vbCrLf)
        fsT.Writetext("            (a = this.chartCursor) && a.handleReleaseOutside && a.handleReleaseOutside()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleMouseDown: function (a) {" & vbCrLf)
        fsT.Writetext("            d.AmRectangularChart.base.handleMouseDown.call(this," & vbCrLf)
        fsT.Writetext("            a);" & vbCrLf)
        fsT.Writetext("            var b = this.chartCursor;" & vbCrLf)
        fsT.Writetext("            b && b.handleMouseDown(a)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleCursorChange: function () {}," & vbCrLf)
        fsT.Writetext("        update: function () {" & vbCrLf)
        fsT.Writetext("            d.AmRectangularChart.base.update.call(this);" & vbCrLf)
        fsT.Writetext("            this.chartCursor && this.chartCursor.update && this.chartCursor.update()" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    })" & vbCrLf)
        fsT.Writetext("})();" & vbCrLf)
        fsT.Writetext("(function () {" & vbCrLf)
        fsT.Writetext("    var d = window.AmCharts;" & vbCrLf)
        fsT.Writetext("    d.TrendLine = d.Class({" & vbCrLf)
        fsT.Writetext("        construct: function (a) {" & vbCrLf)
        fsT.Writetext("            this.cname = " & Chr(34) & "TrendLine" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.createEvents(" & Chr(34) & "click" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            this.isProtected = !1;" & vbCrLf)
        fsT.Writetext("            this.dashLength = 0;" & vbCrLf)
        fsT.Writetext("            this.lineColor = " & Chr(34) & "#00CC00" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.lineThickness = this.lineAlpha = 1;" & vbCrLf)
        fsT.Writetext("            d.applyTheme(this, a, this.cname)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        draw: function () {" & vbCrLf)
        fsT.Writetext("            var a = this;" & vbCrLf)
        fsT.Writetext("            a.destroy();" & vbCrLf)
        fsT.Writetext("            var b = a.chart," & vbCrLf)
        fsT.Writetext("                c = b.container," & vbCrLf)
        fsT.Writetext("                e, h, f, g, k = a.categoryAxis," & vbCrLf)
        fsT.Writetext("                l = a.initialDate," & vbCrLf)
        fsT.Writetext("                m = a.initialCategory," & vbCrLf)
        fsT.Writetext("                n = a.finalDate," & vbCrLf)
        fsT.Writetext("                q = a.finalCategory," & vbCrLf)
        fsT.Writetext("                p = a.valueAxis," & vbCrLf)
        fsT.Writetext("                r = a.valueAxisX," & vbCrLf)
        fsT.Writetext("                t = a.initialXValue," & vbCrLf)
        fsT.Writetext("                u = a.finalXValue," & vbCrLf)
        fsT.Writetext("                z = a.initialValue," & vbCrLf)
        fsT.Writetext("                v = a.finalValue," & vbCrLf)
        fsT.Writetext("                w = p.recalculateToPercents," & vbCrLf)
        fsT.Writetext("                x = b.dataDateFormat;" & vbCrLf)
        fsT.Writetext("            k && (l && (l = d.getDate(l, x, " & Chr(34) & "fff" & Chr(34) & "), a.initialDate = l, e = k.dateToCoordinate(l)), m && (e = k.categoryToCoordinate(m)), n && (n = d.getDate(n, x, " & Chr(34) & "fff" & Chr(34) & "), a.finalDate = n, h = k.dateToCoordinate(n)), q && (h = k.categoryToCoordinate(q)));" & vbCrLf)
        fsT.Writetext("            r && !w && (isNaN(t) || (e = r.getCoordinate(t)), isNaN(u) || (h = r.getCoordinate(u)));" & vbCrLf)
        fsT.Writetext("            p && !w && (isNaN(z) || (f = p.getCoordinate(z)), isNaN(v) || (g = p.getCoordinate(v)));" & vbCrLf)
        fsT.Writetext("            isNaN(e) || isNaN(h) || isNaN(f) || isNaN(f) || (b.rotate ? (k = [f, g], h = [e, h]) : (k = [e, h], h = [f, g]), f = a.lineColor, e = d.line(c, k, h, f, a.lineAlpha, a.lineThickness, a.dashLength), g = k, l = h, q = k[1] - k[0], p = h[1] - h[0], 0 === q && (q = .01), 0 === p && (p = .01), m = q / Math.abs(q), n = p / Math.abs(p), p = q * p / Math.abs(q * p) * Math.sqrt(Math.pow(q, 2) + Math.pow(p, 2)), q = Math.asin(q / p), p = 90 * Math.PI / 180 - q, q = Math.abs(5 * Math.cos(p)), p = Math.abs(5 * Math.sin(p)), g.push(k[1] - m * p, k[0] - m * p), l.push(h[1] + n * q, h[0] + n * q), k = d.polygon(c, g, l, f, .005, 0), c = c.set([k, e]), c.translate(b.marginLeftReal, b.marginTopReal), b.trendLinesSet.push(c), d.setCN(b, e, " & Chr(34) & "trend-line" & Chr(34) & ")," & vbCrLf)
        fsT.Writetext("            d.setCN(b, e, " & Chr(34) & "trend-line-" & Chr(34) & " + a.id), a.line = e, a.set = c, k.mouseup(function () {" & vbCrLf)
        fsT.Writetext("                a.handleLineClick()" & vbCrLf)
        fsT.Writetext("            }).mouseover(function () {" & vbCrLf)
        fsT.Writetext("                a.handleLineOver()" & vbCrLf)
        fsT.Writetext("            }).mouseout(function () {" & vbCrLf)
        fsT.Writetext("                a.handleLineOut()" & vbCrLf)
        fsT.Writetext("            }), k.touchend && k.touchend(function () {" & vbCrLf)
        fsT.Writetext("                a.handleLineClick()" & vbCrLf)
        fsT.Writetext("            }), c.clipRect(0, 0, b.plotAreaWidth, b.plotAreaHeight))" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleLineClick: function () {" & vbCrLf)
        fsT.Writetext("            var a = {" & vbCrLf)
        fsT.Writetext("                type: " & Chr(34) & "click" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                trendLine: this," & vbCrLf)
        fsT.Writetext("                chart: this.chart" & vbCrLf)
        fsT.Writetext("            };" & vbCrLf)
        fsT.Writetext("            this.fire(a.type, a)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleLineOver: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.rollOverColor;" & vbCrLf)
        fsT.Writetext("            void 0 !== a && this.line.attr({" & vbCrLf)
        fsT.Writetext("                stroke: a" & vbCrLf)
        fsT.Writetext("            })" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleLineOut: function () {" & vbCrLf)
        fsT.Writetext("            this.line.attr({" & vbCrLf)
        fsT.Writetext("                stroke: this.lineColor" & vbCrLf)
        fsT.Writetext("            })" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        destroy: function () {" & vbCrLf)
        fsT.Writetext("            d.remove(this.set)" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    })" & vbCrLf)
        fsT.Writetext("})();" & vbCrLf)
        fsT.Writetext("(function () {" & vbCrLf)
        fsT.Writetext("    var d = window.AmCharts;" & vbCrLf)
        fsT.Writetext("    d.circle = function (a, b, c, e, h, f, g, k, l) {" & vbCrLf)
        fsT.Writetext("        0 >= b && (b = .001);" & vbCrLf)
        fsT.Writetext("        if (void 0 == h || 0 === h) h = .01;" & vbCrLf)
        fsT.Writetext("        void 0 === f && (f = " & Chr(34) & "#000000" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        void 0 === g && (g = 0);" & vbCrLf)
        fsT.Writetext("        e = {" & vbCrLf)
        fsT.Writetext("            fill: c," & vbCrLf)
        fsT.Writetext("            stroke: f," & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "fill-opacity" & Chr(34) & ": e," & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "stroke-width" & Chr(34) & ": h," & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "stroke-opacity" & Chr(34) & ": g" & vbCrLf)
        fsT.Writetext("        };" & vbCrLf)
        fsT.Writetext("        a = isNaN(l) ? a.circle(0, 0, b).attr(e) : a.ellipse(0, 0, b, l).attr(e);" & vbCrLf)
        fsT.Writetext("        k && a.gradient(" & Chr(34) & "radialGradient" & Chr(34) & ", [c, d.adjustLuminosity(c, -.6)]);" & vbCrLf)
        fsT.Writetext("        return a" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.text = function (a, b, c, e, h, f, g, k) {" & vbCrLf)
        fsT.Writetext("        f || (f = " & Chr(34) & "middle" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        " & Chr(34) & "right" & Chr(34) & " == f && (f = " & Chr(34) & "end" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        " & Chr(34) & "left" & Chr(34) & " == f && (f = " & Chr(34) & "start" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        isNaN(k) && (k = 1);" & vbCrLf)
        fsT.Writetext("        void 0 !== b && (b = String(b), d.isIE && !d.isModern && (b = b.replace(" & Chr(34) & "&amp;" & Chr(34) & ", " & Chr(34) & "&" & Chr(34) & "), b = b.replace(" & Chr(34) & "&" & Chr(34) & ", " & Chr(34) & "&amp;" & Chr(34) & ")));" & vbCrLf)
        fsT.Writetext("        c = {" & vbCrLf)
        fsT.Writetext("            fill: c," & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "font-family" & Chr(34) & ": e," & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "font-size" & Chr(34) & ": h," & vbCrLf)
        fsT.Writetext("            opacity: k" & vbCrLf)
        fsT.Writetext("        };" & vbCrLf)
        fsT.Writetext("        !0 === g && (c[" & Chr(34) & "font-weight" & Chr(34) & "] = " & Chr(34) & "bold" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        c[" & Chr(34) & "text-anchor" & Chr(34) & "] = f;" & vbCrLf)
        fsT.Writetext("        return a.text(b, c)" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.polygon = function (a, b, c, e, h, f, g, k, l, m, n) {" & vbCrLf)
        fsT.Writetext("        isNaN(f) && (f = .01);" & vbCrLf)
        fsT.Writetext("        isNaN(k) && (k = h);" & vbCrLf)
        fsT.Writetext("        var q = e," & vbCrLf)
        fsT.Writetext("            p = !1;" & vbCrLf)
        fsT.Writetext("        " & Chr(34) & "object" & Chr(34) & " == typeof q && 1 < q.length && (p = !0, q = q[0]);" & vbCrLf)
        fsT.Writetext("        void 0 === g && (g = q);" & vbCrLf)
        fsT.Writetext("        h = {" & vbCrLf)
        fsT.Writetext("            fill: q," & vbCrLf)
        fsT.Writetext("            stroke: g," & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "fill-opacity" & Chr(34) & ": h," & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "stroke-width" & Chr(34) & ": f," & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "stroke-opacity" & Chr(34) & ": k" & vbCrLf)
        fsT.Writetext("        };" & vbCrLf)
        fsT.Writetext("        void 0 !== n && 0 < n && (h[" & Chr(34) & "stroke-dasharray" & Chr(34) & "] = n);" & vbCrLf)
        fsT.Writetext("        n = d.dx;" & vbCrLf)
        fsT.Writetext("        f = d.dy;" & vbCrLf)
        fsT.Writetext("        a.handDrawn && (c = d.makeHD(b, c," & vbCrLf)
        fsT.Writetext("        a.handDrawScatter), b = c[0], c = c[1]);" & vbCrLf)
        fsT.Writetext("        g = Math.round;" & vbCrLf)
        fsT.Writetext("        m && (g = d.doNothing);" & vbCrLf)
        fsT.Writetext("        m = " & Chr(34) & "M" & Chr(34) & " + (g(b[0]) + n) + " & Chr(34) & "," & Chr(34) & " + (g(c[0]) + f);" & vbCrLf)
        fsT.Writetext("        for (k = 1; k < b.length; k++) m += " & Chr(34) & " L" & Chr(34) & " + (g(b[k]) + n) + " & Chr(34) & "," & Chr(34) & " + (g(c[k]) + f);" & vbCrLf)
        fsT.Writetext("        a = a.path(m + " & Chr(34) & " Z" & Chr(34) & ").attr(h);" & vbCrLf)
        fsT.Writetext("        p && a.gradient(" & Chr(34) & "linearGradient" & Chr(34) & ", e, l);" & vbCrLf)
        fsT.Writetext("        return a" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.rect = function (a, b, c, e, h, f, g, k, l, m, n) {" & vbCrLf)
        fsT.Writetext("        if (isNaN(b) || isNaN(c)) return a.set();" & vbCrLf)
        fsT.Writetext("        isNaN(f) && (f = 0);" & vbCrLf)
        fsT.Writetext("        void 0 === l && (l = 0);" & vbCrLf)
        fsT.Writetext("        void 0 === m && (m = 270);" & vbCrLf)
        fsT.Writetext("        isNaN(h) && (h = 0);" & vbCrLf)
        fsT.Writetext("        var q = e," & vbCrLf)
        fsT.Writetext("            p = !1;" & vbCrLf)
        fsT.Writetext("        " & Chr(34) & "object" & Chr(34) & " == typeof q && (q = q[0], p = !0);" & vbCrLf)
        fsT.Writetext("        void 0 === g && (g = q);" & vbCrLf)
        fsT.Writetext("        void 0 === k && (k = h);" & vbCrLf)
        fsT.Writetext("        b = Math.round(b);" & vbCrLf)
        fsT.Writetext("        c = Math.round(c);" & vbCrLf)
        fsT.Writetext("        var r = 0," & vbCrLf)
        fsT.Writetext("            t = 0;" & vbCrLf)
        fsT.Writetext("        0 > b && (b = Math.abs(b), r = -b);" & vbCrLf)
        fsT.Writetext("        0 > c && (c = Math.abs(c), t = -c);" & vbCrLf)
        fsT.Writetext("        r += d.dx;" & vbCrLf)
        fsT.Writetext("        t += d.dy;" & vbCrLf)
        fsT.Writetext("        h = {" & vbCrLf)
        fsT.Writetext("            fill: q," & vbCrLf)
        fsT.Writetext("            stroke: g," & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "fill-opacity" & Chr(34) & ": h," & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "stroke-opacity" & Chr(34) & ": k" & vbCrLf)
        fsT.Writetext("        };" & vbCrLf)
        fsT.Writetext("        void 0 !== n && 0 < n && (h[" & Chr(34) & "stroke-dasharray" & Chr(34) & "] = n);" & vbCrLf)
        fsT.Writetext("        a = a.rect(r, t, b, c, l, f).attr(h);" & vbCrLf)
        fsT.Writetext("        p && a.gradient(" & Chr(34) & "linearGradient" & Chr(34) & ", e, m);" & vbCrLf)
        fsT.Writetext("        return a" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.bullet = function (a, b, c, e, h, f, g, k, l, m, n, q) {" & vbCrLf)
        fsT.Writetext("        var p;" & vbCrLf)
        fsT.Writetext("        " & Chr(34) & "circle" & Chr(34) & " == b && (b = " & Chr(34) & "round" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        switch (b) {" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "round" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                p = d.circle(a, c / 2, e, h, f, g, k);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "square" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                p = d.polygon(a, [-c / 2, c / 2, c / 2, -c / 2], [c / 2, c / 2, -c / 2, -c / 2], e, h, f, g, k, m - 180);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "rectangle" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                p = d.polygon(a, [-c," & vbCrLf)
        fsT.Writetext("                c, c, -c], [c / 2, c / 2, -c / 2, -c / 2], e, h, f, g, k, m - 180);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "diamond" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                p = d.polygon(a, [-c / 2, 0, c / 2, 0], [0, -c / 2, 0, c / 2], e, h, f, g, k);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "triangleUp" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                p = d.triangle(a, c, 0, e, h, f, g, k);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "triangleDown" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                p = d.triangle(a, c, 180, e, h, f, g, k);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "triangleLeft" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                p = d.triangle(a, c, 270, e, h, f, g, k);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "triangleRight" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                p = d.triangle(a, c, 90, e, h, f, g, k);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "bubble" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                p = d.circle(a, c / 2, e, h, f, g, k, !0);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "line" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                p = d.line(a, [-c / 2, c / 2], [0, 0], e, h, f, g, k);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "yError" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                p = a.set();" & vbCrLf)
        fsT.Writetext("                p.push(d.line(a, [0, 0], [-c / 2, c / 2], e, h, f));" & vbCrLf)
        fsT.Writetext("                p.push(d.line(a, [-l, l], [-c / 2, -c / 2], e, h, f));" & vbCrLf)
        fsT.Writetext("                p.push(d.line(a, [-l, l], [c / 2, c / 2], e, h, f));" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "xError" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                p = a.set(), p.push(d.line(a, [-c / 2, c / 2], [0, 0], e, h, f)), p.push(d.line(a, [-c / 2, -c / 2], [-l, l], e, h, f)), p.push(d.line(a, [c / 2, c / 2], [-l, l], e, h, f))" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("        p && p.pattern(n, NaN, q);" & vbCrLf)
        fsT.Writetext("        return p" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.triangle = function (a, b, c, e, d, f, g, k) {" & vbCrLf)
        fsT.Writetext("        if (void 0 === f || 0 === f) f = 1;" & vbCrLf)
        fsT.Writetext("        void 0 === g && (g = " & Chr(34) & "#000" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        void 0 === k && (k = 0);" & vbCrLf)
        fsT.Writetext("        e = {" & vbCrLf)
        fsT.Writetext("            fill: e," & vbCrLf)
        fsT.Writetext("            stroke: g," & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "fill-opacity" & Chr(34) & ": d," & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "stroke-width" & Chr(34) & ": f," & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "stroke-opacity" & Chr(34) & ": k" & vbCrLf)
        fsT.Writetext("        };" & vbCrLf)
        fsT.Writetext("        b /= 2;" & vbCrLf)
        fsT.Writetext("        var l;" & vbCrLf)
        fsT.Writetext("        0 === c && (l = " & Chr(34) & " M" & Chr(34) & " + -b +" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "," & Chr(34) & " + b + " & Chr(34) & " L0," & Chr(34) & " + -b + " & Chr(34) & " L" & Chr(34) & " + b + " & Chr(34) & "," & Chr(34) & " + b + " & Chr(34) & " Z" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        180 == c && (l = " & Chr(34) & " M" & Chr(34) & " + -b + " & Chr(34) & "," & Chr(34) & " + -b + " & Chr(34) & " L0," & Chr(34) & " + b + " & Chr(34) & " L" & Chr(34) & " + b + " & Chr(34) & "," & Chr(34) & " + -b + " & Chr(34) & " Z" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        90 == c && (l = " & Chr(34) & " M" & Chr(34) & " + -b + " & Chr(34) & "," & Chr(34) & " + -b + " & Chr(34) & " L" & Chr(34) & " + b + " & Chr(34) & ",0 L" & Chr(34) & " + -b + " & Chr(34) & "," & Chr(34) & " + b + " & Chr(34) & " Z" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        270 == c && (l = " & Chr(34) & " M" & Chr(34) & " + -b + " & Chr(34) & ",0 L" & Chr(34) & " + b + " & Chr(34) & "," & Chr(34) & " + b + " & Chr(34) & " L" & Chr(34) & " + b + " & Chr(34) & "," & Chr(34) & " + -b + " & Chr(34) & " Z" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        return a.path(l).attr(e)" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.line = function (a, b, c, e, h, f, g, k, l, m, n) {" & vbCrLf)
        fsT.Writetext("        if (a.handDrawn && !n) return d.handDrawnLine(a, b, c, e, h, f, g, k, l, m, n);" & vbCrLf)
        fsT.Writetext("        f = {" & vbCrLf)
        fsT.Writetext("            fill: " & Chr(34) & "none" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "stroke-width" & Chr(34) & ": f" & vbCrLf)
        fsT.Writetext("        };" & vbCrLf)
        fsT.Writetext("        void 0 !== g && 0 < g && (f[" & Chr(34) & "stroke-dasharray" & Chr(34) & "] = g);" & vbCrLf)
        fsT.Writetext("        isNaN(h) || (f[" & Chr(34) & "stroke-opacity" & Chr(34) & "] = h);" & vbCrLf)
        fsT.Writetext("        e && (f.stroke = e);" & vbCrLf)
        fsT.Writetext("        e = Math.round;" & vbCrLf)
        fsT.Writetext("        m && (e = d.doNothing);" & vbCrLf)
        fsT.Writetext("        m = d.dx;" & vbCrLf)
        fsT.Writetext("        h = d.dy;" & vbCrLf)
        fsT.Writetext("        g =" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "M" & Chr(34) & " + (e(b[0]) + m) + " & Chr(34) & "," & Chr(34) & " + (e(c[0]) + h);" & vbCrLf)
        fsT.Writetext("        for (k = 1; k < b.length; k++) g += " & Chr(34) & " L" & Chr(34) & " + (e(b[k]) + m) + " & Chr(34) & "," & Chr(34) & " + (e(c[k]) + h);" & vbCrLf)
        fsT.Writetext("        if (d.VML) return a.path(g, void 0, !0).attr(f);" & vbCrLf)
        fsT.Writetext("        l && (g += " & Chr(34) & " M0,0 L0,0" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        return a.path(g).attr(f)" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.makeHD = function (a, b, c) {" & vbCrLf)
        fsT.Writetext("        for (var e = [], d = [], f = 1; f < a.length; f++) for (var g = Number(a[f - 1]), k = Number(b[f - 1]), l = Number(a[f]), m = Number(b[f]), n = Math.sqrt(Math.pow(l - g, 2) + Math.pow(m - k, 2)), n = Math.round(n / 50) + 1, l = (l - g) / n, m = (m - k) / n, q = 0; q <= n; q++) {" & vbCrLf)
        fsT.Writetext("            var p = g + q * l + Math.random() * c," & vbCrLf)
        fsT.Writetext("                r = k + q * m + Math.random() * c;" & vbCrLf)
        fsT.Writetext("            e.push(p);" & vbCrLf)
        fsT.Writetext("            d.push(r)" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("        return [e, d]" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.handDrawnLine = function (a, b, c, e, h, f, g, k, l, m) {" & vbCrLf)
        fsT.Writetext("        var n, q = a.set();" & vbCrLf)
        fsT.Writetext("        for (n = 1; n < b.length; n++) for (var p = [b[n - 1], b[n]], r = [c[n - 1], c[n]], r = d.makeHD(p, r, a.handDrawScatter), p = r[0], r = r[1], t = 1; t < p.length; t++) q.push(d.line(a, [p[t - 1], p[t]], [r[t - 1], r[t]], e, h, f + Math.random() * a.handDrawThickness - a.handDrawThickness / 2, g, k, l, m, !0));" & vbCrLf)
        fsT.Writetext("        return q" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.doNothing = function (a) {" & vbCrLf)
        fsT.Writetext("        return a" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.wedge = function (a, b, c, e, h, f, g, k, l, m, n, q, p) {" & vbCrLf)
        fsT.Writetext("        var r = Math.round;" & vbCrLf)
        fsT.Writetext("        f = r(f);" & vbCrLf)
        fsT.Writetext("        g = r(g);" & vbCrLf)
        fsT.Writetext("        k = r(k);" & vbCrLf)
        fsT.Writetext("        var t = r(g / f * k)," & vbCrLf)
        fsT.Writetext("            u = d.VML," & vbCrLf)
        fsT.Writetext("            z = 359.5 + f / 100;" & vbCrLf)
        fsT.Writetext("        359.94 < z && (z = 359.94);" & vbCrLf)
        fsT.Writetext("        h >= z && (h = z);" & vbCrLf)
        fsT.Writetext("        var v = 1 / 180 * Math.PI," & vbCrLf)
        fsT.Writetext("            z = b + Math.sin(e * v) * k," & vbCrLf)
        fsT.Writetext("            w = c - Math.cos(e * v) * t," & vbCrLf)
        fsT.Writetext("            x = b + Math.sin(e * v) * f," & vbCrLf)
        fsT.Writetext("            A = c - Math.cos(e * v) * g," & vbCrLf)
        fsT.Writetext("            B = b + Math.sin((e + h) * v) * f," & vbCrLf)
        fsT.Writetext("            D = c - Math.cos((e + h) * v) * g," & vbCrLf)
        fsT.Writetext("            C = b + Math.sin((e + h) * v) * k," & vbCrLf)
        fsT.Writetext("            v = c - Math.cos((e + h) * v) * t," & vbCrLf)
        fsT.Writetext("            I = {" & vbCrLf)
        fsT.Writetext("                fill: d.adjustLuminosity(m.fill, -.2)," & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "stroke-opacity" & Chr(34) & ": 0," & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "fill-opacity" & Chr(34) & ": m[" & Chr(34) & "fill-opacity" & Chr(34) & "]" & vbCrLf)
        fsT.Writetext("            }, H = 0;" & vbCrLf)
        fsT.Writetext("        180 < Math.abs(h) && (H = 1);" & vbCrLf)
        fsT.Writetext("        e = a.set();" & vbCrLf)
        fsT.Writetext("        var O;" & vbCrLf)
        fsT.Writetext("        u && (z = r(10 * z), x = r(10 * x), B = r(10 * B), C = r(10 * C), w = r(10 * w), A = r(10 * A), D = r(10 * D), v = r(10 * v), b = r(10 * b), l = r(10 * l), c = r(10 * c), f *= 10, g *= 10, k *= 10, t *= 10, 1 > Math.abs(h) && 1 >= Math.abs(B - x) && 1 >= Math.abs(D - A) && (O = !0));" & vbCrLf)
        fsT.Writetext("        h = " & Chr(34) & "" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("        var J;" & vbCrLf)
        fsT.Writetext("        q && (I[" & Chr(34) & "fill-opacity" & Chr(34) & "] = 0, I[" & Chr(34) & "stroke-opacity" & Chr(34) & "] = m[" & Chr(34) & "stroke-opacity" & Chr(34) & "] / 2, I.stroke = m.stroke);" & vbCrLf)
        fsT.Writetext("        0 < l && (J = " & Chr(34) & " M" & Chr(34) & " + z + " & Chr(34) & "," & Chr(34) & " + (w + l) + " & Chr(34) & " L" & Chr(34) & " + x + " & Chr(34) & "," & Chr(34) & " + (A + l), u ? (O || (J += " & Chr(34) & " A" & Chr(34) & " + (b - f) + " & Chr(34) & "," & Chr(34) & " + (l + c - g) + " & Chr(34) & "," & Chr(34) & " + (b + f) + " & Chr(34) & "," & Chr(34) & " + (l + c + g) + " & Chr(34) & "," & Chr(34) & " + x + " & Chr(34) & "," & Chr(34) & " + (A + l) + " & Chr(34) & "," & Chr(34) & " + B + " & Chr(34) & "," & Chr(34) & " + (D + l)), J += " & Chr(34) & " L" & Chr(34) & " + C + " & Chr(34) & "," & Chr(34) & " + (v + l), 0 < k && (O || (J += " & Chr(34) & " B" & Chr(34) & " + (b - k) + " & Chr(34) & "," & Chr(34) & " + (l + c - t) + " & Chr(34) & "," & Chr(34) & " + (b + k) + " & Chr(34) & "," & Chr(34) & " + (l + c + t) + " & Chr(34) & "," & Chr(34) & " + C + " & Chr(34) & "," & Chr(34) & " + (l + v) + " & Chr(34) & "," & Chr(34) & " + z + " & Chr(34) & "," & Chr(34) & " + (l + w)))) : (J += " & Chr(34) & " A" & Chr(34) & " + f + " & Chr(34) & "," & Chr(34) & " + g + " & Chr(34) & ",0," & Chr(34) & " + H + " & Chr(34) & ",1," & Chr(34) & " + B + " & Chr(34) & "," & Chr(34) & " + (D + l) + " & Chr(34) & " L" & Chr(34) & " + C + " & Chr(34) & "," & Chr(34) & " + (v + l), 0 < k && (J += " & Chr(34) & " A" & Chr(34) & " + k + " & Chr(34) & "," & Chr(34) & " + t + " & Chr(34) & ",0," & Chr(34) & " + H + " & Chr(34) & ",0," & Chr(34) & " + z + " & Chr(34) & "," & Chr(34) & " + (w + l))), J = a.path(J + " & Chr(34) & " Z" & Chr(34) & ", void 0," & vbCrLf)
        fsT.Writetext("        void 0, " & Chr(34) & "1000,1000" & Chr(34) & ").attr(I), e.push(J), J = a.path(" & Chr(34) & " M" & Chr(34) & " + z + " & Chr(34) & "," & Chr(34) & " + w + " & Chr(34) & " L" & Chr(34) & " + z + " & Chr(34) & "," & Chr(34) & " + (w + l) + " & Chr(34) & " L" & Chr(34) & " + x + " & Chr(34) & "," & Chr(34) & " + (A + l) + " & Chr(34) & " L" & Chr(34) & " + x + " & Chr(34) & "," & Chr(34) & " + A + " & Chr(34) & " L" & Chr(34) & " + z + " & Chr(34) & "," & Chr(34) & " + w + " & Chr(34) & " Z" & Chr(34) & ", void 0, void 0, " & Chr(34) & "1000,1000" & Chr(34) & ").attr(I), l = a.path(" & Chr(34) & " M" & Chr(34) & " + B + " & Chr(34) & "," & Chr(34) & " + D + " & Chr(34) & " L" & Chr(34) & " + B + " & Chr(34) & "," & Chr(34) & " + (D + l) + " & Chr(34) & " L" & Chr(34) & " + C + " & Chr(34) & "," & Chr(34) & " + (v + l) + " & Chr(34) & " L" & Chr(34) & " + C + " & Chr(34) & "," & Chr(34) & " + v + " & Chr(34) & " L" & Chr(34) & " + B + " & Chr(34) & "," & Chr(34) & " + D + " & Chr(34) & " Z" & Chr(34) & ", void 0, void 0, " & Chr(34) & "1000,1000" & Chr(34) & ").attr(I), e.push(J), e.push(l));" & vbCrLf)
        fsT.Writetext("        u ? (O || (h = " & Chr(34) & " A" & Chr(34) & " + r(b - f) + " & Chr(34) & "," & Chr(34) & " + r(c - g) + " & Chr(34) & "," & Chr(34) & " + r(b + f) + " & Chr(34) & "," & Chr(34) & " + r(c + g) + " & Chr(34) & "," & Chr(34) & " + r(x) + " & Chr(34) & "," & Chr(34) & " + r(A) + " & Chr(34) & "," & Chr(34) & " + r(B) + " & Chr(34) & "," & Chr(34) & " + r(D)), f = " & Chr(34) & " M" & Chr(34) & " + r(z) + " & Chr(34) & "," & Chr(34) & " + r(w) + " & Chr(34) & " L" & Chr(34) & " + r(x) + " & Chr(34) & "," & Chr(34) & " + r(A) + h + " & Chr(34) & " L" & Chr(34) & " + r(C) + " & Chr(34) & "," & Chr(34) & " + r(v)) : f = " & Chr(34) & " M" & Chr(34) & " + z + " & Chr(34) & "," & Chr(34) & " + w + " & Chr(34) & " L" & Chr(34) & " + x + " & Chr(34) & "," & Chr(34) & " + A + (" & Chr(34) & " A" & Chr(34) & " + f + " & Chr(34) & "," & Chr(34) & " + g + " & Chr(34) & ",0," & Chr(34) & " + H + " & Chr(34) & ",1," & Chr(34) & " + B + " & Chr(34) & "," & Chr(34) & " + D) + " & Chr(34) & " L" & Chr(34) & " + C + " & Chr(34) & "," & Chr(34) & " + v;" & vbCrLf)
        fsT.Writetext("        0 < k && (u ? O || (f += " & Chr(34) & " B" & Chr(34) & " + (b - k) + " & Chr(34) & "," & Chr(34) & " + (c - t) + " & Chr(34) & "," & Chr(34) & " + (b + k) + " & Chr(34) & "," & Chr(34) & " + (c + t) + " & Chr(34) & "," & Chr(34) & " + C + " & Chr(34) & "," & Chr(34) & " + v + " & Chr(34) & "," & Chr(34) & " + z + " & Chr(34) & "," & Chr(34) & " + w) : f += " & Chr(34) & " A" & Chr(34) & " + k + " & Chr(34) & "," & Chr(34) & " + t + " & Chr(34) & ",0," & Chr(34) & " + H + " & Chr(34) & ",0," & Chr(34) & " + z + " & Chr(34) & "," & Chr(34) & " + w);" & vbCrLf)
        fsT.Writetext("        a.handDrawn && (b = d.line(a, [z, x], [w, A], m.stroke, m.thickness * Math.random() * a.handDrawThickness, m[" & Chr(34) & "stroke-opacity" & Chr(34) & "]), e.push(b));" & vbCrLf)
        fsT.Writetext("        a = a.path(f + " & Chr(34) & " Z" & Chr(34) & ", void 0, void 0, " & Chr(34) & "1000,1000" & Chr(34) & ").attr(m);" & vbCrLf)
        fsT.Writetext("        if (n) {" & vbCrLf)
        fsT.Writetext("            b = [];" & vbCrLf)
        fsT.Writetext("            for (c = 0; c < n.length; c++) b.push(d.adjustLuminosity(m.fill, n[c]));" & vbCrLf)
        fsT.Writetext("            0 < b.length && a.gradient(" & Chr(34) & "linearGradient" & Chr(34) & ", b)" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("        a.pattern(q, NaN, p);" & vbCrLf)
        fsT.Writetext("        e.wedge = a;" & vbCrLf)
        fsT.Writetext("        e.push(a);" & vbCrLf)
        fsT.Writetext("        return e" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.adjustLuminosity = function (a, b) {" & vbCrLf)
        fsT.Writetext("        a = String(a).replace(/[^0-9a-f]/gi, " & Chr(34) & "" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        6 > a.length && (a = String(a[0]) + String(a[0]) + String(a[1]) + String(a[1]) + String(a[2]) + String(a[2]));" & vbCrLf)
        fsT.Writetext("        b = b || 0;" & vbCrLf)
        fsT.Writetext("        var c = " & Chr(34) & "#" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            d, h;" & vbCrLf)
        fsT.Writetext("        for (h = 0; 3 > h; h++) d = parseInt(a.substr(2 * h, 2), 16), d = Math.round(Math.min(Math.max(0, d + d * b), 255)).toString(16), c += (" & Chr(34) & "00" & Chr(34) & " + d).substr(d.length);" & vbCrLf)
        fsT.Writetext("        return c" & vbCrLf)
        fsT.Writetext("    }" & vbCrLf)
        fsT.Writetext("})();" & vbCrLf)
        fsT.Writetext("(function () {" & vbCrLf)
        fsT.Writetext("    var d = window.AmCharts;" & vbCrLf)
        fsT.Writetext("    d.Bezier = d.Class({" & vbCrLf)
        fsT.Writetext("        construct: function (a, b, c, e, h, f, g, k, l, m) {" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "object" & Chr(34) & " == typeof g && (g = g[0]);" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "object" & Chr(34) & " == typeof k && (k = k[0]);" & vbCrLf)
        fsT.Writetext("            0 === k && (g = " & Chr(34) & "none" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            f = {" & vbCrLf)
        fsT.Writetext("                fill: g," & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "fill-opacity" & Chr(34) & ": k," & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "stroke-width" & Chr(34) & ": f" & vbCrLf)
        fsT.Writetext("            };" & vbCrLf)
        fsT.Writetext("            void 0 !== l && 0 < l && (f[" & Chr(34) & "stroke-dasharray" & Chr(34) & "] = l);" & vbCrLf)
        fsT.Writetext("            isNaN(h) || (f[" & Chr(34) & "stroke-opacity" & Chr(34) & "] = h);" & vbCrLf)
        fsT.Writetext("            e && (f.stroke = e);" & vbCrLf)
        fsT.Writetext("            e = " & Chr(34) & "M" & Chr(34) & " + Math.round(b[0]) + " & Chr(34) & "," & Chr(34) & " + Math.round(c[0]);" & vbCrLf)
        fsT.Writetext("            h = [];" & vbCrLf)
        fsT.Writetext("            for (l = 0; l < b.length; l++) h.push({" & vbCrLf)
        fsT.Writetext("                x: Number(b[l])," & vbCrLf)
        fsT.Writetext("                y: Number(c[l])" & vbCrLf)
        fsT.Writetext("            });" & vbCrLf)
        fsT.Writetext("            1 < h.length && (b = this.interpolate(h), e += this.drawBeziers(b));" & vbCrLf)
        fsT.Writetext("            m ? e += m : d.VML || (e += " & Chr(34) & "M0,0 L0,0" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            this.path = a.path(e).attr(f);" & vbCrLf)
        fsT.Writetext("            this.node = this.path.node" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        interpolate: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = [];" & vbCrLf)
        fsT.Writetext("            b.push({" & vbCrLf)
        fsT.Writetext("                x: a[0].x," & vbCrLf)
        fsT.Writetext("                y: a[0].y" & vbCrLf)
        fsT.Writetext("            });" & vbCrLf)
        fsT.Writetext("            var c = a[1].x - a[0].x," & vbCrLf)
        fsT.Writetext("                e = a[1].y - a[0].y," & vbCrLf)
        fsT.Writetext("                h = d.bezierX," & vbCrLf)
        fsT.Writetext("                f = d.bezierY;" & vbCrLf)
        fsT.Writetext("            b.push({" & vbCrLf)
        fsT.Writetext("                x: a[0].x + c / h," & vbCrLf)
        fsT.Writetext("                y: a[0].y + e / f" & vbCrLf)
        fsT.Writetext("            });" & vbCrLf)
        fsT.Writetext("            var g;" & vbCrLf)
        fsT.Writetext("            for (g = 1; g < a.length - 1; g++) {" & vbCrLf)
        fsT.Writetext("                var k = a[g - 1]," & vbCrLf)
        fsT.Writetext("                    l = a[g]," & vbCrLf)
        fsT.Writetext("                    e = a[g + 1];" & vbCrLf)
        fsT.Writetext("                isNaN(e.x) && (e = l);" & vbCrLf)
        fsT.Writetext("                isNaN(l.x) && (l = k);" & vbCrLf)
        fsT.Writetext("                isNaN(k.x) && (k = l);" & vbCrLf)
        fsT.Writetext("                c = e.x - l.x;" & vbCrLf)
        fsT.Writetext("                e = e.y - k.y;" & vbCrLf)
        fsT.Writetext("                k = l.x - k.x;" & vbCrLf)
        fsT.Writetext("                k > c && (k = c);" & vbCrLf)
        fsT.Writetext("                b.push({" & vbCrLf)
        fsT.Writetext("                    x: l.x - k / h," & vbCrLf)
        fsT.Writetext("                    y: l.y - e / f" & vbCrLf)
        fsT.Writetext("                });" & vbCrLf)
        fsT.Writetext("                b.push({" & vbCrLf)
        fsT.Writetext("                    x: l.x," & vbCrLf)
        fsT.Writetext("                    y: l.y" & vbCrLf)
        fsT.Writetext("                });" & vbCrLf)
        fsT.Writetext("                b.push({" & vbCrLf)
        fsT.Writetext("                    x: l.x + k / h," & vbCrLf)
        fsT.Writetext("                    y: l.y + e / f" & vbCrLf)
        fsT.Writetext("                })" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            e = a[a.length - 1].y - a[a.length - 2].y;" & vbCrLf)
        fsT.Writetext("            c = a[a.length - 1].x - a[a.length - 2].x;" & vbCrLf)
        fsT.Writetext("            b.push({" & vbCrLf)
        fsT.Writetext("                x: a[a.length - 1].x - c / h," & vbCrLf)
        fsT.Writetext("                y: a[a.length - 1].y - e / f" & vbCrLf)
        fsT.Writetext("            });" & vbCrLf)
        fsT.Writetext("            b.push({" & vbCrLf)
        fsT.Writetext("                x: a[a.length - 1].x," & vbCrLf)
        fsT.Writetext("                y: a[a.length - 1].y" & vbCrLf)
        fsT.Writetext("            });" & vbCrLf)
        fsT.Writetext("            return b" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        drawBeziers: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = " & Chr(34) & "" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                c;" & vbCrLf)
        fsT.Writetext("            for (c = 0; c < (a.length - 1) / 3; c++) b += this.drawBezierMidpoint(a[3 * c], a[3 * c + 1], a[3 * c + 2], a[3 * c + 3]);" & vbCrLf)
        fsT.Writetext("            return b" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        drawBezierMidpoint: function (a, b, c, d) {" & vbCrLf)
        fsT.Writetext("            var h = Math.round," & vbCrLf)
        fsT.Writetext("                f = this.getPointOnSegment(a, b, .75)," & vbCrLf)
        fsT.Writetext("                g = this.getPointOnSegment(d, c, .75)," & vbCrLf)
        fsT.Writetext("                k = (d.x - a.x) / 16," & vbCrLf)
        fsT.Writetext("                l = (d.y - a.y) / 16," & vbCrLf)
        fsT.Writetext("                m = this.getPointOnSegment(a, b, .375);" & vbCrLf)
        fsT.Writetext("            a = this.getPointOnSegment(f, g, .375);" & vbCrLf)
        fsT.Writetext("            a.x -= k;" & vbCrLf)
        fsT.Writetext("            a.y -= l;" & vbCrLf)
        fsT.Writetext("            b = this.getPointOnSegment(g," & vbCrLf)
        fsT.Writetext("            f, .375);" & vbCrLf)
        fsT.Writetext("            b.x += k;" & vbCrLf)
        fsT.Writetext("            b.y += l;" & vbCrLf)
        fsT.Writetext("            c = this.getPointOnSegment(d, c, .375);" & vbCrLf)
        fsT.Writetext("            k = this.getMiddle(m, a);" & vbCrLf)
        fsT.Writetext("            f = this.getMiddle(f, g);" & vbCrLf)
        fsT.Writetext("            g = this.getMiddle(b, c);" & vbCrLf)
        fsT.Writetext("            m = " & Chr(34) & " Q" & Chr(34) & " + h(m.x) + " & Chr(34) & "," & Chr(34) & " + h(m.y) + " & Chr(34) & "," & Chr(34) & " + h(k.x) + " & Chr(34) & "," & Chr(34) & " + h(k.y);" & vbCrLf)
        fsT.Writetext("            m += " & Chr(34) & " Q" & Chr(34) & " + h(a.x) + " & Chr(34) & "," & Chr(34) & " + h(a.y) + " & Chr(34) & "," & Chr(34) & " + h(f.x) + " & Chr(34) & "," & Chr(34) & " + h(f.y);" & vbCrLf)
        fsT.Writetext("            m += " & Chr(34) & " Q" & Chr(34) & " + h(b.x) + " & Chr(34) & "," & Chr(34) & " + h(b.y) + " & Chr(34) & "," & Chr(34) & " + h(g.x) + " & Chr(34) & "," & Chr(34) & " + h(g.y);" & vbCrLf)
        fsT.Writetext("            return m += " & Chr(34) & " Q" & Chr(34) & " + h(c.x) + " & Chr(34) & "," & Chr(34) & " + h(c.y) + " & Chr(34) & "," & Chr(34) & " + h(d.x) + " & Chr(34) & "," & Chr(34) & " + h(d.y)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getMiddle: function (a, b) {" & vbCrLf)
        fsT.Writetext("            return {" & vbCrLf)
        fsT.Writetext("                x: (a.x + b.x) / 2," & vbCrLf)
        fsT.Writetext("                y: (a.y + b.y) / 2" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getPointOnSegment: function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            return {" & vbCrLf)
        fsT.Writetext("                x: a.x + (b.x - a.x) * c," & vbCrLf)
        fsT.Writetext("                y: a.y + (b.y - a.y) * c" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    })" & vbCrLf)
        fsT.Writetext("})();" & vbCrLf)
        fsT.Writetext("(function () {" & vbCrLf)
        fsT.Writetext("    var d = window.AmCharts;" & vbCrLf)
        fsT.Writetext("    d.AmDraw = d.Class({" & vbCrLf)
        fsT.Writetext("        construct: function (a, b, c, e) {" & vbCrLf)
        fsT.Writetext("            d.SVG_NS = " & Chr(34) & "http://www.w3.org/2000/svg" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            d.SVG_XLINK = " & Chr(34) & "http://www.w3.org/1999/xlink" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            d.hasSVG = !! document.createElementNS && !! document.createElementNS(d.SVG_NS, " & Chr(34) & "svg" & Chr(34) & ").createSVGRect;" & vbCrLf)
        fsT.Writetext("            1 > b && (b = 10);" & vbCrLf)
        fsT.Writetext("            1 > c && (c = 10);" & vbCrLf)
        fsT.Writetext("            this.div = a;" & vbCrLf)
        fsT.Writetext("            this.width = b;" & vbCrLf)
        fsT.Writetext("            this.height = c;" & vbCrLf)
        fsT.Writetext("            this.rBin = document.createElement(" & Chr(34) & "div" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            d.hasSVG ? (d.SVG = !0, b = this.createSvgElement(" & Chr(34) & "svg" & Chr(34) & "), a.appendChild(b), this.container = b, this.addDefs(e), this.R = new d.SVGRenderer(this)) : d.isIE && d.VMLRenderer && (d.VML = !0, d.vmlStyleSheet || (document.namespaces.add(" & Chr(34) & "amvml" & Chr(34) & ", " & Chr(34) & "urn:schemas-microsoft-com:vml" & Chr(34) & "), 31 > document.styleSheets.length ? (b = document.createStyleSheet(), b.addRule(" & Chr(34) & ".amvml" & Chr(34) & ", " & Chr(34) & "behavior:url(#default#VML); display:inline-block; antialias:true" & Chr(34) & "), d.vmlStyleSheet = b) : document.styleSheets[0].addRule(" & Chr(34) & ".amvml" & Chr(34) & ", " & Chr(34) & "behavior:url(#default#VML); display:inline-block; antialias:true" & Chr(34) & ")), this.container = a, this.R = new d.VMLRenderer(this, e), this.R.disableSelection(a))" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        createSvgElement: function (a) {" & vbCrLf)
        fsT.Writetext("            return document.createElementNS(d.SVG_NS," & vbCrLf)
        fsT.Writetext("            a)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        circle: function (a, b, c, e) {" & vbCrLf)
        fsT.Writetext("            var h = new d.AmDObject(" & Chr(34) & "circle" & Chr(34) & ", this);" & vbCrLf)
        fsT.Writetext("            h.attr({" & vbCrLf)
        fsT.Writetext("                r: c," & vbCrLf)
        fsT.Writetext("                cx: a," & vbCrLf)
        fsT.Writetext("                cy: b" & vbCrLf)
        fsT.Writetext("            });" & vbCrLf)
        fsT.Writetext("            this.addToContainer(h.node, e);" & vbCrLf)
        fsT.Writetext("            return h" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        ellipse: function (a, b, c, e, h) {" & vbCrLf)
        fsT.Writetext("            var f = new d.AmDObject(" & Chr(34) & "ellipse" & Chr(34) & ", this);" & vbCrLf)
        fsT.Writetext("            f.attr({" & vbCrLf)
        fsT.Writetext("                rx: c," & vbCrLf)
        fsT.Writetext("                ry: e," & vbCrLf)
        fsT.Writetext("                cx: a," & vbCrLf)
        fsT.Writetext("                cy: b" & vbCrLf)
        fsT.Writetext("            });" & vbCrLf)
        fsT.Writetext("            this.addToContainer(f.node, h);" & vbCrLf)
        fsT.Writetext("            return f" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        setSize: function (a, b) {" & vbCrLf)
        fsT.Writetext("            0 < a && 0 < b && (this.container.style.width = a + " & Chr(34) & "px" & Chr(34) & ", this.container.style.height = b + " & Chr(34) & "px" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        rect: function (a, b, c, e, h, f, g) {" & vbCrLf)
        fsT.Writetext("            var k = new d.AmDObject(" & Chr(34) & "rect" & Chr(34) & ", this);" & vbCrLf)
        fsT.Writetext("            d.VML && (h = Math.round(100 * h / Math.min(c, e)), c += 2 * f, e += 2 * f, k.bw = f, k.node.style.marginLeft = -f, k.node.style.marginTop = -f);" & vbCrLf)
        fsT.Writetext("            1 > c && (c = 1);" & vbCrLf)
        fsT.Writetext("            1 > e && (e = 1);" & vbCrLf)
        fsT.Writetext("            k.attr({" & vbCrLf)
        fsT.Writetext("                x: a," & vbCrLf)
        fsT.Writetext("                y: b," & vbCrLf)
        fsT.Writetext("                width: c," & vbCrLf)
        fsT.Writetext("                height: e," & vbCrLf)
        fsT.Writetext("                rx: h," & vbCrLf)
        fsT.Writetext("                ry: h," & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "stroke-width" & Chr(34) & ": f" & vbCrLf)
        fsT.Writetext("            });" & vbCrLf)
        fsT.Writetext("            this.addToContainer(k.node, g);" & vbCrLf)
        fsT.Writetext("            return k" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        image: function (a, b, c, e, h, f) {" & vbCrLf)
        fsT.Writetext("            var g = new d.AmDObject(" & Chr(34) & "image" & Chr(34) & ", this);" & vbCrLf)
        fsT.Writetext("            g.attr({" & vbCrLf)
        fsT.Writetext("                x: b," & vbCrLf)
        fsT.Writetext("                y: c," & vbCrLf)
        fsT.Writetext("                width: e," & vbCrLf)
        fsT.Writetext("                height: h" & vbCrLf)
        fsT.Writetext("            });" & vbCrLf)
        fsT.Writetext("            this.R.path(g, a);" & vbCrLf)
        fsT.Writetext("            this.addToContainer(g.node, f);" & vbCrLf)
        fsT.Writetext("            return g" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        addToContainer: function (a, b) {" & vbCrLf)
        fsT.Writetext("            b || (b = this.container);" & vbCrLf)
        fsT.Writetext("            b.appendChild(a)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        text: function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            return this.R.text(a, b, c)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        path: function (a, b, c, e) {" & vbCrLf)
        fsT.Writetext("            var h = new d.AmDObject(" & Chr(34) & "path" & Chr(34) & ", this);" & vbCrLf)
        fsT.Writetext("            e || (e = " & Chr(34) & "100,100" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            h.attr({" & vbCrLf)
        fsT.Writetext("                cs: e" & vbCrLf)
        fsT.Writetext("            });" & vbCrLf)
        fsT.Writetext("            c ? h.attr({" & vbCrLf)
        fsT.Writetext("                dd: a" & vbCrLf)
        fsT.Writetext("            }) : h.attr({" & vbCrLf)
        fsT.Writetext("                d: a" & vbCrLf)
        fsT.Writetext("            });" & vbCrLf)
        fsT.Writetext("            this.addToContainer(h.node, b);" & vbCrLf)
        fsT.Writetext("            return h" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        set: function (a) {" & vbCrLf)
        fsT.Writetext("            return this.R.set(a)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        remove: function (a) {" & vbCrLf)
        fsT.Writetext("            if (a) {" & vbCrLf)
        fsT.Writetext("                var b = this.rBin;" & vbCrLf)
        fsT.Writetext("                b.appendChild(a);" & vbCrLf)
        fsT.Writetext("                b.innerHTML = " & Chr(34) & "" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        renderFix: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.container," & vbCrLf)
        fsT.Writetext("                b = a.style," & vbCrLf)
        fsT.Writetext("                c;" & vbCrLf)
        fsT.Writetext("            try {" & vbCrLf)
        fsT.Writetext("                c = a.getScreenCTM() || a.createSVGMatrix()" & vbCrLf)
        fsT.Writetext("            } catch (d) {" & vbCrLf)
        fsT.Writetext("                c = a.createSVGMatrix()" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            a = 1 - c.e % 1;" & vbCrLf)
        fsT.Writetext("            c = 1 - c.f % 1;.5 < a && --a;.5 < c && --c;" & vbCrLf)
        fsT.Writetext("            a && (b.left = a + " & Chr(34) & "px" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            c && (b.top = c + " & Chr(34) & "px" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        update: function () {" & vbCrLf)
        fsT.Writetext("            this.R.update()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        addDefs: function (a) {" & vbCrLf)
        fsT.Writetext("            if (d.hasSVG) {" & vbCrLf)
        fsT.Writetext("                var b = this.createSvgElement(" & Chr(34) & "desc" & Chr(34) & ")," & vbCrLf)
        fsT.Writetext("                    c = this.container;" & vbCrLf)
        fsT.Writetext("                c.setAttribute(" & Chr(34) & "version" & Chr(34) & ", " & Chr(34) & "1.1" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                c.style.position = " & Chr(34) & "absolute" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                this.setSize(this.width, this.height);" & vbCrLf)
        fsT.Writetext("                d.rtl && (c.setAttribute(" & Chr(34) & "direction" & Chr(34) & ", " & Chr(34) & "rtl" & Chr(34) & "), c.style.left = " & Chr(34) & "auto" & Chr(34) & ", c.style.right = " & Chr(34) & "0px" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                a.addCodeCredits && b.appendChild(document.createTextNode(" & Chr(34) & " " & Chr(34) & " + a.version));" & vbCrLf)
        fsT.Writetext("                c.appendChild(b);" & vbCrLf)
        fsT.Writetext("                a.defs && (b = this.createSvgElement(" & Chr(34) & "defs" & Chr(34) & "), c.appendChild(b), d.parseDefs(a.defs, b), this.defs = b)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    })" & vbCrLf)
        fsT.Writetext("})();" & vbCrLf)
        fsT.Writetext("(function () {" & vbCrLf)
        fsT.Writetext("    var d = window.AmCharts;" & vbCrLf)
        fsT.Writetext("    d.AmDObject = d.Class({" & vbCrLf)
        fsT.Writetext("        construct: function (a, b) {" & vbCrLf)
        fsT.Writetext("            this.D = b;" & vbCrLf)
        fsT.Writetext("            this.R = b.R;" & vbCrLf)
        fsT.Writetext("            this.node = this.R.create(this, a);" & vbCrLf)
        fsT.Writetext("            this.y = this.x = 0;" & vbCrLf)
        fsT.Writetext("            this.scale = 1" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        attr: function (a) {" & vbCrLf)
        fsT.Writetext("            this.R.attr(this, a);" & vbCrLf)
        fsT.Writetext("            return this" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getAttr: function (a) {" & vbCrLf)
        fsT.Writetext("            return this.node.getAttribute(a)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        setAttr: function (a, b) {" & vbCrLf)
        fsT.Writetext("            this.R.setAttr(this, a, b);" & vbCrLf)
        fsT.Writetext("            return this" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        clipRect: function (a, b, c, d) {" & vbCrLf)
        fsT.Writetext("            this.R.clipRect(this, a, b, c, d)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        translate: function (a, b, c, d) {" & vbCrLf)
        fsT.Writetext("            d || (a = Math.round(a), b = Math.round(b));" & vbCrLf)
        fsT.Writetext("            this.R.move(this, a, b, c);" & vbCrLf)
        fsT.Writetext("            this.x = a;" & vbCrLf)
        fsT.Writetext("            this.y = b;" & vbCrLf)
        fsT.Writetext("            this.scale = c;" & vbCrLf)
        fsT.Writetext("            this.angle && this.rotate(this.angle)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        rotate: function (a, b) {" & vbCrLf)
        fsT.Writetext("            this.R.rotate(this, a, b);" & vbCrLf)
        fsT.Writetext("            this.angle = a" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        animate: function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            for (var e in a) if (a.hasOwnProperty(e)) {" & vbCrLf)
        fsT.Writetext("                var h = e," & vbCrLf)
        fsT.Writetext("                    f = a[e];" & vbCrLf)
        fsT.Writetext("                c = d.getEffect(c);" & vbCrLf)
        fsT.Writetext("                this.R.animate(this, h, f, b, c)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        push: function (a) {" & vbCrLf)
        fsT.Writetext("            if (a) {" & vbCrLf)
        fsT.Writetext("                var b = this.node;" & vbCrLf)
        fsT.Writetext("                b.appendChild(a.node);" & vbCrLf)
        fsT.Writetext("                var c = a.clipPath;" & vbCrLf)
        fsT.Writetext("                c && b.appendChild(c);" & vbCrLf)
        fsT.Writetext("                (a = a.grad) && b.appendChild(a)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        text: function (a) {" & vbCrLf)
        fsT.Writetext("            this.R.setText(this, a)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        remove: function () {" & vbCrLf)
        fsT.Writetext("            this.R.remove(this)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        clear: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.node;" & vbCrLf)
        fsT.Writetext("            if (a.hasChildNodes()) for (; 1 <= a.childNodes.length;) a.removeChild(a.firstChild)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        hide: function () {" & vbCrLf)
        fsT.Writetext("            this.setAttr(" & Chr(34) & "visibility" & Chr(34) & ", " & Chr(34) & "hidden" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        show: function () {" & vbCrLf)
        fsT.Writetext("            this.setAttr(" & Chr(34) & "visibility" & Chr(34) & ", " & Chr(34) & "visible" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getBBox: function () {" & vbCrLf)
        fsT.Writetext("            return this.R.getBBox(this)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        toFront: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.node;" & vbCrLf)
        fsT.Writetext("            if (a) {" & vbCrLf)
        fsT.Writetext("                this.prevNextNode = a.nextSibling;" & vbCrLf)
        fsT.Writetext("                var b = a.parentNode;" & vbCrLf)
        fsT.Writetext("                b && b.appendChild(a)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        toPrevious: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.node;" & vbCrLf)
        fsT.Writetext("            a && this.prevNextNode && (a = a.parentNode) && a.insertBefore(this.prevNextNode, null)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        toBack: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.node;" & vbCrLf)
        fsT.Writetext("            if (a) {" & vbCrLf)
        fsT.Writetext("                this.prevNextNode = a.nextSibling;" & vbCrLf)
        fsT.Writetext("                var b = a.parentNode;" & vbCrLf)
        fsT.Writetext("                if (b) {" & vbCrLf)
        fsT.Writetext("                    var c = b.firstChild;" & vbCrLf)
        fsT.Writetext("                    c && b.insertBefore(a, c)" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        mouseover: function (a) {" & vbCrLf)
        fsT.Writetext("            this.R.addListener(this, " & Chr(34) & "mouseover" & Chr(34) & ", a);" & vbCrLf)
        fsT.Writetext("            return this" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        mouseout: function (a) {" & vbCrLf)
        fsT.Writetext("            this.R.addListener(this, " & Chr(34) & "mouseout" & Chr(34) & ", a);" & vbCrLf)
        fsT.Writetext("            return this" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        click: function (a) {" & vbCrLf)
        fsT.Writetext("            this.R.addListener(this, " & Chr(34) & "click" & Chr(34) & ", a);" & vbCrLf)
        fsT.Writetext("            return this" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        dblclick: function (a) {" & vbCrLf)
        fsT.Writetext("            this.R.addListener(this, " & Chr(34) & "dblclick" & Chr(34) & ", a);" & vbCrLf)
        fsT.Writetext("            return this" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        mousedown: function (a) {" & vbCrLf)
        fsT.Writetext("            this.R.addListener(this, " & Chr(34) & "mousedown" & Chr(34) & ", a);" & vbCrLf)
        fsT.Writetext("            return this" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        mouseup: function (a) {" & vbCrLf)
        fsT.Writetext("            this.R.addListener(this, " & Chr(34) & "mouseup" & Chr(34) & ", a);" & vbCrLf)
        fsT.Writetext("            return this" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        touchstart: function (a) {" & vbCrLf)
        fsT.Writetext("            this.R.addListener(this," & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "touchstart" & Chr(34) & ", a);" & vbCrLf)
        fsT.Writetext("            return this" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        touchend: function (a) {" & vbCrLf)
        fsT.Writetext("            this.R.addListener(this, " & Chr(34) & "touchend" & Chr(34) & ", a);" & vbCrLf)
        fsT.Writetext("            return this" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        contextmenu: function (a) {" & vbCrLf)
        fsT.Writetext("            this.node.addEventListener ? this.node.addEventListener(" & Chr(34) & "contextmenu" & Chr(34) & ", a, !0) : this.R.addListener(this, " & Chr(34) & "contextmenu" & Chr(34) & ", a);" & vbCrLf)
        fsT.Writetext("            return this" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        stop: function () {" & vbCrLf)
        fsT.Writetext("            d.removeFromArray(this.R.animations, this.an_x);" & vbCrLf)
        fsT.Writetext("            d.removeFromArray(this.R.animations, this.an_y)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        length: function () {" & vbCrLf)
        fsT.Writetext("            return this.node.childNodes.length" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        gradient: function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            this.R.gradient(this, a, b, c)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        pattern: function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            a && this.R.pattern(this," & vbCrLf)
        fsT.Writetext("            a, b, c)" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    })" & vbCrLf)
        fsT.Writetext("})();" & vbCrLf)
        fsT.Writetext("(function () {" & vbCrLf)
        fsT.Writetext("    var d = window.AmCharts;" & vbCrLf)
        fsT.Writetext("    d.VMLRenderer = d.Class({" & vbCrLf)
        fsT.Writetext("        construct: function (a, b) {" & vbCrLf)
        fsT.Writetext("            this.chart = b;" & vbCrLf)
        fsT.Writetext("            this.D = a;" & vbCrLf)
        fsT.Writetext("            this.cNames = {" & vbCrLf)
        fsT.Writetext("                circle: " & Chr(34) & "oval" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                ellipse: " & Chr(34) & "oval" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                rect: " & Chr(34) & "roundrect" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                path: " & Chr(34) & "shape" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            };" & vbCrLf)
        fsT.Writetext("            this.styleMap = {" & vbCrLf)
        fsT.Writetext("                x: " & Chr(34) & "left" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                y: " & Chr(34) & "top" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                width: " & Chr(34) & "width" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                height: " & Chr(34) & "height" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "font-family" & Chr(34) & ": " & Chr(34) & "fontFamily" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "font-size" & Chr(34) & ": " & Chr(34) & "fontSize" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                visibility: " & Chr(34) & "visibility" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        create: function (a, b) {" & vbCrLf)
        fsT.Writetext("            var c;" & vbCrLf)
        fsT.Writetext("            if (" & Chr(34) & "group" & Chr(34) & " == b) c = document.createElement(" & Chr(34) & "div" & Chr(34) & "), a.type = " & Chr(34) & "div" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            else if (" & Chr(34) & "text" & Chr(34) & " == b) c = document.createElement(" & Chr(34) & "div" & Chr(34) & "), a.type = " & Chr(34) & "text" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            else if (" & Chr(34) & "image" & Chr(34) & " == b) c = document.createElement(" & Chr(34) & "img" & Chr(34) & ")," & vbCrLf)
        fsT.Writetext("            a.type = " & Chr(34) & "image" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            else {" & vbCrLf)
        fsT.Writetext("                a.type = " & Chr(34) & "shape" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                a.shapeType = this.cNames[b];" & vbCrLf)
        fsT.Writetext("                c = document.createElement(" & Chr(34) & "amvml:" & Chr(34) & " + this.cNames[b]);" & vbCrLf)
        fsT.Writetext("                var d = document.createElement(" & Chr(34) & "amvml:stroke" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                c.appendChild(d);" & vbCrLf)
        fsT.Writetext("                a.stroke = d;" & vbCrLf)
        fsT.Writetext("                var h = document.createElement(" & Chr(34) & "amvml:fill" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                c.appendChild(h);" & vbCrLf)
        fsT.Writetext("                a.fill = h;" & vbCrLf)
        fsT.Writetext("                h.className = " & Chr(34) & "amvml" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                d.className = " & Chr(34) & "amvml" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                c.className = " & Chr(34) & "amvml" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            c.style.position = " & Chr(34) & "absolute" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            c.style.top = 0;" & vbCrLf)
        fsT.Writetext("            c.style.left = 0;" & vbCrLf)
        fsT.Writetext("            return c" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        path: function (a, b) {" & vbCrLf)
        fsT.Writetext("            a.node.setAttribute(" & Chr(34) & "src" & Chr(34) & ", b)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        setAttr: function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            if (void 0 !== c) {" & vbCrLf)
        fsT.Writetext("                var e;" & vbCrLf)
        fsT.Writetext("                8 === document.documentMode && (e = !0);" & vbCrLf)
        fsT.Writetext("                var h = a.node," & vbCrLf)
        fsT.Writetext("                    f = a.type," & vbCrLf)
        fsT.Writetext("                    g = h.style;" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "r" & Chr(34) & " == b && (g.width = 2 * c, g.height = 2 * c);" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "oval" & Chr(34) & " == a.shapeType && (" & Chr(34) & "rx" & Chr(34) & " == b && (g.width = 2 * c), " & Chr(34) & "ry" & Chr(34) & " == b && (g.height = 2 * c));" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "roundrect" & Chr(34) & " == a.shapeType && (" & Chr(34) & "width" & Chr(34) & " != b && " & Chr(34) & "height" & Chr(34) & " != b || --c);" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "cursor" & Chr(34) & " == b && (g.cursor = c);" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "cx" & Chr(34) & " == b && (g.left = c - d.removePx(g.width) / 2);" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "cy" & Chr(34) & " == b && (g.top = c - d.removePx(g.height) / 2);" & vbCrLf)
        fsT.Writetext("                var k = this.styleMap[b];" & vbCrLf)
        fsT.Writetext("                void 0 !== k && (g[k] = c);" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "text" & Chr(34) & " == f && (" & Chr(34) & "text-anchor" & Chr(34) & " == b && (a.anchor = c, k = h.clientWidth, " & Chr(34) & "end" & Chr(34) & " == c && (g.marginLeft = -k + " & Chr(34) & "px" & Chr(34) & "), " & Chr(34) & "middle" & Chr(34) & " == c && (g.marginLeft = -(k / 2) + " & Chr(34) & "px" & Chr(34) & ", g.textAlign = " & Chr(34) & "center" & Chr(34) & ")," & vbCrLf)
        fsT.Writetext("                    " & Chr(34) & "start" & Chr(34) & " == c && (g.marginLeft = " & Chr(34) & "0px" & Chr(34) & ")), " & Chr(34) & "fill" & Chr(34) & " == b && (g.color = c), " & Chr(34) & "font-weight" & Chr(34) & " == b && (g.fontWeight = c));" & vbCrLf)
        fsT.Writetext("                if (g = a.children) for (k = 0; k < g.length; k++) g[k].setAttr(b, c);" & vbCrLf)
        fsT.Writetext("                if (" & Chr(34) & "shape" & Chr(34) & " == f) {" & vbCrLf)
        fsT.Writetext("                    " & Chr(34) & "cs" & Chr(34) & " == b && (h.style.width = " & Chr(34) & "100px" & Chr(34) & ", h.style.height = " & Chr(34) & "100px" & Chr(34) & ", h.setAttribute(" & Chr(34) & "coordsize" & Chr(34) & ", c));" & vbCrLf)
        fsT.Writetext("                    " & Chr(34) & "d" & Chr(34) & " == b && h.setAttribute(" & Chr(34) & "path" & Chr(34) & ", this.svgPathToVml(c));" & vbCrLf)
        fsT.Writetext("                    " & Chr(34) & "dd" & Chr(34) & " == b && h.setAttribute(" & Chr(34) & "path" & Chr(34) & ", c);" & vbCrLf)
        fsT.Writetext("                    f = a.stroke;" & vbCrLf)
        fsT.Writetext("                    a = a.fill;" & vbCrLf)
        fsT.Writetext("                    " & Chr(34) & "stroke" & Chr(34) & " == b && (e ? f.color = c : f.setAttribute(" & Chr(34) & "color" & Chr(34) & ", c));" & vbCrLf)
        fsT.Writetext("                    " & Chr(34) & "stroke-width" & Chr(34) & " == b && (e ? f.weight = c : f.setAttribute(" & Chr(34) & "weight" & Chr(34) & ", c));" & vbCrLf)
        fsT.Writetext("                    " & Chr(34) & "stroke-opacity" & Chr(34) & " == b && (e ? f.opacity = c : f.setAttribute(" & Chr(34) & "opacity" & Chr(34) & ", c));" & vbCrLf)
        fsT.Writetext("                    " & Chr(34) & "stroke-dasharray" & Chr(34) & " == b && (g = " & Chr(34) & "solid" & Chr(34) & ", 0 < c && 3 > c && (g = " & Chr(34) & "dot" & Chr(34) & "), 3 <= c && 6 >= c && (g = " & Chr(34) & "dash" & Chr(34) & "), 6 < c && (g = " & Chr(34) & "longdash" & Chr(34) & "), e ? f.dashstyle = g : f.setAttribute(" & Chr(34) & "dashstyle" & Chr(34) & ", g));" & vbCrLf)
        fsT.Writetext("                    if (" & Chr(34) & "fill-opacity" & Chr(34) & " == b || " & Chr(34) & "opacity" & Chr(34) & " == b) 0 === c ? e ? a.on = !1 : a.setAttribute(" & Chr(34) & "on" & Chr(34) & ", !1) : e ? a.opacity = c : a.setAttribute(" & Chr(34) & "opacity" & Chr(34) & ", c);" & vbCrLf)
        fsT.Writetext("                    " & Chr(34) & "fill" & Chr(34) & " == b && (e ? a.color = c : a.setAttribute(" & Chr(34) & "color" & Chr(34) & ", c));" & vbCrLf)
        fsT.Writetext("                    " & Chr(34) & "rx" & Chr(34) & " == b && (e ? h.arcSize = c + " & Chr(34) & "%" & Chr(34) & " : h.setAttribute(" & Chr(34) & "arcsize" & Chr(34) & ", c + " & Chr(34) & "%" & Chr(34) & "))" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        attr: function (a, b) {" & vbCrLf)
        fsT.Writetext("            for (var c in b) b.hasOwnProperty(c) && this.setAttr(a, c, b[c])" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        text: function (a," & vbCrLf)
        fsT.Writetext("        b, c) {" & vbCrLf)
        fsT.Writetext("            var e = new d.AmDObject(" & Chr(34) & "text" & Chr(34) & ", this.D)," & vbCrLf)
        fsT.Writetext("                h = e.node;" & vbCrLf)
        fsT.Writetext("            h.style.whiteSpace = " & Chr(34) & "pre" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            h.innerHTML = a;" & vbCrLf)
        fsT.Writetext("            this.D.addToContainer(h, c);" & vbCrLf)
        fsT.Writetext("            this.attr(e, b);" & vbCrLf)
        fsT.Writetext("            return e" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getBBox: function (a) {" & vbCrLf)
        fsT.Writetext("            return this.getBox(a.node)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getBox: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = a.offsetLeft," & vbCrLf)
        fsT.Writetext("                c = a.offsetTop," & vbCrLf)
        fsT.Writetext("                d = a.offsetWidth," & vbCrLf)
        fsT.Writetext("                h = a.offsetHeight," & vbCrLf)
        fsT.Writetext("                f;" & vbCrLf)
        fsT.Writetext("            if (a.hasChildNodes()) {" & vbCrLf)
        fsT.Writetext("                var g, k, l;" & vbCrLf)
        fsT.Writetext("                for (l = 0; l < a.childNodes.length; l++) {" & vbCrLf)
        fsT.Writetext("                    f = this.getBox(a.childNodes[l]);" & vbCrLf)
        fsT.Writetext("                    var m = f.x;" & vbCrLf)
        fsT.Writetext("                    isNaN(m) || (isNaN(g) ? g = m : m < g && (g = m));" & vbCrLf)
        fsT.Writetext("                    var n = f.y;" & vbCrLf)
        fsT.Writetext("                    isNaN(n) || (isNaN(k) ? k = n : n < k && (k = n));" & vbCrLf)
        fsT.Writetext("                    m = f.width + m;" & vbCrLf)
        fsT.Writetext("                    isNaN(m) || (d = Math.max(d," & vbCrLf)
        fsT.Writetext("                    m));" & vbCrLf)
        fsT.Writetext("                    f = f.height + n;" & vbCrLf)
        fsT.Writetext("                    isNaN(f) || (h = Math.max(h, f))" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("                0 > g && (b += g);" & vbCrLf)
        fsT.Writetext("                0 > k && (c += k)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            return {" & vbCrLf)
        fsT.Writetext("                x: b," & vbCrLf)
        fsT.Writetext("                y: c," & vbCrLf)
        fsT.Writetext("                width: d," & vbCrLf)
        fsT.Writetext("                height: h" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        setText: function (a, b) {" & vbCrLf)
        fsT.Writetext("            var c = a.node;" & vbCrLf)
        fsT.Writetext("            c && (c.innerHTML = b);" & vbCrLf)
        fsT.Writetext("            this.setAttr(a, " & Chr(34) & "text-anchor" & Chr(34) & ", a.anchor)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        addListener: function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            a.node[" & Chr(34) & "on" & Chr(34) & " + b] = c" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        move: function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            var e = a.node," & vbCrLf)
        fsT.Writetext("                h = e.style;" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "text" & Chr(34) & " == a.type && (c -= d.removePx(h.fontSize) / 2 - 1);" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "oval" & Chr(34) & " == a.shapeType && (b -= d.removePx(h.width) / 2, c -= d.removePx(h.height) / 2);" & vbCrLf)
        fsT.Writetext("            a = a.bw;" & vbCrLf)
        fsT.Writetext("            isNaN(a) || (b -= a, c -= a);" & vbCrLf)
        fsT.Writetext("            isNaN(b) || isNaN(c) || (e.style.left = b + " & Chr(34) & "px" & Chr(34) & ", e.style.top = c + " & Chr(34) & "px" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        svgPathToVml: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = a.split(" & Chr(34) & " " & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            a = " & Chr(34) & "" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            var c, d = Math.round," & vbCrLf)
        fsT.Writetext("                h;" & vbCrLf)
        fsT.Writetext("            for (h = 0; h < b.length; h++) {" & vbCrLf)
        fsT.Writetext("                var f = b[h]," & vbCrLf)
        fsT.Writetext("                    g = f.substring(0, 1)," & vbCrLf)
        fsT.Writetext("                    f = f.substring(1)," & vbCrLf)
        fsT.Writetext("                    k = f.split(" & Chr(34) & "," & Chr(34) & ")," & vbCrLf)
        fsT.Writetext("                    l = d(k[0]) + " & Chr(34) & "," & Chr(34) & " + d(k[1]);" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "M" & Chr(34) & " == g && (a += " & Chr(34) & " m " & Chr(34) & " + l);" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "L" & Chr(34) & " == g && (a += " & Chr(34) & " l " & Chr(34) & " + l);" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "Z" & Chr(34) & " == g && (a += " & Chr(34) & " x e" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                if (" & Chr(34) & "Q" & Chr(34) & " == g) {" & vbCrLf)
        fsT.Writetext("                    var m = c.length," & vbCrLf)
        fsT.Writetext("                        n = c[m - 1]," & vbCrLf)
        fsT.Writetext("                        q = k[0]," & vbCrLf)
        fsT.Writetext("                        p = k[1]," & vbCrLf)
        fsT.Writetext("                        l = k[2]," & vbCrLf)
        fsT.Writetext("                        r = k[3];" & vbCrLf)
        fsT.Writetext("                    c = d(c[m - 2] / 3 + 2 / 3 * q);" & vbCrLf)
        fsT.Writetext("                    n = d(n / 3 + 2 / 3 * p);" & vbCrLf)
        fsT.Writetext("                    q = d(2 / 3 * q + l / 3);" & vbCrLf)
        fsT.Writetext("                    p = d(2 / 3 * p + r / 3);" & vbCrLf)
        fsT.Writetext("                    a += " & Chr(34) & " c " & Chr(34) & " + c + " & Chr(34) & "," & Chr(34) & " + n + " & Chr(34) & "," & Chr(34) & " + q + " & Chr(34) & "," & Chr(34) & " + p + " & Chr(34) & "," & Chr(34) & " + l + " & Chr(34) & "," & Chr(34) & " + r" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "A" & Chr(34) & " == g && (a += " & Chr(34) & " wa " & Chr(34) & " + f);" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "B" & Chr(34) & " == g && (a += " & Chr(34) & " at " & Chr(34) & " + f);" & vbCrLf)
        fsT.Writetext("                c = k" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            return a" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        animate: function (a, b, c, d, h) {" & vbCrLf)
        fsT.Writetext("            var f = a.node," & vbCrLf)
        fsT.Writetext("                g = this.chart;" & vbCrLf)
        fsT.Writetext("            if (" & Chr(34) & "translate" & Chr(34) & " == b) {" & vbCrLf)
        fsT.Writetext("                b = c.split(" & Chr(34) & "," & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                c = b[1];" & vbCrLf)
        fsT.Writetext("                var k = f.offsetTop;" & vbCrLf)
        fsT.Writetext("                g.animate(a, " & Chr(34) & "left" & Chr(34) & ", f.offsetLeft, b[0], d, h, " & Chr(34) & "px" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                g.animate(a, " & Chr(34) & "top" & Chr(34) & ", k, c, d, h, " & Chr(34) & "px" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        clipRect: function (a, b, c, d, h) {" & vbCrLf)
        fsT.Writetext("            a = a.node;" & vbCrLf)
        fsT.Writetext("            0 === b && 0 === c ? (a.style.width = d + " & Chr(34) & "px" & Chr(34) & ", a.style.height = h + " & Chr(34) & "px" & Chr(34) & ", a.style.overflow = " & Chr(34) & "hidden" & Chr(34) & ") : a.style.clip = " & Chr(34) & "rect(" & Chr(34) & " + c + " & Chr(34) & "px " & Chr(34) & " + (b + d) + " & Chr(34) & "px " & Chr(34) & " + (c + h) + " & Chr(34) & "px " & Chr(34) & " + b + " & Chr(34) & "px)" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        rotate: function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            if (0 !== Number(b)) {" & vbCrLf)
        fsT.Writetext("                var e = a.node;" & vbCrLf)
        fsT.Writetext("                a = e.style;" & vbCrLf)
        fsT.Writetext("                c || (c = this.getBGColor(e.parentNode));" & vbCrLf)
        fsT.Writetext("                a.backgroundColor = c;" & vbCrLf)
        fsT.Writetext("                a.paddingLeft = 1;" & vbCrLf)
        fsT.Writetext("                c = b * Math.PI / 180;" & vbCrLf)
        fsT.Writetext("                var h = Math.cos(c)," & vbCrLf)
        fsT.Writetext("                    f = Math.sin(c)," & vbCrLf)
        fsT.Writetext("                    g = d.removePx(a.left)," & vbCrLf)
        fsT.Writetext("                    k = d.removePx(a.top)," & vbCrLf)
        fsT.Writetext("                    l = e.offsetWidth," & vbCrLf)
        fsT.Writetext("                    e = e.offsetHeight;" & vbCrLf)
        fsT.Writetext("                b /= Math.abs(b);" & vbCrLf)
        fsT.Writetext("                a.left = g + l / 2 - l / 2 * Math.cos(c) - b * e / 2 * Math.sin(c) + 3;" & vbCrLf)
        fsT.Writetext("                a.top = k - b * l / 2 * Math.sin(c) + b * e / 2 * Math.sin(c);" & vbCrLf)
        fsT.Writetext("                a.cssText = a.cssText + " & Chr(34) & "; filter:progid:DXImageTransform.Microsoft.Matrix(M11='" & Chr(34) & " + h + " & Chr(34) & "', M12='" & Chr(34) & " + -f + " & Chr(34) & "', M21='" & Chr(34) & " + f + " & Chr(34) & "', M22='" & Chr(34) & " + h + " & Chr(34) & "', sizingmethod='auto expand');" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getBGColor: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = " & Chr(34) & "#FFFFFF" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            if (a.style) {" & vbCrLf)
        fsT.Writetext("                var c = a.style.backgroundColor;" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "" & Chr(34) & " !== c ? b = c : a.parentNode && (b = this.getBGColor(a.parentNode))" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            return b" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        set: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = new d.AmDObject(" & Chr(34) & "group" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            this.D);" & vbCrLf)
        fsT.Writetext("            this.D.container.appendChild(b.node);" & vbCrLf)
        fsT.Writetext("            if (a) {" & vbCrLf)
        fsT.Writetext("                var c;" & vbCrLf)
        fsT.Writetext("                for (c = 0; c < a.length; c++) b.push(a[c])" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            return b" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        gradient: function (a, b, c, d) {" & vbCrLf)
        fsT.Writetext("            var h = " & Chr(34) & "" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "radialGradient" & Chr(34) & " == b && (b = " & Chr(34) & "gradientradial" & Chr(34) & ", c.reverse());" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "linearGradient" & Chr(34) & " == b && (b = " & Chr(34) & "gradient" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            var f;" & vbCrLf)
        fsT.Writetext("            for (f = 0; f < c.length; f++) {" & vbCrLf)
        fsT.Writetext("                var g = Math.round(100 * f / (c.length - 1))," & vbCrLf)
        fsT.Writetext("                    h = h + (g + " & Chr(34) & "% " & Chr(34) & " + c[f]);" & vbCrLf)
        fsT.Writetext("                f < c.length - 1 && (h += " & Chr(34) & "," & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            a = a.fill;" & vbCrLf)
        fsT.Writetext("            90 == d ? d = 0 : 270 == d ? d = 180 : 180 == d ? d = 90 : 0 === d && (d = 270);" & vbCrLf)
        fsT.Writetext("            8 === document.documentMode ? (a.type = b, a.angle = d) : (a.setAttribute(" & Chr(34) & "type" & Chr(34) & ", b), a.setAttribute(" & Chr(34) & "angle" & Chr(34) & ", d));" & vbCrLf)
        fsT.Writetext("            h && (a.colors.value = h)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        remove: function (a) {" & vbCrLf)
        fsT.Writetext("            a.clipPath && this.D.remove(a.clipPath);" & vbCrLf)
        fsT.Writetext("            this.D.remove(a.node)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        disableSelection: function (a) {" & vbCrLf)
        fsT.Writetext("            void 0 !== typeof a.onselectstart && (a.onselectstart = function () {" & vbCrLf)
        fsT.Writetext("                return !1" & vbCrLf)
        fsT.Writetext("            });" & vbCrLf)
        fsT.Writetext("            a.style.cursor = " & Chr(34) & "default" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        pattern: function (a, b, c, e) {" & vbCrLf)
        fsT.Writetext("            c = a.node;" & vbCrLf)
        fsT.Writetext("            a = a.fill;" & vbCrLf)
        fsT.Writetext("            var h = " & Chr(34) & "none" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            b.color && (h = b.color);" & vbCrLf)
        fsT.Writetext("            c.fillColor = h;" & vbCrLf)
        fsT.Writetext("            b = b.url;" & vbCrLf)
        fsT.Writetext("            d.isAbsolute(b) || (b = e + b);" & vbCrLf)
        fsT.Writetext("            8 === document.documentMode ? (a.type = " & Chr(34) & "tile" & Chr(34) & ", a.src = b) : (a.setAttribute(" & Chr(34) & "type" & Chr(34) & ", " & Chr(34) & "tile" & Chr(34) & "), a.setAttribute(" & Chr(34) & "src" & Chr(34) & ", b))" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        update: function () {}" & vbCrLf)
        fsT.Writetext("    })" & vbCrLf)
        fsT.Writetext("})();" & vbCrLf)
        fsT.Writetext("(function () {" & vbCrLf)
        fsT.Writetext("    var d = window.AmCharts;" & vbCrLf)
        fsT.Writetext("    d.SVGRenderer = d.Class({" & vbCrLf)
        fsT.Writetext("        construct: function (a) {" & vbCrLf)
        fsT.Writetext("            this.D = a;" & vbCrLf)
        fsT.Writetext("            this.animations = []" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        create: function (a, b) {" & vbCrLf)
        fsT.Writetext("            return document.createElementNS(d.SVG_NS, b)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        attr: function (a, b) {" & vbCrLf)
        fsT.Writetext("            for (var c in b) b.hasOwnProperty(c) && this.setAttr(a, c, b[c])" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        setAttr: function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            void 0 !== c && a.node.setAttribute(b, c)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        animate: function (a, b, c, e, h) {" & vbCrLf)
        fsT.Writetext("            var f = a.node;" & vbCrLf)
        fsT.Writetext("            a[" & Chr(34) & "an_" & Chr(34) & " + b] && d.removeFromArray(this.animations, a[" & Chr(34) & "an_" & Chr(34) & " + b]);" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "translate" & Chr(34) & " == b ? (f = (f = f.getAttribute(" & Chr(34) & "transform" & Chr(34) & ")) ? String(f).substring(10, f.length - 1) : " & Chr(34) & "0,0" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            f = f.split(" & Chr(34) & ", " & Chr(34) & ").join(" & Chr(34) & " " & Chr(34) & "), f = f.split(" & Chr(34) & " " & Chr(34) & ").join(" & Chr(34) & "," & Chr(34) & "), 0 === f && (f = " & Chr(34) & "0,0" & Chr(34) & ")) : f = Number(f.getAttribute(b));" & vbCrLf)
        fsT.Writetext("            c = {" & vbCrLf)
        fsT.Writetext("                obj: a," & vbCrLf)
        fsT.Writetext("                frame: 0," & vbCrLf)
        fsT.Writetext("                attribute: b," & vbCrLf)
        fsT.Writetext("                from: f," & vbCrLf)
        fsT.Writetext("                to: c," & vbCrLf)
        fsT.Writetext("                time: e," & vbCrLf)
        fsT.Writetext("                effect: h" & vbCrLf)
        fsT.Writetext("            };" & vbCrLf)
        fsT.Writetext("            this.animations.push(c);" & vbCrLf)
        fsT.Writetext("            a[" & Chr(34) & "an_" & Chr(34) & " + b] = c" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        update: function () {" & vbCrLf)
        fsT.Writetext("            var a, b = this.animations;" & vbCrLf)
        fsT.Writetext("            for (a = b.length - 1; 0 <= a; a--) {" & vbCrLf)
        fsT.Writetext("                var c = b[a]," & vbCrLf)
        fsT.Writetext("                    e = 1E3 * c.time / d.updateRate," & vbCrLf)
        fsT.Writetext("                    h = c.frame + 1," & vbCrLf)
        fsT.Writetext("                    f = c.obj," & vbCrLf)
        fsT.Writetext("                    g = c.attribute," & vbCrLf)
        fsT.Writetext("                    k, l, m;" & vbCrLf)
        fsT.Writetext("                h <= e ? (c.frame++, " & Chr(34) & "translate" & Chr(34) & " == g ? (k = c.from.split(" & Chr(34) & "," & Chr(34) & "), g = Number(k[0]), k = Number(k[1]), isNaN(k) && (k = 0), l = c.to.split(" & Chr(34) & "," & Chr(34) & "), m = Number(l[0]), l = Number(l[1]), m = 0 === m - g ? m : Math.round(d[c.effect](0," & vbCrLf)
        fsT.Writetext("                h, g, m - g, e)), c = 0 === l - k ? l : Math.round(d[c.effect](0, h, k, l - k, e)), g = " & Chr(34) & "transform" & Chr(34) & ", c = " & Chr(34) & "translate(" & Chr(34) & " + m + " & Chr(34) & "," & Chr(34) & " + c + " & Chr(34) & ")" & Chr(34) & ") : (l = Number(c.from), k = Number(c.to), m = k - l, c = d[c.effect](0, h, l, m, e), isNaN(c) && (c = k), 0 === m && this.animations.splice(a, 1)), this.setAttr(f, g, c)) : (" & Chr(34) & "translate" & Chr(34) & " == g ? (l = c.to.split(" & Chr(34) & "," & Chr(34) & "), m = Number(l[0]), l = Number(l[1]), f.translate(m, l)) : (k = Number(c.to), this.setAttr(f, g, k)), this.animations.splice(a, 1))" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getBBox: function (a) {" & vbCrLf)
        fsT.Writetext("            if (a = a.node) try {" & vbCrLf)
        fsT.Writetext("                return a.getBBox()" & vbCrLf)
        fsT.Writetext("            } catch (b) {}" & vbCrLf)
        fsT.Writetext("            return {" & vbCrLf)
        fsT.Writetext("                width: 0," & vbCrLf)
        fsT.Writetext("                height: 0," & vbCrLf)
        fsT.Writetext("                x: 0," & vbCrLf)
        fsT.Writetext("                y: 0" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        path: function (a," & vbCrLf)
        fsT.Writetext("        b) {" & vbCrLf)
        fsT.Writetext("            a.node.setAttributeNS(d.SVG_XLINK, " & Chr(34) & "xlink:href" & Chr(34) & ", b)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        clipRect: function (a, b, c, e, h) {" & vbCrLf)
        fsT.Writetext("            var f = a.node," & vbCrLf)
        fsT.Writetext("                g = a.clipPath;" & vbCrLf)
        fsT.Writetext("            g && this.D.remove(g);" & vbCrLf)
        fsT.Writetext("            var k = f.parentNode;" & vbCrLf)
        fsT.Writetext("            k && (f = document.createElementNS(d.SVG_NS, " & Chr(34) & "clipPath" & Chr(34) & "), g = d.getUniqueId(), f.setAttribute(" & Chr(34) & "id" & Chr(34) & ", g), this.D.rect(b, c, e, h, 0, 0, f), k.appendChild(f), b = " & Chr(34) & "#" & Chr(34) & ", d.baseHref && !d.isIE && (b = this.removeTarget(window.location.href) + b), this.setAttr(a, " & Chr(34) & "clip-path" & Chr(34) & ", " & Chr(34) & "url(" & Chr(34) & " + b + g + " & Chr(34) & ")" & Chr(34) & "), this.clipPathC++, a.clipPath = f)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        text: function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            var e = new d.AmDObject(" & Chr(34) & "text" & Chr(34) & ", this.D);" & vbCrLf)
        fsT.Writetext("            a = String(a).split(" & Chr(34) & "\n" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            var h = b[" & Chr(34) & "font-size" & Chr(34) & "]," & vbCrLf)
        fsT.Writetext("                f;" & vbCrLf)
        fsT.Writetext("            for (f = 0; f < a.length; f++) {" & vbCrLf)
        fsT.Writetext("                var g = this.create(null, " & Chr(34) & "tspan" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                g.appendChild(document.createTextNode(a[f]));" & vbCrLf)
        fsT.Writetext("                g.setAttribute(" & Chr(34) & "y" & Chr(34) & ", (h + 2) * f + Math.round(h / 2));" & vbCrLf)
        fsT.Writetext("                g.setAttribute(" & Chr(34) & "x" & Chr(34) & ", 0);" & vbCrLf)
        fsT.Writetext("                g.style.fontSize = h + " & Chr(34) & "px" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                e.node.appendChild(g)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            e.node.setAttribute(" & Chr(34) & "y" & Chr(34) & ", Math.round(h / 2));" & vbCrLf)
        fsT.Writetext("            this.attr(e, b);" & vbCrLf)
        fsT.Writetext("            this.D.addToContainer(e.node, c);" & vbCrLf)
        fsT.Writetext("            return e" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        setText: function (a, b) {" & vbCrLf)
        fsT.Writetext("            var c = a.node;" & vbCrLf)
        fsT.Writetext("            c && (c.removeChild(c.firstChild), c.appendChild(document.createTextNode(b)))" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        move: function (a, b, c, d) {" & vbCrLf)
        fsT.Writetext("            isNaN(b) && (b = 0);" & vbCrLf)
        fsT.Writetext("            isNaN(c) && (c = 0);" & vbCrLf)
        fsT.Writetext("            b =" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "translate(" & Chr(34) & " + b + " & Chr(34) & "," & Chr(34) & " + c + " & Chr(34) & ")" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            d && (b = b + " & Chr(34) & " scale(" & Chr(34) & " + d + " & Chr(34) & ")" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            this.setAttr(a, " & Chr(34) & "transform" & Chr(34) & ", b)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        rotate: function (a, b) {" & vbCrLf)
        fsT.Writetext("            var c = a.node.getAttribute(" & Chr(34) & "transform" & Chr(34) & ")," & vbCrLf)
        fsT.Writetext("                d = " & Chr(34) & "rotate(" & Chr(34) & " + b + " & Chr(34) & ")" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            c && (d = c + " & Chr(34) & " " & Chr(34) & " + d);" & vbCrLf)
        fsT.Writetext("            this.setAttr(a, " & Chr(34) & "transform" & Chr(34) & ", d)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        set: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = new d.AmDObject(" & Chr(34) & "g" & Chr(34) & ", this.D);" & vbCrLf)
        fsT.Writetext("            this.D.container.appendChild(b.node);" & vbCrLf)
        fsT.Writetext("            if (a) {" & vbCrLf)
        fsT.Writetext("                var c;" & vbCrLf)
        fsT.Writetext("                for (c = 0; c < a.length; c++) b.push(a[c])" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            return b" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        addListener: function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            a.node[" & Chr(34) & "on" & Chr(34) & " + b] = c" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        gradient: function (a, b, c, e) {" & vbCrLf)
        fsT.Writetext("            var h = a.node," & vbCrLf)
        fsT.Writetext("                f = a.grad;" & vbCrLf)
        fsT.Writetext("            f && this.D.remove(f);" & vbCrLf)
        fsT.Writetext("            b = document.createElementNS(d.SVG_NS," & vbCrLf)
        fsT.Writetext("            b);" & vbCrLf)
        fsT.Writetext("            f = d.getUniqueId();" & vbCrLf)
        fsT.Writetext("            b.setAttribute(" & Chr(34) & "id" & Chr(34) & ", f);" & vbCrLf)
        fsT.Writetext("            if (!isNaN(e)) {" & vbCrLf)
        fsT.Writetext("                var g = 0," & vbCrLf)
        fsT.Writetext("                    k = 0," & vbCrLf)
        fsT.Writetext("                    l = 0," & vbCrLf)
        fsT.Writetext("                    m = 0;" & vbCrLf)
        fsT.Writetext("                90 == e ? l = 100 : 270 == e ? m = 100 : 180 == e ? g = 100 : 0 === e && (k = 100);" & vbCrLf)
        fsT.Writetext("                b.setAttribute(" & Chr(34) & "x1" & Chr(34) & ", g + " & Chr(34) & "%" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                b.setAttribute(" & Chr(34) & "x2" & Chr(34) & ", k + " & Chr(34) & "%" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                b.setAttribute(" & Chr(34) & "y1" & Chr(34) & ", l + " & Chr(34) & "%" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                b.setAttribute(" & Chr(34) & "y2" & Chr(34) & ", m + " & Chr(34) & "%" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            for (e = 0; e < c.length; e++) g = document.createElementNS(d.SVG_NS, " & Chr(34) & "stop" & Chr(34) & "), k = 100 * e / (c.length - 1), 0 === e && (k = 0), g.setAttribute(" & Chr(34) & "offset" & Chr(34) & ", k + " & Chr(34) & "%" & Chr(34) & "), g.setAttribute(" & Chr(34) & "stop-color" & Chr(34) & ", c[e]), b.appendChild(g);" & vbCrLf)
        fsT.Writetext("            h.parentNode.appendChild(b);" & vbCrLf)
        fsT.Writetext("            c = " & Chr(34) & "#" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            d.baseHref && !d.isIE && (c = this.removeTarget(window.location.href) + c);" & vbCrLf)
        fsT.Writetext("            h.setAttribute(" & Chr(34) & "fill" & Chr(34) & ", " & Chr(34) & "url(" & Chr(34) & " + c + f + " & Chr(34) & ")" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            a.grad = b" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        removeTarget: function (a) {" & vbCrLf)
        fsT.Writetext("            return a.split(" & Chr(34) & "#" & Chr(34) & ")[0]" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        pattern: function (a, b, c, e) {" & vbCrLf)
        fsT.Writetext("            var h = a.node;" & vbCrLf)
        fsT.Writetext("            isNaN(c) && (c = 1);" & vbCrLf)
        fsT.Writetext("            var f = a.patternNode;" & vbCrLf)
        fsT.Writetext("            f && this.D.remove(f);" & vbCrLf)
        fsT.Writetext("            var f = document.createElementNS(d.SVG_NS, " & Chr(34) & "pattern" & Chr(34) & ")," & vbCrLf)
        fsT.Writetext("                g = d.getUniqueId()," & vbCrLf)
        fsT.Writetext("                k = b;" & vbCrLf)
        fsT.Writetext("            b.url && (k = b.url);" & vbCrLf)
        fsT.Writetext("            d.isAbsolute(k) || (k = e + k);" & vbCrLf)
        fsT.Writetext("            e = Number(b.width);" & vbCrLf)
        fsT.Writetext("            isNaN(e) && (e = 4);" & vbCrLf)
        fsT.Writetext("            var l = Number(b.height);" & vbCrLf)
        fsT.Writetext("            isNaN(l) && (l = 4);" & vbCrLf)
        fsT.Writetext("            e /= c;" & vbCrLf)
        fsT.Writetext("            l /= c;" & vbCrLf)
        fsT.Writetext("            c = b.x;" & vbCrLf)
        fsT.Writetext("            isNaN(c) && (c = 0);" & vbCrLf)
        fsT.Writetext("            var m = -Math.random() * Number(b.randomX);" & vbCrLf)
        fsT.Writetext("            isNaN(m) || (c = m);" & vbCrLf)
        fsT.Writetext("            m = b.y;" & vbCrLf)
        fsT.Writetext("            isNaN(m) && (m = 0);" & vbCrLf)
        fsT.Writetext("            var n = -Math.random() * Number(b.randomY);" & vbCrLf)
        fsT.Writetext("            isNaN(n) || (m = n);" & vbCrLf)
        fsT.Writetext("            f.setAttribute(" & Chr(34) & "id" & Chr(34) & ", g);" & vbCrLf)
        fsT.Writetext("            f.setAttribute(" & Chr(34) & "width" & Chr(34) & ", e);" & vbCrLf)
        fsT.Writetext("            f.setAttribute(" & Chr(34) & "height" & Chr(34) & ", l);" & vbCrLf)
        fsT.Writetext("            f.setAttribute(" & Chr(34) & "patternUnits" & Chr(34) & ", " & Chr(34) & "userSpaceOnUse" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            f.setAttribute(" & Chr(34) & "xlink:href" & Chr(34) & ", k);" & vbCrLf)
        fsT.Writetext("            b.color && (n = document.createElementNS(d.SVG_NS, " & Chr(34) & "rect" & Chr(34) & "), n.setAttributeNS(null, " & Chr(34) & "height" & Chr(34) & ", e), n.setAttributeNS(null, " & Chr(34) & "width" & Chr(34) & ", l), n.setAttributeNS(null, " & Chr(34) & "fill" & Chr(34) & ", b.color), f.appendChild(n));" & vbCrLf)
        fsT.Writetext("            this.D.image(k, 0, 0, e, l, f).translate(c, m);" & vbCrLf)
        fsT.Writetext("            k = " & Chr(34) & "#" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            d.baseHref && !d.isIE && (k = this.removeTarget(window.location.href) + k);" & vbCrLf)
        fsT.Writetext("            h.setAttribute(" & Chr(34) & "fill" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "url(" & Chr(34) & " + k + g + " & Chr(34) & ")" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            a.patternNode = f;" & vbCrLf)
        fsT.Writetext("            h.parentNode.appendChild(f)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        remove: function (a) {" & vbCrLf)
        fsT.Writetext("            a.clipPath && this.D.remove(a.clipPath);" & vbCrLf)
        fsT.Writetext("            a.grad && this.D.remove(a.grad);" & vbCrLf)
        fsT.Writetext("            a.patternNode && this.D.remove(a.patternNode);" & vbCrLf)
        fsT.Writetext("            this.D.remove(a.node)" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    })" & vbCrLf)
        fsT.Writetext("})();" & vbCrLf)
        fsT.Writetext("AmCharts.AmDSet = AmCharts.Class({" & vbCrLf)
        fsT.Writetext("    construct: function (d) {" & vbCrLf)
        fsT.Writetext("        this.create(" & Chr(34) & "g" & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("    }," & vbCrLf)
        fsT.Writetext("    attr: function (d) {" & vbCrLf)
        fsT.Writetext("        this.R.attr(this.node, d)" & vbCrLf)
        fsT.Writetext("    }," & vbCrLf)
        fsT.Writetext("    move: function (d, a) {" & vbCrLf)
        fsT.Writetext("        this.R.move(this.node, d, a)" & vbCrLf)
        fsT.Writetext("    }" & vbCrLf)
        fsT.Writetext("});" & vbCrLf)
        fsT.Writetext("(function () {" & vbCrLf)
        fsT.Writetext("    var d = window.AmCharts;" & vbCrLf)
        fsT.Writetext("    d.AmLegend = d.Class({" & vbCrLf)
        fsT.Writetext("        construct: function (a) {" & vbCrLf)
        fsT.Writetext("            this.enabled = !0;" & vbCrLf)
        fsT.Writetext("            this.cname = " & Chr(34) & "AmLegend" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.createEvents(" & Chr(34) & "rollOverMarker" & Chr(34) & ", " & Chr(34) & "rollOverItem" & Chr(34) & ", " & Chr(34) & "rollOutMarker" & Chr(34) & ", " & Chr(34) & "rollOutItem" & Chr(34) & ", " & Chr(34) & "showItem" & Chr(34) & ", " & Chr(34) & "hideItem" & Chr(34) & ", " & Chr(34) & "clickMarker" & Chr(34) & ", " & Chr(34) & "rollOverItem" & Chr(34) & ", " & Chr(34) & "rollOutItem" & Chr(34) & ", " & Chr(34) & "clickLabel" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            this.position = " & Chr(34) & "bottom" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.borderColor = this.color = " & Chr(34) & "#000000" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.borderAlpha = 0;" & vbCrLf)
        fsT.Writetext("            this.markerLabelGap = 5;" & vbCrLf)
        fsT.Writetext("            this.verticalGap = 10;" & vbCrLf)
        fsT.Writetext("            this.align = " & Chr(34) & "left" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.horizontalGap = 0;" & vbCrLf)
        fsT.Writetext("            this.spacing = 10;" & vbCrLf)
        fsT.Writetext("            this.markerDisabledColor = " & Chr(34) & "#AAB3B3" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.markerType =" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "square" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.markerSize = 16;" & vbCrLf)
        fsT.Writetext("            this.markerBorderThickness = this.markerBorderAlpha = 1;" & vbCrLf)
        fsT.Writetext("            this.marginBottom = this.marginTop = 0;" & vbCrLf)
        fsT.Writetext("            this.marginLeft = this.marginRight = 20;" & vbCrLf)
        fsT.Writetext("            this.autoMargins = !0;" & vbCrLf)
        fsT.Writetext("            this.valueWidth = 50;" & vbCrLf)
        fsT.Writetext("            this.switchable = !0;" & vbCrLf)
        fsT.Writetext("            this.switchType = " & Chr(34) & "x" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.switchColor = " & Chr(34) & "#FFFFFF" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.rollOverColor = " & Chr(34) & "#CC0000" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.reversedOrder = !1;" & vbCrLf)
        fsT.Writetext("            this.labelText = " & Chr(34) & "[[title]]" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.valueText = " & Chr(34) & "[[value]]" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.useMarkerColorForLabels = !1;" & vbCrLf)
        fsT.Writetext("            this.rollOverGraphAlpha = 1;" & vbCrLf)
        fsT.Writetext("            this.textClickEnabled = !1;" & vbCrLf)
        fsT.Writetext("            this.equalWidths = !0;" & vbCrLf)
        fsT.Writetext("            this.dateFormat = " & Chr(34) & "DD-MM-YYYY" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.backgroundColor =" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "#FFFFFF" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.backgroundAlpha = 0;" & vbCrLf)
        fsT.Writetext("            this.useGraphSettings = !1;" & vbCrLf)
        fsT.Writetext("            this.showEntries = !0;" & vbCrLf)
        fsT.Writetext("            d.applyTheme(this, a, this.cname)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        setData: function (a) {" & vbCrLf)
        fsT.Writetext("            this.legendData = a;" & vbCrLf)
        fsT.Writetext("            this.invalidateSize()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        invalidateSize: function () {" & vbCrLf)
        fsT.Writetext("            this.destroy();" & vbCrLf)
        fsT.Writetext("            this.entries = [];" & vbCrLf)
        fsT.Writetext("            this.valueLabels = [];" & vbCrLf)
        fsT.Writetext("            var a = this.legendData;" & vbCrLf)
        fsT.Writetext("            this.enabled && (d.ifArray(a) || d.ifArray(this.data)) && this.drawLegend()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        drawLegend: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.chart," & vbCrLf)
        fsT.Writetext("                b = this.position," & vbCrLf)
        fsT.Writetext("                c = this.width," & vbCrLf)
        fsT.Writetext("                e = a.divRealWidth," & vbCrLf)
        fsT.Writetext("                h = a.divRealHeight," & vbCrLf)
        fsT.Writetext("                f = this.div," & vbCrLf)
        fsT.Writetext("                g = this.legendData;" & vbCrLf)
        fsT.Writetext("            this.data && (g = this.data);" & vbCrLf)
        fsT.Writetext("            isNaN(this.fontSize) && (this.fontSize = a.fontSize);" & vbCrLf)
        fsT.Writetext("            if (" & Chr(34) & "right" & Chr(34) & " == b || " & Chr(34) & "left" & Chr(34) & " == b) this.maxColumns = 1, this.autoMargins && (this.marginLeft = this.marginRight = 10);" & vbCrLf)
        fsT.Writetext("            else if (this.autoMargins) {" & vbCrLf)
        fsT.Writetext("                this.marginRight = a.marginRight;" & vbCrLf)
        fsT.Writetext("                this.marginLeft = a.marginLeft;" & vbCrLf)
        fsT.Writetext("                var k = a.autoMarginOffset;" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "bottom" & Chr(34) & " == b ? (this.marginBottom = k, this.marginTop = 0) : (this.marginTop = k, this.marginBottom = 0)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            c = void 0 !== c ? d.toCoordinate(c, e) : a.realWidth;" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "outside" & Chr(34) & " == b ? (c = f.offsetWidth, h = f.offsetHeight, f.clientHeight && (c = f.clientWidth, h = f.clientHeight)) : (isNaN(c) || (f.style.width = c + " & Chr(34) & "px" & Chr(34) & ")," & vbCrLf)
        fsT.Writetext("            f.className = " & Chr(34) & "amChartsLegend " & Chr(34) & " + a.classNamePrefix + " & Chr(34) & "-legend-div" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            this.divWidth = c;" & vbCrLf)
        fsT.Writetext("            (b = this.container) ? (b.container.innerHTML = " & Chr(34) & "" & Chr(34) & ", f.appendChild(b.container), b.width = c, b.height = h, b.addDefs(a)) : b = new d.AmDraw(f, c, h, a);" & vbCrLf)
        fsT.Writetext("            this.container = b;" & vbCrLf)
        fsT.Writetext("            this.lx = 0;" & vbCrLf)
        fsT.Writetext("            this.ly = 8;" & vbCrLf)
        fsT.Writetext("            h = this.markerSize;" & vbCrLf)
        fsT.Writetext("            h > this.fontSize && (this.ly = h / 2 - 1);" & vbCrLf)
        fsT.Writetext("            0 < h && (this.lx += h + this.markerLabelGap);" & vbCrLf)
        fsT.Writetext("            this.titleWidth = 0;" & vbCrLf)
        fsT.Writetext("            if (h = this.title) h = d.text(this.container, h, this.color, a.fontFamily, this.fontSize, " & Chr(34) & "start" & Chr(34) & ", !0), d.setCN(a, h, " & Chr(34) & "legend-title" & Chr(34) & "), h.translate(this.marginLeft," & vbCrLf)
        fsT.Writetext("            this.marginTop + this.verticalGap + this.ly + 1), a = h.getBBox(), this.titleWidth = a.width + 15, this.titleHeight = a.height + 6;" & vbCrLf)
        fsT.Writetext("            this.index = this.maxLabelWidth = 0;" & vbCrLf)
        fsT.Writetext("            if (this.showEntries) {" & vbCrLf)
        fsT.Writetext("                for (a = 0; a < g.length; a++) this.createEntry(g[a]);" & vbCrLf)
        fsT.Writetext("                for (a = this.index = 0; a < g.length; a++) this.createValue(g[a])" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            this.arrangeEntries();" & vbCrLf)
        fsT.Writetext("            this.updateValues()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        arrangeEntries: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.position," & vbCrLf)
        fsT.Writetext("                b = this.marginLeft + this.titleWidth," & vbCrLf)
        fsT.Writetext("                c = this.marginRight," & vbCrLf)
        fsT.Writetext("                e = this.marginTop," & vbCrLf)
        fsT.Writetext("                h = this.marginBottom," & vbCrLf)
        fsT.Writetext("                f = this.horizontalGap," & vbCrLf)
        fsT.Writetext("                g = this.div," & vbCrLf)
        fsT.Writetext("                k = this.divWidth," & vbCrLf)
        fsT.Writetext("                l = this.maxColumns," & vbCrLf)
        fsT.Writetext("                m = this.verticalGap," & vbCrLf)
        fsT.Writetext("                n = this.spacing," & vbCrLf)
        fsT.Writetext("                q = k - c - b," & vbCrLf)
        fsT.Writetext("                p = 0," & vbCrLf)
        fsT.Writetext("                r = 0," & vbCrLf)
        fsT.Writetext("                t = this.container;" & vbCrLf)
        fsT.Writetext("            this.set && this.set.remove();" & vbCrLf)
        fsT.Writetext("            var u = t.set();" & vbCrLf)
        fsT.Writetext("            this.set = u;" & vbCrLf)
        fsT.Writetext("            var z = t.set();" & vbCrLf)
        fsT.Writetext("            u.push(z);" & vbCrLf)
        fsT.Writetext("            var v = this.entries," & vbCrLf)
        fsT.Writetext("                w, x;" & vbCrLf)
        fsT.Writetext("            for (x = 0; x < v.length; x++) {" & vbCrLf)
        fsT.Writetext("                w = v[x].getBBox();" & vbCrLf)
        fsT.Writetext("                var A = w.width;" & vbCrLf)
        fsT.Writetext("                A > p && (p = A);" & vbCrLf)
        fsT.Writetext("                w = w.height;" & vbCrLf)
        fsT.Writetext("                w > r && (r = w)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            var A = r = 0," & vbCrLf)
        fsT.Writetext("                B = f," & vbCrLf)
        fsT.Writetext("                D = 0," & vbCrLf)
        fsT.Writetext("                C = 0;" & vbCrLf)
        fsT.Writetext("            for (x = 0; x < v.length; x++) {" & vbCrLf)
        fsT.Writetext("                var I = v[x];" & vbCrLf)
        fsT.Writetext("                this.reversedOrder && (I = v[v.length - x - 1]);" & vbCrLf)
        fsT.Writetext("                w = I.getBBox();" & vbCrLf)
        fsT.Writetext("                var H;" & vbCrLf)
        fsT.Writetext("                this.equalWidths ? H = f + A * (p + n + this.markerLabelGap) : (H = B, B = B + w.width + f + n);" & vbCrLf)
        fsT.Writetext("                w.height > C && (C = w.height);" & vbCrLf)
        fsT.Writetext("                H + w.width > q && 0 < x && 0 !== A && (r++, A = 0," & vbCrLf)
        fsT.Writetext("                H = f, B = H + w.width + f + n, D = D + C + m, C = 0);" & vbCrLf)
        fsT.Writetext("                I.translate(H, D);" & vbCrLf)
        fsT.Writetext("                A++;" & vbCrLf)
        fsT.Writetext("                !isNaN(l) && A >= l && (A = 0, r++, D = D + C + m, B = f, C = 0);" & vbCrLf)
        fsT.Writetext("                z.push(I)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            w = z.getBBox();" & vbCrLf)
        fsT.Writetext("            l = w.height + 2 * m - 1;" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "left" & Chr(34) & " == a || " & Chr(34) & "right" & Chr(34) & " == a ? (n = w.width + 2 * f, k = n + b + c, g.style.width = k + " & Chr(34) & "px" & Chr(34) & ", this.ieW = k) : n = k - b - c - 1;" & vbCrLf)
        fsT.Writetext("            c = d.polygon(this.container, [0, n, n, 0], [0, 0, l, l], this.backgroundColor, this.backgroundAlpha, 1, this.borderColor, this.borderAlpha);" & vbCrLf)
        fsT.Writetext("            d.setCN(this.chart, c, " & Chr(34) & "legend-bg" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            u.push(c);" & vbCrLf)
        fsT.Writetext("            u.translate(b, e);" & vbCrLf)
        fsT.Writetext("            c.toBack();" & vbCrLf)
        fsT.Writetext("            b = f;" & vbCrLf)
        fsT.Writetext("            if (" & Chr(34) & "top" & Chr(34) & " == a || " & Chr(34) & "bottom" & Chr(34) & " == a || " & Chr(34) & "absolute" & Chr(34) & " == a || " & Chr(34) & "outside" & Chr(34) & " == a) " & Chr(34) & "center" & Chr(34) & " == this.align ? b = f + (n - w.width) / 2 : " & Chr(34) & "right" & Chr(34) & " == this.align && (b = f + n - w.width);" & vbCrLf)
        fsT.Writetext("            z.translate(b, m + 1);" & vbCrLf)
        fsT.Writetext("            this.titleHeight > l && (l = this.titleHeight);" & vbCrLf)
        fsT.Writetext("            a = l + e + h + 1;" & vbCrLf)
        fsT.Writetext("            0 > a && (a = 0);" & vbCrLf)
        fsT.Writetext("            a > this.chart.divRealHeight && (g.style.top = " & Chr(34) & "0px" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            g.style.height = Math.round(a) + " & Chr(34) & "px" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            t.setSize(this.divWidth, a)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        createEntry: function (a) {" & vbCrLf)
        fsT.Writetext("            if (!1 !== a.visibleInLegend) {" & vbCrLf)
        fsT.Writetext("                var b = this.chart," & vbCrLf)
        fsT.Writetext("                    c = a.markerType;" & vbCrLf)
        fsT.Writetext("                a.legendEntryWidth = this.markerSize;" & vbCrLf)
        fsT.Writetext("                c || (c = this.markerType);" & vbCrLf)
        fsT.Writetext("                var e = a.color," & vbCrLf)
        fsT.Writetext("                    h = a.alpha;" & vbCrLf)
        fsT.Writetext("                a.legendKeyColor && (e = a.legendKeyColor());" & vbCrLf)
        fsT.Writetext("                a.legendKeyAlpha && (h = a.legendKeyAlpha());" & vbCrLf)
        fsT.Writetext("                var f;" & vbCrLf)
        fsT.Writetext("                !0 === a.hidden && (f = e = this.markerDisabledColor);" & vbCrLf)
        fsT.Writetext("                var g = a.pattern," & vbCrLf)
        fsT.Writetext("                    k = a.customMarker;" & vbCrLf)
        fsT.Writetext("                k || (k = this.customMarker);" & vbCrLf)
        fsT.Writetext("                var l = this.container," & vbCrLf)
        fsT.Writetext("                    m = this.markerSize," & vbCrLf)
        fsT.Writetext("                    n = 0," & vbCrLf)
        fsT.Writetext("                    q = 0," & vbCrLf)
        fsT.Writetext("                    p = m / 2;" & vbCrLf)
        fsT.Writetext("                if (this.useGraphSettings) {" & vbCrLf)
        fsT.Writetext("                    c = a.type;" & vbCrLf)
        fsT.Writetext("                    this.switchType = void 0;" & vbCrLf)
        fsT.Writetext("                    if (" & Chr(34) & "line" & Chr(34) & " == c || " & Chr(34) & "step" & Chr(34) & " == c || " & Chr(34) & "smoothedLine" & Chr(34) & " == c || " & Chr(34) & "ohlc" & Chr(34) & " == c) g = l.set(), a.hidden || (e = a.lineColorR, f = a.bulletBorderColorR), n = d.line(l, [0, 2 * m], [m / 2, m / 2], e, a.lineAlpha, a.lineThickness, a.dashLength), d.setCN(b, n, " & Chr(34) & "graph-stroke" & Chr(34) & "), g.push(n), a.bullet && (a.hidden || (e = a.bulletColorR), n = d.bullet(l, a.bullet, a.bulletSize," & vbCrLf)
        fsT.Writetext("                    e, a.bulletAlpha, a.bulletBorderThickness, f, a.bulletBorderAlpha)) && (d.setCN(b, n, " & Chr(34) & "graph-bullet" & Chr(34) & "), n.translate(m + 1, m / 2), g.push(n)), p = 0, n = m, q = m / 3;" & vbCrLf)
        fsT.Writetext("                    else {" & vbCrLf)
        fsT.Writetext("                        var r;" & vbCrLf)
        fsT.Writetext("                        a.getGradRotation && (r = a.getGradRotation());" & vbCrLf)
        fsT.Writetext("                        n = a.fillColorsR;" & vbCrLf)
        fsT.Writetext("                        !0 === a.hidden && (n = e);" & vbCrLf)
        fsT.Writetext("                        if (g = this.createMarker(" & Chr(34) & "rectangle" & Chr(34) & ", n, a.fillAlphas, a.lineThickness, e, a.lineAlpha, r, g)) p = m, g.translate(p, m / 2);" & vbCrLf)
        fsT.Writetext("                        n = m" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                    d.setCN(b, g, " & Chr(34) & "graph-" & Chr(34) & " + c);" & vbCrLf)
        fsT.Writetext("                    d.setCN(b, g, " & Chr(34) & "graph-" & Chr(34) & " + a.id)" & vbCrLf)
        fsT.Writetext("                } else k ? g = l.image(k, 0, 0, m, m) : (g = this.createMarker(c, e, h, void 0, void 0, void 0, void 0, g)) && g.translate(m / 2, m / 2);" & vbCrLf)
        fsT.Writetext("                d.setCN(b, g, " & Chr(34) & "legend-marker" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                this.addListeners(g, a);" & vbCrLf)
        fsT.Writetext("                l = l.set([g]);" & vbCrLf)
        fsT.Writetext("                this.switchable && a.switchable && l.setAttr(" & Chr(34) & "cursor" & Chr(34) & ", " & Chr(34) & "pointer" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                void 0 !== a.id && d.setCN(b, l, " & Chr(34) & "legend-item-" & Chr(34) & " + a.id);" & vbCrLf)
        fsT.Writetext("                d.setCN(b, l, a.className, !0);" & vbCrLf)
        fsT.Writetext("                (f = this.switchType) && " & Chr(34) & "none" & Chr(34) & " != f && 0 < m && (" & Chr(34) & "x" & Chr(34) & " == f ? (c = this.createX(), c.translate(m / 2, m / 2)) : c = this.createV(), c.dItem = a, !0 !== a.hidden ? " & Chr(34) & "x" & Chr(34) & " == f ? c.hide() : c.show() : " & Chr(34) & "x" & Chr(34) & " != f && c.hide(), this.switchable || c.hide(), this.addListeners(c, a), a.legendSwitch = c, l.push(c), d.setCN(b, c, " & Chr(34) & "legend-switch" & Chr(34) & "));" & vbCrLf)
        fsT.Writetext("                f = this.color;" & vbCrLf)
        fsT.Writetext("                a.showBalloon && this.textClickEnabled && void 0 !== this.selectedColor && (f = this.selectedColor);" & vbCrLf)
        fsT.Writetext("                this.useMarkerColorForLabels && (f = e);" & vbCrLf)
        fsT.Writetext("                !0 === a.hidden && (f = this.markerDisabledColor);" & vbCrLf)
        fsT.Writetext("                e = d.massReplace(this.labelText, {" & vbCrLf)
        fsT.Writetext("                    " & Chr(34) & "[[title]]" & Chr(34) & ": a.title" & vbCrLf)
        fsT.Writetext("                });" & vbCrLf)
        fsT.Writetext("                c = this.fontSize;" & vbCrLf)
        fsT.Writetext("                g && (m <= c && g.translate(p, m / 2 + this.ly - c / 2 + (c + 2 - m) / 2 - q), a.legendEntryWidth = g.getBBox().width);" & vbCrLf)
        fsT.Writetext("                var t;" & vbCrLf)
        fsT.Writetext("                e && (e = d.fixBrakes(e), a.legendTextReal = e, t = this.labelWidth, t = isNaN(t) ? d.text(this.container, e, f, b.fontFamily, c, " & Chr(34) & "start" & Chr(34) & ") : d.wrappedText(this.container, e, f, b.fontFamily, c, " & Chr(34) & "start" & Chr(34) & ", !1, t," & vbCrLf)
        fsT.Writetext("                0), d.setCN(b, t, " & Chr(34) & "legend-label" & Chr(34) & "), t.translate(this.lx + n, this.ly), l.push(t), b = t.getBBox().width, this.maxLabelWidth < b && (this.maxLabelWidth = b));" & vbCrLf)
        fsT.Writetext("                this.entries[this.index] = l;" & vbCrLf)
        fsT.Writetext("                a.legendEntry = this.entries[this.index];" & vbCrLf)
        fsT.Writetext("                a.legendLabel = t;" & vbCrLf)
        fsT.Writetext("                this.index++" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        addListeners: function (a, b) {" & vbCrLf)
        fsT.Writetext("            var c = this;" & vbCrLf)
        fsT.Writetext("            a && a.mouseover(function (a) {" & vbCrLf)
        fsT.Writetext("                c.rollOverMarker(b, a)" & vbCrLf)
        fsT.Writetext("            }).mouseout(function (a) {" & vbCrLf)
        fsT.Writetext("                c.rollOutMarker(b, a)" & vbCrLf)
        fsT.Writetext("            }).click(function (a) {" & vbCrLf)
        fsT.Writetext("                c.clickMarker(b, a)" & vbCrLf)
        fsT.Writetext("            })" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        rollOverMarker: function (a, b) {" & vbCrLf)
        fsT.Writetext("            this.switchable && this.dispatch(" & Chr(34) & "rollOverMarker" & Chr(34) & ", a, b);" & vbCrLf)
        fsT.Writetext("            this.dispatch(" & Chr(34) & "rollOverItem" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            a, b)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        rollOutMarker: function (a, b) {" & vbCrLf)
        fsT.Writetext("            this.switchable && this.dispatch(" & Chr(34) & "rollOutMarker" & Chr(34) & ", a, b);" & vbCrLf)
        fsT.Writetext("            this.dispatch(" & Chr(34) & "rollOutItem" & Chr(34) & ", a, b)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        clickMarker: function (a, b) {" & vbCrLf)
        fsT.Writetext("            this.switchable && (!0 === a.hidden ? this.dispatch(" & Chr(34) & "showItem" & Chr(34) & ", a, b) : this.dispatch(" & Chr(34) & "hideItem" & Chr(34) & ", a, b));" & vbCrLf)
        fsT.Writetext("            this.dispatch(" & Chr(34) & "clickMarker" & Chr(34) & ", a, b)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        rollOverLabel: function (a, b) {" & vbCrLf)
        fsT.Writetext("            a.hidden || (this.textClickEnabled && a.legendLabel && a.legendLabel.attr({" & vbCrLf)
        fsT.Writetext("                fill: this.rollOverColor" & vbCrLf)
        fsT.Writetext("            }), this.dispatch(" & Chr(34) & "rollOverItem" & Chr(34) & ", a, b))" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        rollOutLabel: function (a, b) {" & vbCrLf)
        fsT.Writetext("            if (!a.hidden) {" & vbCrLf)
        fsT.Writetext("                if (this.textClickEnabled && a.legendLabel) {" & vbCrLf)
        fsT.Writetext("                    var c = this.color;" & vbCrLf)
        fsT.Writetext("                    void 0 !== this.selectedColor && a.showBalloon && (c = this.selectedColor);" & vbCrLf)
        fsT.Writetext("                    this.useMarkerColorForLabels && (c = a.lineColor, void 0 === c && (c = a.color));" & vbCrLf)
        fsT.Writetext("                    a.legendLabel.attr({" & vbCrLf)
        fsT.Writetext("                        fill: c" & vbCrLf)
        fsT.Writetext("                    })" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("                this.dispatch(" & Chr(34) & "rollOutItem" & Chr(34) & ", a, b)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        clickLabel: function (a, b) {" & vbCrLf)
        fsT.Writetext("            this.textClickEnabled ? a.hidden || this.dispatch(" & Chr(34) & "clickLabel" & Chr(34) & ", a, b) : this.switchable && (!0 === a.hidden ? this.dispatch(" & Chr(34) & "showItem" & Chr(34) & ", a, b) : this.dispatch(" & Chr(34) & "hideItem" & Chr(34) & ", a, b))" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        dispatch: function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            this.fire(a, {" & vbCrLf)
        fsT.Writetext("                type: a," & vbCrLf)
        fsT.Writetext("                dataItem: b," & vbCrLf)
        fsT.Writetext("                target: this," & vbCrLf)
        fsT.Writetext("                event: c," & vbCrLf)
        fsT.Writetext("                chart: this.chart" & vbCrLf)
        fsT.Writetext("            })" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        createValue: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = this," & vbCrLf)
        fsT.Writetext("                c = b.fontSize," & vbCrLf)
        fsT.Writetext("                e = b.chart;" & vbCrLf)
        fsT.Writetext("            if (!1 !== a.visibleInLegend) {" & vbCrLf)
        fsT.Writetext("                var h = b.maxLabelWidth;" & vbCrLf)
        fsT.Writetext("                b.forceWidth && (h = b.labelWidth);" & vbCrLf)
        fsT.Writetext("                b.equalWidths || (b.valueAlign = " & Chr(34) & "left" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "left" & Chr(34) & " == b.valueAlign && (h = a.legendEntry.getBBox().width);" & vbCrLf)
        fsT.Writetext("                var f = h;" & vbCrLf)
        fsT.Writetext("                if (b.valueText && 0 < b.valueWidth) {" & vbCrLf)
        fsT.Writetext("                    var g = b.color;" & vbCrLf)
        fsT.Writetext("                    b.useMarkerColorForValues && (g = a.color, a.legendKeyColor && (g = a.legendKeyColor()));" & vbCrLf)
        fsT.Writetext("                    !0 === a.hidden && (g = b.markerDisabledColor);" & vbCrLf)
        fsT.Writetext("                    var k = b.valueText," & vbCrLf)
        fsT.Writetext("                        h = h + b.lx + b.markerLabelGap + b.valueWidth," & vbCrLf)
        fsT.Writetext("                        l = " & Chr(34) & "end" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                    " & Chr(34) & "left" & Chr(34) & " == b.valueAlign && (h -= b.valueWidth, l = " & Chr(34) & "start" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                    g = d.text(b.container," & vbCrLf)
        fsT.Writetext("                    k, g, b.chart.fontFamily, c, l);" & vbCrLf)
        fsT.Writetext("                    d.setCN(e, g, " & Chr(34) & "legend-value" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                    g.translate(h, b.ly);" & vbCrLf)
        fsT.Writetext("                    b.entries[b.index].push(g);" & vbCrLf)
        fsT.Writetext("                    f += b.valueWidth + 2 * b.markerLabelGap;" & vbCrLf)
        fsT.Writetext("                    g.dItem = a;" & vbCrLf)
        fsT.Writetext("                    b.valueLabels.push(g)" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("                b.index++;" & vbCrLf)
        fsT.Writetext("                e = b.markerSize;" & vbCrLf)
        fsT.Writetext("                e < c + 7 && (e = c + 7, d.VML && (e += 3));" & vbCrLf)
        fsT.Writetext("                c = b.container.rect(a.legendEntryWidth, 0, f, e, 0, 0).attr({" & vbCrLf)
        fsT.Writetext("                    stroke: " & Chr(34) & "none" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                    fill: " & Chr(34) & "#fff" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                    " & Chr(34) & "fill-opacity" & Chr(34) & ": .005" & vbCrLf)
        fsT.Writetext("                });" & vbCrLf)
        fsT.Writetext("                c.dItem = a;" & vbCrLf)
        fsT.Writetext("                b.entries[b.index - 1].push(c);" & vbCrLf)
        fsT.Writetext("                c.mouseover(function (c) {" & vbCrLf)
        fsT.Writetext("                    b.rollOverLabel(a, c)" & vbCrLf)
        fsT.Writetext("                }).mouseout(function (c) {" & vbCrLf)
        fsT.Writetext("                    b.rollOutLabel(a, c)" & vbCrLf)
        fsT.Writetext("                }).click(function (c) {" & vbCrLf)
        fsT.Writetext("                    b.clickLabel(a, c)" & vbCrLf)
        fsT.Writetext("                })" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        createV: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.markerSize;" & vbCrLf)
        fsT.Writetext("            return d.polygon(this.container, [a / 5, a / 2, a - a / 5, a / 2], [a / 3, a - a / 5, a / 5, a / 1.7], this.switchColor)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        createX: function () {" & vbCrLf)
        fsT.Writetext("            var a = (this.markerSize - 4) / 2," & vbCrLf)
        fsT.Writetext("                b = {" & vbCrLf)
        fsT.Writetext("                    stroke: this.switchColor," & vbCrLf)
        fsT.Writetext("                    " & Chr(34) & "stroke-width" & Chr(34) & ": 3" & vbCrLf)
        fsT.Writetext("                }, c = this.container," & vbCrLf)
        fsT.Writetext("                e = d.line(c, [-a, a], [-a, a]).attr(b)," & vbCrLf)
        fsT.Writetext("                a = d.line(c, [-a, a], [a, -a]).attr(b);" & vbCrLf)
        fsT.Writetext("            return this.container.set([e, a])" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        createMarker: function (a, b, c, e, h, f, g, k) {" & vbCrLf)
        fsT.Writetext("            var l = this.markerSize," & vbCrLf)
        fsT.Writetext("                m = this.container;" & vbCrLf)
        fsT.Writetext("            h || (h = this.markerBorderColor);" & vbCrLf)
        fsT.Writetext("            h || (h = b);" & vbCrLf)
        fsT.Writetext("            isNaN(e) && (e = this.markerBorderThickness);" & vbCrLf)
        fsT.Writetext("            isNaN(f) && (f = this.markerBorderAlpha);" & vbCrLf)
        fsT.Writetext("            return d.bullet(m, a, l, b, c, e, h, f, l, g, k, this.chart.path)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        validateNow: function () {" & vbCrLf)
        fsT.Writetext("            this.invalidateSize()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateValues: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.valueLabels," & vbCrLf)
        fsT.Writetext("                b = this.chart," & vbCrLf)
        fsT.Writetext("                c, d = this.data;" & vbCrLf)
        fsT.Writetext("            for (c = 0; c < a.length; c++) {" & vbCrLf)
        fsT.Writetext("                var h = a[c]," & vbCrLf)
        fsT.Writetext("                    f = h.dItem," & vbCrLf)
        fsT.Writetext("                    g = " & Chr(34) & " " & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                if (d) f.value ? h.text(f.value) : h.text(" & Chr(34) & "" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                else {" & vbCrLf)
        fsT.Writetext("                    var k;" & vbCrLf)
        fsT.Writetext("                    if (void 0 !== f.type) {" & vbCrLf)
        fsT.Writetext("                        k = f.currentDataItem;" & vbCrLf)
        fsT.Writetext("                        var l = this.periodValueText;" & vbCrLf)
        fsT.Writetext("                        f.legendPeriodValueText && (l = f.legendPeriodValueText);" & vbCrLf)
        fsT.Writetext("                        k ? (g = this.valueText, f.legendValueText && (g = f.legendValueText), g = b.formatString(g, k)) : l && (g = b.formatPeriodString(l," & vbCrLf)
        fsT.Writetext("                        f))" & vbCrLf)
        fsT.Writetext("                    } else g = b.formatString(this.valueText, f);" & vbCrLf)
        fsT.Writetext("                    if (l = this.valueFunction) k && (f = k), g = l(f, g);" & vbCrLf)
        fsT.Writetext("                    h.text(g)" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        renderFix: function () {" & vbCrLf)
        fsT.Writetext("            if (!d.VML) {" & vbCrLf)
        fsT.Writetext("                var a = this.container;" & vbCrLf)
        fsT.Writetext("                a && a.renderFix()" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        destroy: function () {" & vbCrLf)
        fsT.Writetext("            this.div.innerHTML = " & Chr(34) & "" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            d.remove(this.set)" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    })" & vbCrLf)
        fsT.Writetext("})();" & vbCrLf)
        fsT.Writetext("(function () {" & vbCrLf)
        fsT.Writetext("    var d = window.AmCharts;" & vbCrLf)
        fsT.Writetext("    d.formatMilliseconds = function (a, b) {" & vbCrLf)
        fsT.Writetext("        if (-1 != a.indexOf(" & Chr(34) & "fff" & Chr(34) & ")) {" & vbCrLf)
        fsT.Writetext("            var c = b.getMilliseconds()," & vbCrLf)
        fsT.Writetext("                d = String(c);" & vbCrLf)
        fsT.Writetext("            10 > c && (d = " & Chr(34) & "00" & Chr(34) & " + c);" & vbCrLf)
        fsT.Writetext("            10 <= c && 100 > c && (d = " & Chr(34) & "0" & Chr(34) & " + c);" & vbCrLf)
        fsT.Writetext("            a = a.replace(/fff/g, d)" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("        return a" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.extractPeriod = function (a) {" & vbCrLf)
        fsT.Writetext("        var b = d.stripNumbers(a)," & vbCrLf)
        fsT.Writetext("            c = 1;" & vbCrLf)
        fsT.Writetext("        b != a && (c = Number(a.slice(0, a.indexOf(b))));" & vbCrLf)
        fsT.Writetext("        return {" & vbCrLf)
        fsT.Writetext("            period: b," & vbCrLf)
        fsT.Writetext("            count: c" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.getDate = function (a, b, c) {" & vbCrLf)
        fsT.Writetext("        return a instanceof Date ? d.newDate(a, c) : b && isNaN(a) ? d.stringToDate(a, b) : new Date(a)" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.newDate = function (a, b) {" & vbCrLf)
        fsT.Writetext("        return b && " & Chr(34) & "fff" & Chr(34) & " != b ? new Date(a) : d.useUTC ? new Date(a.getUTCFullYear(), a.getUTCMonth(), a.getUTCDate(), a.getUTCHours(), a.getUTCMinutes(), a.getUTCSeconds(), a.getUTCMilliseconds()) : new Date(a.getFullYear(), a.getMonth(), a.getDate(), a.getHours(), a.getMinutes(), a.getSeconds(), a.getMilliseconds())" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.resetDateToMin = function (a, b, c, e) {" & vbCrLf)
        fsT.Writetext("        void 0 === e && (e = 1);" & vbCrLf)
        fsT.Writetext("        var h, f, g, k, l, m, n;" & vbCrLf)
        fsT.Writetext("        d.useUTC ? (h = a.getUTCFullYear(), f = a.getUTCMonth(), g = a.getUTCDate(), k = a.getUTCHours(), l = a.getUTCMinutes(), m = a.getUTCSeconds(), n = a.getUTCMilliseconds(), a = a.getUTCDay()) : (h = a.getFullYear()," & vbCrLf)
        fsT.Writetext("        f = a.getMonth(), g = a.getDate(), k = a.getHours(), l = a.getMinutes(), m = a.getSeconds(), n = a.getMilliseconds(), a = a.getDay());" & vbCrLf)
        fsT.Writetext("        switch (b) {" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "YYYY" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                h = Math.floor(h / c) * c;" & vbCrLf)
        fsT.Writetext("                f = 0;" & vbCrLf)
        fsT.Writetext("                g = 1;" & vbCrLf)
        fsT.Writetext("                n = m = l = k = 0;" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "MM" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                f = Math.floor(f / c) * c;" & vbCrLf)
        fsT.Writetext("                g = 1;" & vbCrLf)
        fsT.Writetext("                n = m = l = k = 0;" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "WW" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                g = a >= e ? g - a + e : g - (7 + a) + e;" & vbCrLf)
        fsT.Writetext("                n = m = l = k = 0;" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "DD" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                n = m = l = k = 0;" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "hh" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                k = Math.floor(k / c) * c;" & vbCrLf)
        fsT.Writetext("                n = m = l = 0;" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "mm" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                l = Math.floor(l / c) * c;" & vbCrLf)
        fsT.Writetext("                n = m = 0;" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "ss" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                m = Math.floor(m / c) * c;" & vbCrLf)
        fsT.Writetext("                n = 0;" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "fff" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                n = Math.floor(n / c) * c" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("        d.useUTC ? (a = new Date, a.setUTCFullYear(h," & vbCrLf)
        fsT.Writetext("        f, g), a.setUTCHours(k, l, m, n)) : a = new Date(h, f, g, k, l, m, n);" & vbCrLf)
        fsT.Writetext("        return a" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.getPeriodDuration = function (a, b) {" & vbCrLf)
        fsT.Writetext("        void 0 === b && (b = 1);" & vbCrLf)
        fsT.Writetext("        var c;" & vbCrLf)
        fsT.Writetext("        switch (a) {" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "YYYY" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                c = 316224E5;" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "MM" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                c = 26784E5;" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "WW" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                c = 6048E5;" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "DD" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                c = 864E5;" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "hh" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                c = 36E5;" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "mm" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                c = 6E4;" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "ss" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                c = 1E3;" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "fff" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                c = 1" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("        return c * b" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.intervals = {" & vbCrLf)
        fsT.Writetext("        s: {" & vbCrLf)
        fsT.Writetext("            nextInterval: " & Chr(34) & "ss" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            contains: 1E3" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        ss: {" & vbCrLf)
        fsT.Writetext("            nextInterval: " & Chr(34) & "mm" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            contains: 60," & vbCrLf)
        fsT.Writetext("            count: 0" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        mm: {" & vbCrLf)
        fsT.Writetext("            nextInterval: " & Chr(34) & "hh" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            contains: 60," & vbCrLf)
        fsT.Writetext("            count: 1" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        hh: {" & vbCrLf)
        fsT.Writetext("            nextInterval: " & Chr(34) & "DD" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            contains: 24," & vbCrLf)
        fsT.Writetext("            count: 2" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        DD: {" & vbCrLf)
        fsT.Writetext("            nextInterval: " & Chr(34) & "" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            contains: Infinity," & vbCrLf)
        fsT.Writetext("            count: 3" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.getMaxInterval = function (a, b) {" & vbCrLf)
        fsT.Writetext("        var c = d.intervals;" & vbCrLf)
        fsT.Writetext("        return a >= c[b].contains ? (a = Math.round(a / c[b].contains), b = c[b].nextInterval, d.getMaxInterval(a, b)) : " & Chr(34) & "ss" & Chr(34) & " == b ? c[b].nextInterval : b" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.dayNames = " & Chr(34) & "Sunday Monday Tuesday Wednesday Thursday Friday Saturday" & Chr(34) & ".split(" & Chr(34) & " " & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("    d.shortDayNames = " & Chr(34) & "Sun Mon Tue Wed Thu Fri Sat" & Chr(34) & ".split(" & Chr(34) & " " & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("    d.monthNames = " & Chr(34) & "January February March April May June July August September October November December" & Chr(34) & ".split(" & Chr(34) & " " & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("    d.shortMonthNames = " & Chr(34) & "Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec" & Chr(34) & ".split(" & Chr(34) & " " & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("    d.getWeekNumber = function (a) {" & vbCrLf)
        fsT.Writetext("        a = new Date(a);" & vbCrLf)
        fsT.Writetext("        a.setHours(0, 0, 0);" & vbCrLf)
        fsT.Writetext("        a.setDate(a.getDate() + 4 - (a.getDay() || 7));" & vbCrLf)
        fsT.Writetext("        var b = new Date(a.getFullYear(), 0, 1);" & vbCrLf)
        fsT.Writetext("        return Math.ceil(((a - b) / 864E5 + 1) / 7)" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.stringToDate = function (a, b) {" & vbCrLf)
        fsT.Writetext("        var c = {}, e = [{" & vbCrLf)
        fsT.Writetext("            pattern: " & Chr(34) & "YYYY" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            period: " & Chr(34) & "year" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("        }, {" & vbCrLf)
        fsT.Writetext("            pattern: " & Chr(34) & "YY" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            period: " & Chr(34) & "year" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("        }, {" & vbCrLf)
        fsT.Writetext("            pattern: " & Chr(34) & "MM" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            period: " & Chr(34) & "month" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("        }, {" & vbCrLf)
        fsT.Writetext("            pattern: " & Chr(34) & "M" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            period: " & Chr(34) & "month" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("        }, {" & vbCrLf)
        fsT.Writetext("            pattern: " & Chr(34) & "DD" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            period: " & Chr(34) & "date" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("        }, {" & vbCrLf)
        fsT.Writetext("            pattern: " & Chr(34) & "D" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            period: " & Chr(34) & "date" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("        }, {" & vbCrLf)
        fsT.Writetext("            pattern: " & Chr(34) & "JJ" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            period: " & Chr(34) & "hours" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("        }, {" & vbCrLf)
        fsT.Writetext("            pattern: " & Chr(34) & "J" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            period: " & Chr(34) & "hours" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("        }, {" & vbCrLf)
        fsT.Writetext("            pattern: " & Chr(34) & "HH" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            period: " & Chr(34) & "hours" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("        }, {" & vbCrLf)
        fsT.Writetext("            pattern: " & Chr(34) & "H" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            period: " & Chr(34) & "hours" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("        }, {" & vbCrLf)
        fsT.Writetext("            pattern: " & Chr(34) & "KK" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            period: " & Chr(34) & "hours" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("        }, {" & vbCrLf)
        fsT.Writetext("            pattern: " & Chr(34) & "K" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            period: " & Chr(34) & "hours" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("        }, {" & vbCrLf)
        fsT.Writetext("            pattern: " & Chr(34) & "LL" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            period: " & Chr(34) & "hours" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("        }, {" & vbCrLf)
        fsT.Writetext("            pattern: " & Chr(34) & "L" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            period: " & Chr(34) & "hours" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("        }, {" & vbCrLf)
        fsT.Writetext("            pattern: " & Chr(34) & "NN" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            period: " & Chr(34) & "minutes" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("        }, {" & vbCrLf)
        fsT.Writetext("            pattern: " & Chr(34) & "N" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            period: " & Chr(34) & "minutes" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("        }, {" & vbCrLf)
        fsT.Writetext("            pattern: " & Chr(34) & "SS" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            period: " & Chr(34) & "seconds" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("        }, {" & vbCrLf)
        fsT.Writetext("            pattern: " & Chr(34) & "S" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            period: " & Chr(34) & "seconds" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("        }, {" & vbCrLf)
        fsT.Writetext("            pattern: " & Chr(34) & "QQQ" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            period: " & Chr(34) & "milliseconds" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("        }, {" & vbCrLf)
        fsT.Writetext("            pattern: " & Chr(34) & "QQ" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            period: " & Chr(34) & "milliseconds" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("        }, {" & vbCrLf)
        fsT.Writetext("            pattern: " & Chr(34) & "Q" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            period: " & Chr(34) & "milliseconds" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("        }]," & vbCrLf)
        fsT.Writetext("            h = !0," & vbCrLf)
        fsT.Writetext("            f = b.indexOf(" & Chr(34) & "AA" & Chr(34) & "); - 1 != f && (a.substr(f, 2), " & Chr(34) & "pm" & Chr(34) & " == a.toLowerCase && (h = !1));" & vbCrLf)
        fsT.Writetext("        var f = b," & vbCrLf)
        fsT.Writetext("            g, k, l;" & vbCrLf)
        fsT.Writetext("        for (l = 0; l < e.length; l++) k = e[l].period, c[k] = 0, " & Chr(34) & "date" & Chr(34) & " == k && (c[k] = 1);" & vbCrLf)
        fsT.Writetext("        for (l = 0; l < e.length; l++) if (g = e[l].pattern, k = e[l].period, -1 != b.indexOf(g)) {" & vbCrLf)
        fsT.Writetext("            var m = d.getFromDateString(g, a, f);" & vbCrLf)
        fsT.Writetext("            b = b.replace(g, " & Chr(34) & "" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            if (" & Chr(34) & "KK" & Chr(34) & " == g || " & Chr(34) & "K" & Chr(34) & " == g || " & Chr(34) & "LL" & Chr(34) & " == g || " & Chr(34) & "L" & Chr(34) & " == g) h || (m += 12);" & vbCrLf)
        fsT.Writetext("            c[k] = m" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("        d.useUTC ? (e = new Date, e.setUTCFullYear(c.year, c.month, c.date), e.setUTCHours(c.hours, c.minutes, c.seconds, c.milliseconds)) : e = new Date(c.year, c.month, c.date, c.hours, c.minutes, c.seconds, c.milliseconds);" & vbCrLf)
        fsT.Writetext("        return e" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.getFromDateString = function (a, b, c) {" & vbCrLf)
        fsT.Writetext("        if (void 0 !== b) return c = c.indexOf(a), b = String(b), b = b.substr(c, a.length), " & Chr(34) & "0" & Chr(34) & " == b.charAt(0) && (b = b.substr(1, b.length - 1)), b = Number(b), isNaN(b) && (b = 0), -1 != a.indexOf(" & Chr(34) & "M" & Chr(34) & ") && b--, b" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.formatDate = function (a, b, c) {" & vbCrLf)
        fsT.Writetext("        c || (c = d);" & vbCrLf)
        fsT.Writetext("        var e, h, f, g, k, l, m, n = d.getWeekNumber(a);" & vbCrLf)
        fsT.Writetext("        d.useUTC ? (e = a.getUTCFullYear(), h = a.getUTCMonth(), f = a.getUTCDate(), g = a.getUTCDay(), k = a.getUTCHours(), l = a.getUTCMinutes(), m = a.getUTCSeconds(), a = a.getUTCMilliseconds()) : (e = a.getFullYear(), h = a.getMonth(), f = a.getDate(), g = a.getDay(), k = a.getHours(), l = a.getMinutes(), m = a.getSeconds(), a = a.getMilliseconds());" & vbCrLf)
        fsT.Writetext("        var q = String(e).substr(2, 2)," & vbCrLf)
        fsT.Writetext("            p = h + 1;" & vbCrLf)
        fsT.Writetext("        9 > h && (p = " & Chr(34) & "0" & Chr(34) & " + p);" & vbCrLf)
        fsT.Writetext("        var r = " & Chr(34) & "0" & Chr(34) & " + g;" & vbCrLf)
        fsT.Writetext("        b = b.replace(/W/g, n);" & vbCrLf)
        fsT.Writetext("        n = k;" & vbCrLf)
        fsT.Writetext("        24 == n && (n = 0);" & vbCrLf)
        fsT.Writetext("        var t = n;" & vbCrLf)
        fsT.Writetext("        10 > t && (t = " & Chr(34) & "0" & Chr(34) & " + t);" & vbCrLf)
        fsT.Writetext("        b = b.replace(/JJ/g, t);" & vbCrLf)
        fsT.Writetext("        b = b.replace(/J/g, n);" & vbCrLf)
        fsT.Writetext("        t = k;" & vbCrLf)
        fsT.Writetext("        0 === t && (t = 24, -1 != b.indexOf(" & Chr(34) & "H" & Chr(34) & ") && f--);" & vbCrLf)
        fsT.Writetext("        n = f;" & vbCrLf)
        fsT.Writetext("        10 > f && (n = " & Chr(34) & "0" & Chr(34) & " + f);" & vbCrLf)
        fsT.Writetext("        var u = t;" & vbCrLf)
        fsT.Writetext("        10 > u && (u = " & Chr(34) & "0" & Chr(34) & " + u);" & vbCrLf)
        fsT.Writetext("        b = b.replace(/HH/g, u);" & vbCrLf)
        fsT.Writetext("        b = b.replace(/H/g, t);" & vbCrLf)
        fsT.Writetext("        t = k;" & vbCrLf)
        fsT.Writetext("        11 < t && (t -= 12);" & vbCrLf)
        fsT.Writetext("        u = t;" & vbCrLf)
        fsT.Writetext("        10 > u && (u = " & Chr(34) & "0" & Chr(34) & " + u);" & vbCrLf)
        fsT.Writetext("        b = b.replace(/KK/g, u);" & vbCrLf)
        fsT.Writetext("        b = b.replace(/K/g, t);" & vbCrLf)
        fsT.Writetext("        t = k;" & vbCrLf)
        fsT.Writetext("        0 === t && (t = 12);" & vbCrLf)
        fsT.Writetext("        12 < t && (t -= 12);" & vbCrLf)
        fsT.Writetext("        u = t;" & vbCrLf)
        fsT.Writetext("        10 > u && (u = " & Chr(34) & "0" & Chr(34) & " + u);" & vbCrLf)
        fsT.Writetext("        b = b.replace(/LL/g, u);" & vbCrLf)
        fsT.Writetext("        b = b.replace(/L/g, t);" & vbCrLf)
        fsT.Writetext("        t = l;" & vbCrLf)
        fsT.Writetext("        10 > t && (t = " & Chr(34) & "0" & Chr(34) & " + t);" & vbCrLf)
        fsT.Writetext("        b = b.replace(/NN/g, t);" & vbCrLf)
        fsT.Writetext("        b = b.replace(/N/g, l);" & vbCrLf)
        fsT.Writetext("        l = m;" & vbCrLf)
        fsT.Writetext("        10 > l && (l = " & Chr(34) & "0" & Chr(34) & " + l);" & vbCrLf)
        fsT.Writetext("        b = b.replace(/SS/g," & vbCrLf)
        fsT.Writetext("        l);" & vbCrLf)
        fsT.Writetext("        b = b.replace(/S/g, m);" & vbCrLf)
        fsT.Writetext("        m = a;" & vbCrLf)
        fsT.Writetext("        10 > m && (m = " & Chr(34) & "00" & Chr(34) & " + m);" & vbCrLf)
        fsT.Writetext("        100 > m && (m = " & Chr(34) & "0" & Chr(34) & " + m);" & vbCrLf)
        fsT.Writetext("        l = a;" & vbCrLf)
        fsT.Writetext("        10 > l && (l = " & Chr(34) & "00" & Chr(34) & " + l);" & vbCrLf)
        fsT.Writetext("        b = b.replace(/QQQ/g, m);" & vbCrLf)
        fsT.Writetext("        b = b.replace(/QQ/g, l);" & vbCrLf)
        fsT.Writetext("        b = b.replace(/Q/g, a);" & vbCrLf)
        fsT.Writetext("        b = 12 > k ? b.replace(/A/g, " & Chr(34) & "am" & Chr(34) & ") : b.replace(/A/g, " & Chr(34) & "pm" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        b = b.replace(/YYYY/g, " & Chr(34) & "@IIII@" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        b = b.replace(/YY/g, " & Chr(34) & "@II@" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        b = b.replace(/MMMM/g, " & Chr(34) & "@XXXX@" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        b = b.replace(/MMM/g, " & Chr(34) & "@XXX@" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        b = b.replace(/MM/g, " & Chr(34) & "@XX@" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        b = b.replace(/M/g, " & Chr(34) & "@X@" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        b = b.replace(/DD/g, " & Chr(34) & "@RR@" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        b = b.replace(/D/g, " & Chr(34) & "@R@" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        b = b.replace(/EEEE/g, " & Chr(34) & "@PPPP@" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        b = b.replace(/EEE/g, " & Chr(34) & "@PPP@" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        b = b.replace(/EE/g, " & Chr(34) & "@PP@" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        b = b.replace(/E/g," & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "@P@" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("        b = b.replace(/@IIII@/g, e);" & vbCrLf)
        fsT.Writetext("        b = b.replace(/@II@/g, q);" & vbCrLf)
        fsT.Writetext("        b = b.replace(/@XXXX@/g, c.monthNames[h]);" & vbCrLf)
        fsT.Writetext("        b = b.replace(/@XXX@/g, c.shortMonthNames[h]);" & vbCrLf)
        fsT.Writetext("        b = b.replace(/@XX@/g, p);" & vbCrLf)
        fsT.Writetext("        b = b.replace(/@X@/g, h + 1);" & vbCrLf)
        fsT.Writetext("        b = b.replace(/@RR@/g, n);" & vbCrLf)
        fsT.Writetext("        b = b.replace(/@R@/g, f);" & vbCrLf)
        fsT.Writetext("        b = b.replace(/@PPPP@/g, c.dayNames[g]);" & vbCrLf)
        fsT.Writetext("        b = b.replace(/@PPP@/g, c.shortDayNames[g]);" & vbCrLf)
        fsT.Writetext("        b = b.replace(/@PP@/g, r);" & vbCrLf)
        fsT.Writetext("        return b = b.replace(/@P@/g, g)" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.changeDate = function (a, b, c, e, h) {" & vbCrLf)
        fsT.Writetext("        if (d.useUTC) return d.changeUTCDate(a, b, c, e, h);" & vbCrLf)
        fsT.Writetext("        var f = -1;" & vbCrLf)
        fsT.Writetext("        void 0 === e && (e = !0);" & vbCrLf)
        fsT.Writetext("        void 0 === h && (h = !1);" & vbCrLf)
        fsT.Writetext("        !0 === e && (f = 1);" & vbCrLf)
        fsT.Writetext("        switch (b) {" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "YYYY" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                a.setFullYear(a.getFullYear() + c * f);" & vbCrLf)
        fsT.Writetext("                e || h || a.setDate(a.getDate() + 1);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "MM" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                b = a.getMonth();" & vbCrLf)
        fsT.Writetext("                a.setMonth(a.getMonth() + c * f);" & vbCrLf)
        fsT.Writetext("                a.getMonth() > b + c * f && a.setDate(a.getDate() - 1);" & vbCrLf)
        fsT.Writetext("                e || h || a.setDate(a.getDate() + 1);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "DD" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                a.setDate(a.getDate() + c * f);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "WW" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                a.setDate(a.getDate() + c * f * 7);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "hh" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                a.setHours(a.getHours() + c * f);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "mm" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                a.setMinutes(a.getMinutes() + c * f);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "ss" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                a.setSeconds(a.getSeconds() + c * f);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "fff" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                a.setMilliseconds(a.getMilliseconds() + c * f)" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("        return a" & vbCrLf)
        fsT.Writetext("    };" & vbCrLf)
        fsT.Writetext("    d.changeUTCDate = function (a, b," & vbCrLf)
        fsT.Writetext("    c, d, h) {" & vbCrLf)
        fsT.Writetext("        var f = -1;" & vbCrLf)
        fsT.Writetext("        void 0 === d && (d = !0);" & vbCrLf)
        fsT.Writetext("        void 0 === h && (h = !1);" & vbCrLf)
        fsT.Writetext("        !0 === d && (f = 1);" & vbCrLf)
        fsT.Writetext("        switch (b) {" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "YYYY" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                a.setUTCFullYear(a.getUTCFullYear() + c * f);" & vbCrLf)
        fsT.Writetext("                d || h || a.setUTCDate(a.getUTCDate() + 1);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "MM" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                b = a.getUTCMonth();" & vbCrLf)
        fsT.Writetext("                a.setUTCMonth(a.getUTCMonth() + c * f);" & vbCrLf)
        fsT.Writetext("                a.getUTCMonth() > b + c * f && a.setUTCDate(a.getUTCDate() - 1);" & vbCrLf)
        fsT.Writetext("                d || h || a.setUTCDate(a.getUTCDate() + 1);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "DD" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                a.setUTCDate(a.getUTCDate() + c * f);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "WW" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                a.setUTCDate(a.getUTCDate() + c * f * 7);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "hh" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                a.setUTCHours(a.getUTCHours() + c * f);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "mm" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                a.setUTCMinutes(a.getUTCMinutes() + c * f);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "ss" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                a.setUTCSeconds(a.getUTCSeconds() + c * f);" & vbCrLf)
        fsT.Writetext("                break;" & vbCrLf)
        fsT.Writetext("            case " & Chr(34) & "fff" & Chr(34) & ":" & vbCrLf)
        fsT.Writetext("                a.setUTCMilliseconds(a.getUTCMilliseconds() + c * f)" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("        return a" & vbCrLf)
        fsT.Writetext("    }" & vbCrLf)
        fsT.Writetext("})();" & vbCrLf)



        'fin
        fsT.SaveToFile(fileName, 2) 'Save binary data To disk
        fsT = Nothing

    End Sub

    Public Sub CreateSerial_JS()

        Dim fsT As Object
        Dim fileName As String

        fsT = CreateObject("ADODB.Stream")
        fsT.Type = 2 'Specify stream type - we want To save text/string data.
        fsT.Charset = "utf-8" 'Specify charset For the source text data.
        fsT.Open() 'Open the stream And write binary data To the object

        fileName = SERVER_FOLDER_PATH & "serial.js"


        fsT.Writetext("(function () {" & vbCrLf)
        fsT.Writetext("    var e = window.AmCharts;" & vbCrLf)
        fsT.Writetext("    e.AmSerialChart = e.Class({" & vbCrLf)
        fsT.Writetext("        inherits: e.AmRectangularChart," & vbCrLf)
        fsT.Writetext("        construct: function (a) {" & vbCrLf)
        fsT.Writetext("            this.type = " & Chr(34) & "serial" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            e.AmSerialChart.base.construct.call(this, a);" & vbCrLf)
        fsT.Writetext("            this.cname = " & Chr(34) & "AmSerialChart" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.theme = a;" & vbCrLf)
        fsT.Writetext("            this.createEvents(" & Chr(34) & "changed" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            this.columnSpacing = 5;" & vbCrLf)
        fsT.Writetext("            this.columnSpacing3D = 0;" & vbCrLf)
        fsT.Writetext("            this.columnWidth = .8;" & vbCrLf)
        fsT.Writetext("            this.updateScrollbar = !0;" & vbCrLf)
        fsT.Writetext("            var b = new e.CategoryAxis(a);" & vbCrLf)
        fsT.Writetext("            b.chart = this;" & vbCrLf)
        fsT.Writetext("            this.categoryAxis = b;" & vbCrLf)
        fsT.Writetext("            this.zoomOutOnDataUpdate = !0;" & vbCrLf)
        fsT.Writetext("            this.mouseWheelZoomEnabled = this.mouseWheelScrollEnabled = this.rotate = this.skipZoom = !1;" & vbCrLf)
        fsT.Writetext("            this.minSelectedTime = 0;" & vbCrLf)
        fsT.Writetext("            e.applyTheme(this, a, this.cname)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        initChart: function () {" & vbCrLf)
        fsT.Writetext("            e.AmSerialChart.base.initChart.call(this);" & vbCrLf)
        fsT.Writetext("            this.updateCategoryAxis(this.categoryAxis, this.rotate, " & Chr(34) & "categoryAxis" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            this.dataChanged && (this.updateData(), this.dataChanged = !1, this.dispatchDataUpdated = !0);" & vbCrLf)
        fsT.Writetext("            var a = this.chartCursor;" & vbCrLf)
        fsT.Writetext("            a && (a.updateData(), a.fullWidth && (a.fullRectSet = this.cursorLineSet));" & vbCrLf)
        fsT.Writetext("            var a = this.countColumns()," & vbCrLf)
        fsT.Writetext("                b = this.graphs," & vbCrLf)
        fsT.Writetext("                c;" & vbCrLf)
        fsT.Writetext("            for (c = 0; c < b.length; c++) b[c].columnCount = a;" & vbCrLf)
        fsT.Writetext("            this.updateScrollbar = !0;" & vbCrLf)
        fsT.Writetext("            this.drawChart();" & vbCrLf)
        fsT.Writetext("            this.autoMargins && !this.marginsUpdated && (this.marginsUpdated = !0, this.measureMargins())" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleWheelReal: function (a, b) {" & vbCrLf)
        fsT.Writetext("            if (!this.wheelBusy) {" & vbCrLf)
        fsT.Writetext("                var c = this.categoryAxis," & vbCrLf)
        fsT.Writetext("                    d = c.parseDates," & vbCrLf)
        fsT.Writetext("                    g = c.minDuration()," & vbCrLf)
        fsT.Writetext("                    e = c = 1;" & vbCrLf)
        fsT.Writetext("                this.mouseWheelZoomEnabled ? b || (c = -1) : b && (c = -1);" & vbCrLf)
        fsT.Writetext("                var f = this.chartData.length," & vbCrLf)
        fsT.Writetext("                    m = this.lastTime," & vbCrLf)
        fsT.Writetext("                    l = this.firstTime;" & vbCrLf)
        fsT.Writetext("                0 > a ? d ? (f = this.endTime - this.startTime, d = this.startTime + c * g, g = this.endTime + e * g, 0 < e && 0 < c && g >= m && (g = m, d = m - f), this.zoomToDates(new Date(d), new Date(g))) : (0 < e && 0 < c && this.end >= f - 1 && (c = e = 0), d = this.start + c, g = this.end + e," & vbCrLf)
        fsT.Writetext("                this.zoomToIndexes(d, g)) : d ? (f = this.endTime - this.startTime, d = this.startTime - c * g, g = this.endTime - e * g, 0 < e && 0 < c && d <= l && (d = l, g = l + f), this.zoomToDates(new Date(d), new Date(g))) : (0 < e && 0 < c && 1 > this.start && (c = e = 0), d = this.start - c, g = this.end - e, this.zoomToIndexes(d, g))" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        validateData: function (a) {" & vbCrLf)
        fsT.Writetext("            this.marginsUpdated = !1;" & vbCrLf)
        fsT.Writetext("            this.zoomOutOnDataUpdate && !a && (this.endTime = this.end = this.startTime = this.start = NaN);" & vbCrLf)
        fsT.Writetext("            e.AmSerialChart.base.validateData.call(this)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        drawChart: function () {" & vbCrLf)
        fsT.Writetext("            e.AmSerialChart.base.drawChart.call(this);" & vbCrLf)
        fsT.Writetext("            var a = this.chartData;" & vbCrLf)
        fsT.Writetext("            if (e.ifArray(a)) {" & vbCrLf)
        fsT.Writetext("                var b = this.chartScrollbar;" & vbCrLf)
        fsT.Writetext("                b && b.draw();" & vbCrLf)
        fsT.Writetext("                if (0 < this.realWidth && 0 < this.realHeight) {" & vbCrLf)
        fsT.Writetext("                    var a = a.length - 1," & vbCrLf)
        fsT.Writetext("                        c, b = this.categoryAxis;" & vbCrLf)
        fsT.Writetext("                    if (b.parseDates && !b.equalSpacing) {" & vbCrLf)
        fsT.Writetext("                        if (b = this.startTime, c = this.endTime, isNaN(b) || isNaN(c)) b = this.firstTime, c = this.lastTime" & vbCrLf)
        fsT.Writetext("                    } else if (b = this.start, c = this.end, isNaN(b) || isNaN(c)) b = 0, c = a;" & vbCrLf)
        fsT.Writetext("                    this.endTime = this.startTime = this.end = this.start = void 0;" & vbCrLf)
        fsT.Writetext("                    this.zoom(b, c)" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            } else this.cleanChart();" & vbCrLf)
        fsT.Writetext("            this.dispDUpd();" & vbCrLf)
        fsT.Writetext("            this.chartCreated = !0" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        cleanChart: function () {" & vbCrLf)
        fsT.Writetext("            e.callMethod(" & Chr(34) & "destroy" & Chr(34) & ", [this.valueAxes, this.graphs, this.categoryAxis, this.chartScrollbar, this.chartCursor])" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateCategoryAxis: function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            a.chart = this;" & vbCrLf)
        fsT.Writetext("            a.id = c;" & vbCrLf)
        fsT.Writetext("            a.rotate = b;" & vbCrLf)
        fsT.Writetext("            a.axisRenderer = e.RecAxis;" & vbCrLf)
        fsT.Writetext("            a.guideFillRenderer = e.RecFill;" & vbCrLf)
        fsT.Writetext("            a.axisItemRenderer = e.RecItem;" & vbCrLf)
        fsT.Writetext("            a.setOrientation(!this.rotate);" & vbCrLf)
        fsT.Writetext("            a.x = this.marginLeftReal;" & vbCrLf)
        fsT.Writetext("            a.y = this.marginTopReal;" & vbCrLf)
        fsT.Writetext("            a.dx = this.dx;" & vbCrLf)
        fsT.Writetext("            a.dy = this.dy;" & vbCrLf)
        fsT.Writetext("            a.width = this.plotAreaWidth - 1;" & vbCrLf)
        fsT.Writetext("            a.height = this.plotAreaHeight - 1;" & vbCrLf)
        fsT.Writetext("            a.viW = this.plotAreaWidth - 1;" & vbCrLf)
        fsT.Writetext("            a.viH = this.plotAreaHeight - 1;" & vbCrLf)
        fsT.Writetext("            a.viX = this.marginLeftReal;" & vbCrLf)
        fsT.Writetext("            a.viY = this.marginTopReal;" & vbCrLf)
        fsT.Writetext("            a.marginsChanged = !0" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateValueAxes: function () {" & vbCrLf)
        fsT.Writetext("            e.AmSerialChart.base.updateValueAxes.call(this);" & vbCrLf)
        fsT.Writetext("            var a = this.valueAxes," & vbCrLf)
        fsT.Writetext("                b;" & vbCrLf)
        fsT.Writetext("            for (b = 0; b < a.length; b++) {" & vbCrLf)
        fsT.Writetext("                var c = a[b]," & vbCrLf)
        fsT.Writetext("                    d = this.rotate;" & vbCrLf)
        fsT.Writetext("                c.rotate = d;" & vbCrLf)
        fsT.Writetext("                c.setOrientation(d);" & vbCrLf)
        fsT.Writetext("                d = this.categoryAxis;" & vbCrLf)
        fsT.Writetext("                if (!d.startOnAxis || d.parseDates) c.expandMinMax = !0" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateData: function () {" & vbCrLf)
        fsT.Writetext("            this.parseData();" & vbCrLf)
        fsT.Writetext("            var a = this.graphs," & vbCrLf)
        fsT.Writetext("                b, c = this.chartData;" & vbCrLf)
        fsT.Writetext("            for (b = 0; b < a.length; b++) a[b].data = c;" & vbCrLf)
        fsT.Writetext("            0 < c.length && (this.firstTime = this.getStartTime(c[0].time), this.lastTime = this.getEndTime(c[c.length - 1].time))" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getStartTime: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = this.categoryAxis;" & vbCrLf)
        fsT.Writetext("            return e.resetDateToMin(new Date(a), b.minPeriod, 1, b.firstDayOfWeek).getTime()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getEndTime: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = e.extractPeriod(this.categoryAxis.minPeriod);" & vbCrLf)
        fsT.Writetext("            return e.changeDate(new Date(a), b.period, b.count, !0).getTime() - 1" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateMargins: function () {" & vbCrLf)
        fsT.Writetext("            e.AmSerialChart.base.updateMargins.call(this);" & vbCrLf)
        fsT.Writetext("            var a = this.chartScrollbar;" & vbCrLf)
        fsT.Writetext("            a && (this.getScrollbarPosition(a, this.rotate, this.categoryAxis.position), this.adjustMargins(a, this.rotate))" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateScrollbars: function () {" & vbCrLf)
        fsT.Writetext("            e.AmSerialChart.base.updateScrollbars.call(this);" & vbCrLf)
        fsT.Writetext("            this.updateChartScrollbar(this.chartScrollbar, this.rotate)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        zoom: function (a, b) {" & vbCrLf)
        fsT.Writetext("            var c = this.categoryAxis;" & vbCrLf)
        fsT.Writetext("            c.parseDates && !c.equalSpacing ? this.timeZoom(a, b) : this.indexZoom(a, b);" & vbCrLf)
        fsT.Writetext("            this.updateLegendValues()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        timeZoom: function (a, b) {" & vbCrLf)
        fsT.Writetext("            var c = this.maxSelectedTime;" & vbCrLf)
        fsT.Writetext("            isNaN(c) || (b != this.endTime && b - a > c && (a = b - c, this.updateScrollbar = !0), a != this.startTime && b - a > c && (b = a + c, this.updateScrollbar = !0));" & vbCrLf)
        fsT.Writetext("            var d = this.minSelectedTime;" & vbCrLf)
        fsT.Writetext("            if (0 < d && b - a < d) {" & vbCrLf)
        fsT.Writetext("                var g = Math.round(a + (b - a) / 2)," & vbCrLf)
        fsT.Writetext("                    d = Math.round(d / 2);" & vbCrLf)
        fsT.Writetext("                a = g - d;" & vbCrLf)
        fsT.Writetext("                b = g + d" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            var h = this.chartData," & vbCrLf)
        fsT.Writetext("                g = this.categoryAxis;" & vbCrLf)
        fsT.Writetext("            if (e.ifArray(h) && (a != this.startTime || b != this.endTime)) {" & vbCrLf)
        fsT.Writetext("                var f = g.minDuration()," & vbCrLf)
        fsT.Writetext("                    d = this.firstTime," & vbCrLf)
        fsT.Writetext("                    m = this.lastTime;" & vbCrLf)
        fsT.Writetext("                a || (a = d, isNaN(c) || (a = m - c));" & vbCrLf)
        fsT.Writetext("                b || (b = m);" & vbCrLf)
        fsT.Writetext("                a > m && (a = m);" & vbCrLf)
        fsT.Writetext("                b < d && (b = d);" & vbCrLf)
        fsT.Writetext("                a < d && (a = d);" & vbCrLf)
        fsT.Writetext("                b > m && (b = m);" & vbCrLf)
        fsT.Writetext("                b < a && (b = a + f);" & vbCrLf)
        fsT.Writetext("                b - a < f / 5 && (b < m ? b = a + f / 5 : a = b - f / 5);" & vbCrLf)
        fsT.Writetext("                this.startTime = a;" & vbCrLf)
        fsT.Writetext("                this.endTime = b;" & vbCrLf)
        fsT.Writetext("                c = h.length - 1;" & vbCrLf)
        fsT.Writetext("                f = this.getClosestIndex(h, " & Chr(34) & "time" & Chr(34) & ", a, !0, 0, c);" & vbCrLf)
        fsT.Writetext("                h = this.getClosestIndex(h, " & Chr(34) & "time" & Chr(34) & ", b, !1, f, c);" & vbCrLf)
        fsT.Writetext("                g.timeZoom(a, b);" & vbCrLf)
        fsT.Writetext("                g.zoom(f, h);" & vbCrLf)
        fsT.Writetext("                this.start = e.fitToBounds(f, 0, c);" & vbCrLf)
        fsT.Writetext("                this.end = e.fitToBounds(h, 0, c);" & vbCrLf)
        fsT.Writetext("                this.zoomAxesAndGraphs();" & vbCrLf)
        fsT.Writetext("                this.zoomScrollbar();" & vbCrLf)
        fsT.Writetext("                a != d || b != m ? this.showZB(!0) : this.showZB(!1);" & vbCrLf)
        fsT.Writetext("                this.updateColumnsDepth();" & vbCrLf)
        fsT.Writetext("                this.dispatchTimeZoomEvent()" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateAfterValueZoom: function () {" & vbCrLf)
        fsT.Writetext("            this.zoomAxesAndGraphs();" & vbCrLf)
        fsT.Writetext("            this.zoomScrollbar();" & vbCrLf)
        fsT.Writetext("            this.updateColumnsDepth()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        indexZoom: function (a, b) {" & vbCrLf)
        fsT.Writetext("            var c = this.maxSelectedSeries;" & vbCrLf)
        fsT.Writetext("            isNaN(c) || (b != this.end && b - a > c && (a = b - c, this.updateScrollbar = !0), a != this.start && b - a > c && (b = a + c, this.updateScrollbar = !0));" & vbCrLf)
        fsT.Writetext("            if (a != this.start || b != this.end) {" & vbCrLf)
        fsT.Writetext("                var d = this.chartData.length - 1;" & vbCrLf)
        fsT.Writetext("                isNaN(a) && (a = 0, isNaN(c) || (a = d - c));" & vbCrLf)
        fsT.Writetext("                isNaN(b) && (b = d);" & vbCrLf)
        fsT.Writetext("                b < a && (b = a);" & vbCrLf)
        fsT.Writetext("                b > d && (b = d);" & vbCrLf)
        fsT.Writetext("                a > d && (a = d - 1);" & vbCrLf)
        fsT.Writetext("                0 > a && (a = 0);" & vbCrLf)
        fsT.Writetext("                this.start = a;" & vbCrLf)
        fsT.Writetext("                this.end = b;" & vbCrLf)
        fsT.Writetext("                this.categoryAxis.zoom(a, b);" & vbCrLf)
        fsT.Writetext("                this.zoomAxesAndGraphs();" & vbCrLf)
        fsT.Writetext("                this.zoomScrollbar();" & vbCrLf)
        fsT.Writetext("                0 !== a || b != this.chartData.length - 1 ? this.showZB(!0) : this.showZB(!1);" & vbCrLf)
        fsT.Writetext("                this.updateColumnsDepth();" & vbCrLf)
        fsT.Writetext("                this.dispatchIndexZoomEvent()" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateGraphs: function () {" & vbCrLf)
        fsT.Writetext("            e.AmSerialChart.base.updateGraphs.call(this);" & vbCrLf)
        fsT.Writetext("            var a = this.graphs," & vbCrLf)
        fsT.Writetext("                b;" & vbCrLf)
        fsT.Writetext("            for (b = 0; b < a.length; b++) {" & vbCrLf)
        fsT.Writetext("                var c = a[b];" & vbCrLf)
        fsT.Writetext("                c.columnWidthReal = this.columnWidth;" & vbCrLf)
        fsT.Writetext("                c.categoryAxis = this.categoryAxis;" & vbCrLf)
        fsT.Writetext("                e.isString(c.fillToGraph) && (c.fillToGraph = this.getGraphById(c.fillToGraph))" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateColumnsDepth: function () {" & vbCrLf)
        fsT.Writetext("            var a, b = this.graphs," & vbCrLf)
        fsT.Writetext("                c;" & vbCrLf)
        fsT.Writetext("            e.remove(this.columnsSet);" & vbCrLf)
        fsT.Writetext("            this.columnsArray = [];" & vbCrLf)
        fsT.Writetext("            for (a = 0; a < b.length; a++) {" & vbCrLf)
        fsT.Writetext("                c = b[a];" & vbCrLf)
        fsT.Writetext("                var d = c.columnsArray;" & vbCrLf)
        fsT.Writetext("                if (d) {" & vbCrLf)
        fsT.Writetext("                    var g;" & vbCrLf)
        fsT.Writetext("                    for (g = 0; g < d.length; g++) this.columnsArray.push(d[g])" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            this.columnsArray.sort(this.compareDepth);" & vbCrLf)
        fsT.Writetext("            if (0 < this.columnsArray.length) {" & vbCrLf)
        fsT.Writetext("                b = this.container.set();" & vbCrLf)
        fsT.Writetext("                this.columnSet.push(b);" & vbCrLf)
        fsT.Writetext("                for (a = 0; a < this.columnsArray.length; a++) b.push(this.columnsArray[a].column.set);" & vbCrLf)
        fsT.Writetext("                c && b.translate(c.x, c.y);" & vbCrLf)
        fsT.Writetext("                this.columnsSet = b" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        compareDepth: function (a, b) {" & vbCrLf)
        fsT.Writetext("            return a.depth > b.depth ? 1 : -1" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        zoomScrollbar: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.chartScrollbar," & vbCrLf)
        fsT.Writetext("                b = this.categoryAxis;" & vbCrLf)
        fsT.Writetext("            a && this.updateScrollbar && a.enabled && (a.dragger.stop(), b.parseDates && !b.equalSpacing ? a.timeZoom(this.startTime, this.endTime) : a.zoom(this.start, this.end), this.updateScrollbar = !0)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateTrendLines: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.trendLines," & vbCrLf)
        fsT.Writetext("                b;" & vbCrLf)
        fsT.Writetext("            for (b = 0; b < a.length; b++) {" & vbCrLf)
        fsT.Writetext("                var c = a[b]," & vbCrLf)
        fsT.Writetext("                    c = e.processObject(c, e.TrendLine, this.theme);" & vbCrLf)
        fsT.Writetext("                a[b] = c;" & vbCrLf)
        fsT.Writetext("                c.chart = this;" & vbCrLf)
        fsT.Writetext("                c.id || (c.id = " & Chr(34) & "trendLineAuto" & Chr(34) & " + b + " & Chr(34) & "_" & Chr(34) & " + (new Date).getTime());" & vbCrLf)
        fsT.Writetext("                e.isString(c.valueAxis) && (c.valueAxis = this.getValueAxisById(c.valueAxis));" & vbCrLf)
        fsT.Writetext("                c.valueAxis || (c.valueAxis = this.valueAxes[0]);" & vbCrLf)
        fsT.Writetext("                c.categoryAxis = this.categoryAxis" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        zoomAxesAndGraphs: function () {" & vbCrLf)
        fsT.Writetext("            if (!this.scrollbarOnly) {" & vbCrLf)
        fsT.Writetext("                var a = this.valueAxes," & vbCrLf)
        fsT.Writetext("                    b;" & vbCrLf)
        fsT.Writetext("                for (b = 0; b < a.length; b++) a[b].zoom(this.start, this.end);" & vbCrLf)
        fsT.Writetext("                a = this.graphs;" & vbCrLf)
        fsT.Writetext("                for (b = 0; b < a.length; b++) a[b].zoom(this.start, this.end);" & vbCrLf)
        fsT.Writetext("                this.zoomTrendLines();" & vbCrLf)
        fsT.Writetext("                (b = this.chartCursor) && b.zoom(this.start, this.end, this.startTime, this.endTime)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        countColumns: function () {" & vbCrLf)
        fsT.Writetext("            var a = 0," & vbCrLf)
        fsT.Writetext("                b = this.valueAxes.length," & vbCrLf)
        fsT.Writetext("                c = this.graphs.length," & vbCrLf)
        fsT.Writetext("                d, e, h = !1," & vbCrLf)
        fsT.Writetext("                f, m;" & vbCrLf)
        fsT.Writetext("            for (m = 0; m < b; m++) {" & vbCrLf)
        fsT.Writetext("                e = this.valueAxes[m];" & vbCrLf)
        fsT.Writetext("                var l = e.stackType;" & vbCrLf)
        fsT.Writetext("                if (" & Chr(34) & "100%" & Chr(34) & " == l || " & Chr(34) & "regular" & Chr(34) & " == l) for (h = !1, f = 0; f < c; f++) d = this.graphs[f], d.tcc = 1, d.valueAxis == e && " & Chr(34) & "column" & Chr(34) & " == d.type && (!h && d.stackable && (a++, h = !0), (!d.stackable && d.clustered || d.newStack) && a++, d.columnIndex = a - 1, d.clustered || (d.columnIndex = 0));" & vbCrLf)
        fsT.Writetext("                if (" & Chr(34) & "none" & Chr(34) & " == l || " & Chr(34) & "3d" & Chr(34) & " == l) {" & vbCrLf)
        fsT.Writetext("                    h = !1;" & vbCrLf)
        fsT.Writetext("                    for (f = 0; f < c; f++) d = this.graphs[f], d.valueAxis == e && " & Chr(34) & "column" & Chr(34) & " == d.type && (d.clustered ? (d.tcc = 1, d.newStack && (a = 0), d.hidden || (d.columnIndex = a, a++)) : d.hidden || (h = !0, d.tcc = 1, d.columnIndex = 0));" & vbCrLf)
        fsT.Writetext("                    h && 0 === a && (a = 1)" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("                if (" & Chr(34) & "3d" & Chr(34) & " == l) {" & vbCrLf)
        fsT.Writetext("                    e = 1;" & vbCrLf)
        fsT.Writetext("                    for (m = 0; m < c; m++) d = this.graphs[m], d.newStack && e++, d.depthCount = e, d.tcc = a;" & vbCrLf)
        fsT.Writetext("                    a = e" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            return a" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        parseData: function () {" & vbCrLf)
        fsT.Writetext("            e.AmSerialChart.base.parseData.call(this);" & vbCrLf)
        fsT.Writetext("            this.parseSerialData(this.dataProvider)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getCategoryIndexByValue: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = this.chartData," & vbCrLf)
        fsT.Writetext("                c, d;" & vbCrLf)
        fsT.Writetext("            for (d = 0; d < b.length; d++) b[d].category == a && (c = d);" & vbCrLf)
        fsT.Writetext("            return c" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleCursorChange: function (a) {" & vbCrLf)
        fsT.Writetext("            this.updateLegendValues(a.index)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleCursorZoom: function (a) {" & vbCrLf)
        fsT.Writetext("            this.updateScrollbar = !0;" & vbCrLf)
        fsT.Writetext("            this.zoom(a.start, a.end)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleScrollbarZoom: function (a) {" & vbCrLf)
        fsT.Writetext("            this.updateScrollbar = !1;" & vbCrLf)
        fsT.Writetext("            this.zoom(a.start," & vbCrLf)
        fsT.Writetext("            a.end)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        dispatchTimeZoomEvent: function () {" & vbCrLf)
        fsT.Writetext("            if (this.prevStartTime != this.startTime || this.prevEndTime != this.endTime) {" & vbCrLf)
        fsT.Writetext("                var a = {" & vbCrLf)
        fsT.Writetext("                    type: " & Chr(34) & "zoomed" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("                };" & vbCrLf)
        fsT.Writetext("                a.startDate = new Date(this.startTime);" & vbCrLf)
        fsT.Writetext("                a.endDate = new Date(this.endTime);" & vbCrLf)
        fsT.Writetext("                a.startIndex = this.start;" & vbCrLf)
        fsT.Writetext("                a.endIndex = this.end;" & vbCrLf)
        fsT.Writetext("                this.startIndex = this.start;" & vbCrLf)
        fsT.Writetext("                this.endIndex = this.end;" & vbCrLf)
        fsT.Writetext("                this.startDate = a.startDate;" & vbCrLf)
        fsT.Writetext("                this.endDate = a.endDate;" & vbCrLf)
        fsT.Writetext("                this.prevStartTime = this.startTime;" & vbCrLf)
        fsT.Writetext("                this.prevEndTime = this.endTime;" & vbCrLf)
        fsT.Writetext("                var b = this.categoryAxis," & vbCrLf)
        fsT.Writetext("                    c = e.extractPeriod(b.minPeriod).period," & vbCrLf)
        fsT.Writetext("                    b = b.dateFormatsObject[c];" & vbCrLf)
        fsT.Writetext("                a.startValue = e.formatDate(a.startDate, b, this);" & vbCrLf)
        fsT.Writetext("                a.endValue = e.formatDate(a.endDate, b, this);" & vbCrLf)
        fsT.Writetext("                a.chart = this;" & vbCrLf)
        fsT.Writetext("                a.target = this;" & vbCrLf)
        fsT.Writetext("                this.fire(a.type, a)" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        dispatchIndexZoomEvent: function () {" & vbCrLf)
        fsT.Writetext("            if (this.prevStartIndex != this.start || this.prevEndIndex != this.end) {" & vbCrLf)
        fsT.Writetext("                this.startIndex = this.start;" & vbCrLf)
        fsT.Writetext("                this.endIndex = this.end;" & vbCrLf)
        fsT.Writetext("                var a = this.chartData;" & vbCrLf)
        fsT.Writetext("                if (e.ifArray(a) && !isNaN(this.start) && !isNaN(this.end)) {" & vbCrLf)
        fsT.Writetext("                    var b = {" & vbCrLf)
        fsT.Writetext("                        chart: this," & vbCrLf)
        fsT.Writetext("                        target: this," & vbCrLf)
        fsT.Writetext("                        type: " & Chr(34) & "zoomed" & Chr(34) & "" & vbCrLf)
        fsT.Writetext("                    };" & vbCrLf)
        fsT.Writetext("                    b.startIndex = this.start;" & vbCrLf)
        fsT.Writetext("                    b.endIndex = this.end;" & vbCrLf)
        fsT.Writetext("                    b.startValue = a[this.start].category;" & vbCrLf)
        fsT.Writetext("                    b.endValue = a[this.end].category;" & vbCrLf)
        fsT.Writetext("                    this.categoryAxis.parseDates && (this.startTime = a[this.start].time, this.endTime = a[this.end].time, b.startDate = new Date(this.startTime), b.endDate = new Date(this.endTime));" & vbCrLf)
        fsT.Writetext("                    this.prevStartIndex = this.start;" & vbCrLf)
        fsT.Writetext("                    this.prevEndIndex = this.end;" & vbCrLf)
        fsT.Writetext("                    this.fire(b.type, b)" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateLegendValues: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = this.graphs," & vbCrLf)
        fsT.Writetext("                c;" & vbCrLf)
        fsT.Writetext("            for (c = 0; c < b.length; c++) {" & vbCrLf)
        fsT.Writetext("                var d = b[c];" & vbCrLf)
        fsT.Writetext("                isNaN(a) ? d.currentDataItem = void 0 : d.currentDataItem = this.chartData[a].axes[d.valueAxis.id].graphs[d.id]" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            this.legend && this.legend.updateValues()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getClosestIndex: function (a," & vbCrLf)
        fsT.Writetext("        b, c, d, e, h) {" & vbCrLf)
        fsT.Writetext("            0 > e && (e = 0);" & vbCrLf)
        fsT.Writetext("            h > a.length - 1 && (h = a.length - 1);" & vbCrLf)
        fsT.Writetext("            var f = e + Math.round((h - e) / 2)," & vbCrLf)
        fsT.Writetext("                m = a[f][b];" & vbCrLf)
        fsT.Writetext("            if (c == m) return f;" & vbCrLf)
        fsT.Writetext("            if (1 >= h - e) {" & vbCrLf)
        fsT.Writetext("                if (d) return e;" & vbCrLf)
        fsT.Writetext("                d = a[h][b];" & vbCrLf)
        fsT.Writetext("                return Math.abs(a[e][b] - c) < Math.abs(d - c) ? e : h" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            return c == m ? f : c < m ? this.getClosestIndex(a, b, c, d, e, f) : this.getClosestIndex(a, b, c, d, f, h)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        zoomToIndexes: function (a, b) {" & vbCrLf)
        fsT.Writetext("            this.updateScrollbar = !0;" & vbCrLf)
        fsT.Writetext("            var c = this.chartData;" & vbCrLf)
        fsT.Writetext("            if (c) {" & vbCrLf)
        fsT.Writetext("                var d = c.length;" & vbCrLf)
        fsT.Writetext("                0 < d && (0 > a && (a = 0), b > d - 1 && (b = d - 1), d = this.categoryAxis, d.parseDates && !d.equalSpacing ? this.zoom(c[a].time, this.getEndTime(c[b].time)) : this.zoom(a," & vbCrLf)
        fsT.Writetext("                b))" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        zoomToDates: function (a, b) {" & vbCrLf)
        fsT.Writetext("            this.updateScrollbar = !0;" & vbCrLf)
        fsT.Writetext("            var c = this.chartData;" & vbCrLf)
        fsT.Writetext("            if (this.categoryAxis.equalSpacing) {" & vbCrLf)
        fsT.Writetext("                var d = this.getClosestIndex(c, " & Chr(34) & "time" & Chr(34) & ", a.getTime(), !0, 0, c.length);" & vbCrLf)
        fsT.Writetext("                b = e.resetDateToMin(b, this.categoryAxis.minPeriod, 1);" & vbCrLf)
        fsT.Writetext("                c = this.getClosestIndex(c, " & Chr(34) & "time" & Chr(34) & ", b.getTime(), !1, 0, c.length);" & vbCrLf)
        fsT.Writetext("                this.zoom(d, c)" & vbCrLf)
        fsT.Writetext("            } else this.zoom(a.getTime(), b.getTime())" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        zoomToCategoryValues: function (a, b) {" & vbCrLf)
        fsT.Writetext("            this.updateScrollbar = !0;" & vbCrLf)
        fsT.Writetext("            this.zoom(this.getCategoryIndexByValue(a), this.getCategoryIndexByValue(b))" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        formatPeriodString: function (a," & vbCrLf)
        fsT.Writetext("        b) {" & vbCrLf)
        fsT.Writetext("            if (b) {" & vbCrLf)
        fsT.Writetext("                var c = [" & Chr(34) & "value" & Chr(34) & ", " & Chr(34) & "open" & Chr(34) & ", " & Chr(34) & "low" & Chr(34) & ", " & Chr(34) & "high" & Chr(34) & ", " & Chr(34) & "close" & Chr(34) & "]," & vbCrLf)
        fsT.Writetext("                    d = " & Chr(34) & "value open low high close average sum count" & Chr(34) & ".split(" & Chr(34) & " " & Chr(34) & ")," & vbCrLf)
        fsT.Writetext("                    g = b.valueAxis," & vbCrLf)
        fsT.Writetext("                    h = this.chartData," & vbCrLf)
        fsT.Writetext("                    f = b.numberFormatter;" & vbCrLf)
        fsT.Writetext("                f || (f = this.nf);" & vbCrLf)
        fsT.Writetext("                for (var m = 0; m < c.length; m++) {" & vbCrLf)
        fsT.Writetext("                    for (var l = c[m], k = 0, p = 0, n, x, A, v, t, u = 0, q = 0, r, w, z, B, F, G = this.start; G <= this.end; G++) {" & vbCrLf)
        fsT.Writetext("                        var y = h[G];" & vbCrLf)
        fsT.Writetext("                        if (y && (y = y.axes[g.id].graphs[b.id])) {" & vbCrLf)
        fsT.Writetext("                            if (y.values) {" & vbCrLf)
        fsT.Writetext("                                var C = y.values[l];" & vbCrLf)
        fsT.Writetext("                                if (this.rotate) {" & vbCrLf)
        fsT.Writetext("                                    if (0 > y.x || y.x > y.graph.height) C = NaN" & vbCrLf)
        fsT.Writetext("                                } else if (0 > y.x || y.x > y.graph.width) C = NaN;" & vbCrLf)
        fsT.Writetext("                                if (!isNaN(C)) {" & vbCrLf)
        fsT.Writetext("                                    isNaN(n) && (n = C);" & vbCrLf)
        fsT.Writetext("                                    x = C;" & vbCrLf)
        fsT.Writetext("                                    if (isNaN(A) || A > C) A = C;" & vbCrLf)
        fsT.Writetext("                                    if (isNaN(v) || v < C) v = C;" & vbCrLf)
        fsT.Writetext("                                    t = e.getDecimals(k);" & vbCrLf)
        fsT.Writetext("                                    var E = e.getDecimals(C)," & vbCrLf)
        fsT.Writetext("                                        k = k + C," & vbCrLf)
        fsT.Writetext("                                        k = e.roundTo(k, Math.max(t, E));" & vbCrLf)
        fsT.Writetext("                                    p++;" & vbCrLf)
        fsT.Writetext("                                    t = k / p" & vbCrLf)
        fsT.Writetext("                                }" & vbCrLf)
        fsT.Writetext("                            }" & vbCrLf)
        fsT.Writetext("                            if (y.percents && (y = y.percents[l], !isNaN(y))) {" & vbCrLf)
        fsT.Writetext("                                isNaN(r) && (r = y);" & vbCrLf)
        fsT.Writetext("                                w = y;" & vbCrLf)
        fsT.Writetext("                                if (isNaN(z) || z > y) z = y;" & vbCrLf)
        fsT.Writetext("                                if (isNaN(B) || B < y) B = y;" & vbCrLf)
        fsT.Writetext("                                F = e.getDecimals(u);" & vbCrLf)
        fsT.Writetext("                                C = e.getDecimals(y);" & vbCrLf)
        fsT.Writetext("                                u += y;" & vbCrLf)
        fsT.Writetext("                                u = e.roundTo(u, Math.max(F, C));" & vbCrLf)
        fsT.Writetext("                                q++;" & vbCrLf)
        fsT.Writetext("                                F = u / q" & vbCrLf)
        fsT.Writetext("                            }" & vbCrLf)
        fsT.Writetext("                        }" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                    u = {" & vbCrLf)
        fsT.Writetext("                        open: r," & vbCrLf)
        fsT.Writetext("                        close: w," & vbCrLf)
        fsT.Writetext("                        high: B," & vbCrLf)
        fsT.Writetext("                        low: z," & vbCrLf)
        fsT.Writetext("                        average: F," & vbCrLf)
        fsT.Writetext("                        sum: u," & vbCrLf)
        fsT.Writetext("                        count: q" & vbCrLf)
        fsT.Writetext("                    };" & vbCrLf)
        fsT.Writetext("                    a = e.formatValue(a, {" & vbCrLf)
        fsT.Writetext("                        open: n," & vbCrLf)
        fsT.Writetext("                        close: x," & vbCrLf)
        fsT.Writetext("                        high: v," & vbCrLf)
        fsT.Writetext("                        low: A," & vbCrLf)
        fsT.Writetext("                        average: t," & vbCrLf)
        fsT.Writetext("                        sum: k," & vbCrLf)
        fsT.Writetext("                        count: p" & vbCrLf)
        fsT.Writetext("                    }, d, f, l + " & Chr(34) & "\\." & Chr(34) & ", this.usePrefixes, this.prefixesOfSmallNumbers, this.prefixesOfBigNumbers);" & vbCrLf)
        fsT.Writetext("                    a = e.formatValue(a, u, d, this.pf, " & Chr(34) & "percents\\." & Chr(34) & " + l + " & Chr(34) & "\\." & Chr(34) & ")" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            return a = e.cleanFromEmpty(a)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        formatString: function (a, b, c) {" & vbCrLf)
        fsT.Writetext("            var d = b.graph;" & vbCrLf)
        fsT.Writetext("            if (-1 != a.indexOf(" & Chr(34) & "[[category]]" & Chr(34) & ")) {" & vbCrLf)
        fsT.Writetext("                var g = b.serialDataItem.category;" & vbCrLf)
        fsT.Writetext("                if (this.categoryAxis.parseDates) {" & vbCrLf)
        fsT.Writetext("                    var h = this.balloonDateFormat," & vbCrLf)
        fsT.Writetext("                        f = this.chartCursor;" & vbCrLf)
        fsT.Writetext("                    f && (h = f.categoryBalloonDateFormat); - 1 != a.indexOf(" & Chr(34) & "[[category]]" & Chr(34) & ") && (h = e.formatDate(g, h, this), -1 != h.indexOf(" & Chr(34) & "fff" & Chr(34) & ") && (h = e.formatMilliseconds(h, g)), g = h)" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("                a = a.replace(/\[\[category\]\]/g, String(g))" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            g = d.numberFormatter;" & vbCrLf)
        fsT.Writetext("            g || (g = this.nf);" & vbCrLf)
        fsT.Writetext("            h = b.graph.valueAxis;" & vbCrLf)
        fsT.Writetext("            (f = h.duration) && !isNaN(b.values.value) && (f = e.formatDuration(b.values.value, f, " & Chr(34) & "" & Chr(34) & ", h.durationUnits, h.maxInterval, g), a = a.replace(RegExp(" & Chr(34) & "\\[\\[value\\]\\]" & Chr(34) & ", " & Chr(34) & "g" & Chr(34) & "), f));" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "date" & Chr(34) & " == h.type && (h = e.formatDate(new Date(b.values.value), d.dateFormat, this), f = RegExp(" & Chr(34) & "\\[\\[value\\]\\]" & Chr(34) & ", " & Chr(34) & "g" & Chr(34) & "), a = a.replace(f, h), h = e.formatDate(new Date(b.values.open), d.dateFormat, this), f = RegExp(" & Chr(34) & "\\[\\[open\\]\\]" & Chr(34) & ", " & Chr(34) & "g" & Chr(34) & "), a = a.replace(f, h));" & vbCrLf)
        fsT.Writetext("            d = " & Chr(34) & "value open low high close total" & Chr(34) & ".split(" & Chr(34) & " " & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            h = this.pf;" & vbCrLf)
        fsT.Writetext("            a = e.formatValue(a, b.percents," & vbCrLf)
        fsT.Writetext("            d, h, " & Chr(34) & "percents\\." & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            a = e.formatValue(a, b.values, d, g, " & Chr(34) & "" & Chr(34) & ", this.usePrefixes, this.prefixesOfSmallNumbers, this.prefixesOfBigNumbers);" & vbCrLf)
        fsT.Writetext("            a = e.formatValue(a, b.values, [" & Chr(34) & "percents" & Chr(34) & "], h); - 1 != a.indexOf(" & Chr(34) & "[[" & Chr(34) & ") && (a = e.formatDataContextValue(a, b.dataContext)); - 1 != a.indexOf(" & Chr(34) & "[[" & Chr(34) & ") && b.graph.customData && (a = e.formatDataContextValue(a, b.graph.customData));" & vbCrLf)
        fsT.Writetext("            return a = e.AmSerialChart.base.formatString.call(this, a, b, c)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        addChartScrollbar: function (a) {" & vbCrLf)
        fsT.Writetext("            e.callMethod(" & Chr(34) & "destroy" & Chr(34) & ", [this.chartScrollbar]);" & vbCrLf)
        fsT.Writetext("            a && (a.chart = this, this.listenTo(a, " & Chr(34) & "zoomed" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("            this.handleScrollbarZoom));" & vbCrLf)
        fsT.Writetext("            this.rotate ? void 0 === a.width && (a.width = a.scrollbarHeight) : void 0 === a.height && (a.height = a.scrollbarHeight);" & vbCrLf)
        fsT.Writetext("            this.chartScrollbar = a" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        removeChartScrollbar: function () {" & vbCrLf)
        fsT.Writetext("            e.callMethod(" & Chr(34) & "destroy" & Chr(34) & ", [this.chartScrollbar]);" & vbCrLf)
        fsT.Writetext("            this.chartScrollbar = null" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        handleReleaseOutside: function (a) {" & vbCrLf)
        fsT.Writetext("            e.AmSerialChart.base.handleReleaseOutside.call(this, a);" & vbCrLf)
        fsT.Writetext("            e.callMethod(" & Chr(34) & "handleReleaseOutside" & Chr(34) & ", [this.chartScrollbar])" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        update: function () {" & vbCrLf)
        fsT.Writetext("            e.AmSerialChart.base.update.call(this);" & vbCrLf)
        fsT.Writetext("            this.chartScrollbar && this.chartScrollbar.update && this.chartScrollbar.update()" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    })" & vbCrLf)
        fsT.Writetext("})();" & vbCrLf)
        fsT.Writetext("(function () {" & vbCrLf)
        fsT.Writetext("    var e = window.AmCharts;" & vbCrLf)
        fsT.Writetext("    e.Cuboid = e.Class({" & vbCrLf)
        fsT.Writetext("        construct: function (a, b, c, d, e, h, f, m, l, k, p, n, x, A, v, t, u) {" & vbCrLf)
        fsT.Writetext("            this.set = a.set();" & vbCrLf)
        fsT.Writetext("            this.container = a;" & vbCrLf)
        fsT.Writetext("            this.h = Math.round(c);" & vbCrLf)
        fsT.Writetext("            this.w = Math.round(b);" & vbCrLf)
        fsT.Writetext("            this.dx = d;" & vbCrLf)
        fsT.Writetext("            this.dy = e;" & vbCrLf)
        fsT.Writetext("            this.colors = h;" & vbCrLf)
        fsT.Writetext("            this.alpha = f;" & vbCrLf)
        fsT.Writetext("            this.bwidth = m;" & vbCrLf)
        fsT.Writetext("            this.bcolor = l;" & vbCrLf)
        fsT.Writetext("            this.balpha = k;" & vbCrLf)
        fsT.Writetext("            this.dashLength = A;" & vbCrLf)
        fsT.Writetext("            this.topRadius = t;" & vbCrLf)
        fsT.Writetext("            this.pattern = v;" & vbCrLf)
        fsT.Writetext("            this.rotate = x;" & vbCrLf)
        fsT.Writetext("            this.bcn = u;" & vbCrLf)
        fsT.Writetext("            x ? 0 > b && 0 === p && (p = 180) : 0 > c && 270 == p && (p = 90);" & vbCrLf)
        fsT.Writetext("            this.gradientRotation = p;" & vbCrLf)
        fsT.Writetext("            0 === d && 0 === e && (this.cornerRadius = n);" & vbCrLf)
        fsT.Writetext("            this.draw()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        draw: function () {" & vbCrLf)
        fsT.Writetext("            var a = this.set;" & vbCrLf)
        fsT.Writetext("            a.clear();" & vbCrLf)
        fsT.Writetext("            var b = this.container," & vbCrLf)
        fsT.Writetext("                c = b.chart," & vbCrLf)
        fsT.Writetext("                d = this.w," & vbCrLf)
        fsT.Writetext("                g = this.h," & vbCrLf)
        fsT.Writetext("                h = this.dx," & vbCrLf)
        fsT.Writetext("                f = this.dy," & vbCrLf)
        fsT.Writetext("                m = this.colors," & vbCrLf)
        fsT.Writetext("                l = this.alpha," & vbCrLf)
        fsT.Writetext("                k = this.bwidth," & vbCrLf)
        fsT.Writetext("                p = this.bcolor," & vbCrLf)
        fsT.Writetext("                n = this.balpha," & vbCrLf)
        fsT.Writetext("                x = this.gradientRotation," & vbCrLf)
        fsT.Writetext("                A = this.cornerRadius," & vbCrLf)
        fsT.Writetext("                v = this.dashLength," & vbCrLf)
        fsT.Writetext("                t = this.pattern," & vbCrLf)
        fsT.Writetext("                u = this.topRadius," & vbCrLf)
        fsT.Writetext("                q = this.bcn," & vbCrLf)
        fsT.Writetext("                r = m," & vbCrLf)
        fsT.Writetext("                w = m;" & vbCrLf)
        fsT.Writetext("            " & Chr(34) & "object" & Chr(34) & " == typeof m && (r = m[0], w = m[m.length - 1]);" & vbCrLf)
        fsT.Writetext("            var z, B, F, G, y, C, E, L, M, Q = l;" & vbCrLf)
        fsT.Writetext("            t && (l = 0);" & vbCrLf)
        fsT.Writetext("            var D, H, I, J, K = this.rotate;" & vbCrLf)
        fsT.Writetext("            if (0 < Math.abs(h) || 0 < Math.abs(f)) if (isNaN(u)) E = w, w = e.adjustLuminosity(r, -.2), w = e.adjustLuminosity(r, -.2), z = e.polygon(b, [0, h, d + h, d, 0], [0, f, f, 0, 0]," & vbCrLf)
        fsT.Writetext("            w, l, 1, p, 0, x), 0 < n && (M = e.line(b, [0, h, d + h], [0, f, f], p, n, k, v)), B = e.polygon(b, [0, 0, d, d, 0], [0, g, g, 0, 0], w, l, 1, p, 0, x), B.translate(h, f), 0 < n && (F = e.line(b, [h, h], [f, f + g], p, n, k, v)), G = e.polygon(b, [0, 0, h, h, 0], [0, g, g + f, f, 0], w, l, 1, p, 0, x), y = e.polygon(b, [d, d, d + h, d + h, d], [0, g, g + f, f, 0], w, l, 1, p, 0, x), 0 < n && (C = e.line(b, [d, d + h, d + h, d], [0, f, g + f, g], p, n, k, v)), w = e.adjustLuminosity(E, .2), E = e.polygon(b, [0, h, d + h, d, 0], [g, g + f, g + f, g, g], w, l, 1, p, 0, x), 0 < n && (L = e.line(b, [0, h, d + h], [g, g + f, g + f], p, n, k, v));" & vbCrLf)
        fsT.Writetext("            else {" & vbCrLf)
        fsT.Writetext("                var N, O, P;" & vbCrLf)
        fsT.Writetext("                K ? (N = g / 2, w = h / 2, P = g / 2, O = d + h / 2, H = Math.abs(g / 2), D = Math.abs(h / 2)) : (w = d / 2, N = f / 2, O = d / 2, P = g + f / 2 + 1, D = Math.abs(d / 2), H = Math.abs(f / 2));" & vbCrLf)
        fsT.Writetext("                I = D * u;" & vbCrLf)
        fsT.Writetext("                J = H * u;.1 < D && .1 < D && (z = e.circle(b, D, r, l, k, p, n, !1, H), z.translate(w, N));.1 < I && .1 < I && (E = e.circle(b, I, e.adjustLuminosity(r, .5), l, k, p, n, !1, J), E.translate(O, P))" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            l = Q;" & vbCrLf)
        fsT.Writetext("            1 > Math.abs(g) && (g = 0);" & vbCrLf)
        fsT.Writetext("            1 > Math.abs(d) && (d = 0);" & vbCrLf)
        fsT.Writetext("            !isNaN(u) && (0 < Math.abs(h) || 0 < Math.abs(f)) ? (m = [r], m = {" & vbCrLf)
        fsT.Writetext("                fill: m," & vbCrLf)
        fsT.Writetext("                stroke: p," & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "stroke-width" & Chr(34) & ": k," & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "stroke-opacity" & Chr(34) & ": n," & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "fill-opacity" & Chr(34) & ": l" & vbCrLf)
        fsT.Writetext("            }, K ? (l = " & Chr(34) & "M0,0 L" & Chr(34) & " + d + " & Chr(34) & "," & Chr(34) & " + (g / 2 - g / 2 * u), k = " & Chr(34) & " B" & Chr(34) & ", 0 < d && (k = " & Chr(34) & " A" & Chr(34) & "), e.VML ? (l += k + Math.round(d - I) + " & Chr(34) & "," & Chr(34) & " + Math.round(g / 2 - J) + " & Chr(34) & "," & Chr(34) & " + Math.round(d + I) + " & Chr(34) & "," & Chr(34) & " + Math.round(g / 2 + J) + " & Chr(34) & "," & Chr(34) & " + d + " & Chr(34) & ",0," & Chr(34) & " + d + " & Chr(34) & "," & Chr(34) & " + g, l = l + (" & Chr(34) & " L0," & Chr(34) & " + g) + (k + Math.round(-D) + " & Chr(34) & "," & Chr(34) & " + Math.round(g / 2 - H) + " & Chr(34) & "," & Chr(34) & " + Math.round(D) + " & Chr(34) & "," & Chr(34) & " + Math.round(g / 2 + H) + " & Chr(34) & ",0," & Chr(34) & " + g + " & Chr(34) & ",0,0" & Chr(34) & ")) : (l += " & Chr(34) & "A" & Chr(34) & " + I + " & Chr(34) & "," & Chr(34) & " + J + " & Chr(34) & ",0,0,0," & Chr(34) & " + d + " & Chr(34) & "," & Chr(34) & " + (g - g / 2 * (1 - u)) + " & Chr(34) & "L0," & Chr(34) & " + g, l += " & Chr(34) & "A" & Chr(34) & " + D + " & Chr(34) & "," & Chr(34) & " + H + " & Chr(34) & ",0,0,1,0,0" & Chr(34) & "), D = 90) : (k = d / 2 - d / 2 * u, l = " & Chr(34) & "M0,0 L" & Chr(34) & " + k + " & Chr(34) & "," & Chr(34) & " + g, e.VML ? (l = " & Chr(34) & "M0,0 L" & Chr(34) & " + k + " & Chr(34) & "," & Chr(34) & " + g, k = " & Chr(34) & " B" & Chr(34) & ", 0 > g && (k = " & Chr(34) & " A" & Chr(34) & "), l += k + Math.round(d / 2 - I) + " & Chr(34) & "," & Chr(34) & " + Math.round(g - J) + " & Chr(34) & "," & Chr(34) & " + Math.round(d / 2 + I) + " & Chr(34) & "," & Chr(34) & " + Math.round(g + J) + " & Chr(34) & ",0," & Chr(34) & " + g + " & Chr(34) & "," & Chr(34) & " + d + " & Chr(34) & "," & Chr(34) & " + g, l += " & Chr(34) & " L" & Chr(34) & " + d + " & Chr(34) & ",0" & Chr(34) & ", l += k + Math.round(d / 2 + D) + " & Chr(34) & "," & Chr(34) & " + Math.round(H) + " & Chr(34) & "," & Chr(34) & " + Math.round(d / 2 - D) + " & Chr(34) & "," & Chr(34) & " + Math.round(-H) + " & Chr(34) & "," & Chr(34) & " + d + " & Chr(34) & ",0,0,0" & Chr(34) & ") : (l += " & Chr(34) & "A" & Chr(34) & " + I + " & Chr(34) & "," & Chr(34) & " + J + " & Chr(34) & ",0,0,0," & Chr(34) & " + (d - d / 2 * (1 - u)) + " & Chr(34) & "," & Chr(34) & " + g + " & Chr(34) & "L" & Chr(34) & " + d + " & Chr(34) & ",0" & Chr(34) & ", l += " & Chr(34) & "A" & Chr(34) & " + D + " & Chr(34) & "," & Chr(34) & " + H + " & Chr(34) & ",0,0,1,0,0" & Chr(34) & "), D = 180), b = b.path(l).attr(m), b.gradient(" & Chr(34) & "linearGradient" & Chr(34) & ", [r, e.adjustLuminosity(r, -.3), e.adjustLuminosity(r, -.3), r], D), K ? b.translate(h / 2, 0) : b.translate(0, f / 2)) : b = 0 === g ? e.line(b, [0, d], [0, 0], p, n, k, v) : 0 === d ? e.line(b, [0, 0], [0, g], p, n, k, v) : 0 < A ? e.rect(b, d, g, m, l, k, p, n, A, x, v) : e.polygon(b, [0, 0, d, d, 0], [0, g, g, 0, 0], m, l, k, p, n, x, !1, v);" & vbCrLf)
        fsT.Writetext("            d = isNaN(u) ? 0 > g ? [z," & vbCrLf)
        fsT.Writetext("            M, B, F, G, y, C, E, L, b] : [E, L, B, F, G, y, z, M, C, b] : K ? 0 < d ? [z, b, E] : [E, b, z] : 0 > g ? [z, b, E] : [E, b, z];" & vbCrLf)
        fsT.Writetext("            e.setCN(c, b, q + " & Chr(34) & "front" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            e.setCN(c, B, q + " & Chr(34) & "back" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            e.setCN(c, E, q + " & Chr(34) & "top" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            e.setCN(c, z, q + " & Chr(34) & "bottom" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            e.setCN(c, G, q + " & Chr(34) & "left" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            e.setCN(c, y, q + " & Chr(34) & "right" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            for (z = 0; z < d.length; z++) if (B = d[z]) a.push(B), e.setCN(c, B, q + " & Chr(34) & "element" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("            t && b.pattern(t, NaN, c.path)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        width: function (a) {" & vbCrLf)
        fsT.Writetext("            isNaN(a) && (a = 0);" & vbCrLf)
        fsT.Writetext("            this.w = Math.round(a);" & vbCrLf)
        fsT.Writetext("            this.draw()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        height: function (a) {" & vbCrLf)
        fsT.Writetext("            isNaN(a) && (a = 0);" & vbCrLf)
        fsT.Writetext("            this.h = Math.round(a);" & vbCrLf)
        fsT.Writetext("            this.draw()" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        animateHeight: function (a, b) {" & vbCrLf)
        fsT.Writetext("            var c = this;" & vbCrLf)
        fsT.Writetext("            c.easing = b;" & vbCrLf)
        fsT.Writetext("            c.totalFrames = Math.round(1E3 * a / e.updateRate);" & vbCrLf)
        fsT.Writetext("            c.rh = c.h;" & vbCrLf)
        fsT.Writetext("            c.frame = 0;" & vbCrLf)
        fsT.Writetext("            c.height(1);" & vbCrLf)
        fsT.Writetext("            setTimeout(function () {" & vbCrLf)
        fsT.Writetext("                c.updateHeight.call(c)" & vbCrLf)
        fsT.Writetext("            }, e.updateRate)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateHeight: function () {" & vbCrLf)
        fsT.Writetext("            var a = this;" & vbCrLf)
        fsT.Writetext("            a.frame++;" & vbCrLf)
        fsT.Writetext("            var b = a.totalFrames;" & vbCrLf)
        fsT.Writetext("            a.frame <= b && (b = a.easing(0, a.frame, 1, a.rh - 1, b), a.height(b), setTimeout(function () {" & vbCrLf)
        fsT.Writetext("                a.updateHeight.call(a)" & vbCrLf)
        fsT.Writetext("            }, e.updateRate))" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        animateWidth: function (a, b) {" & vbCrLf)
        fsT.Writetext("            var c = this;" & vbCrLf)
        fsT.Writetext("            c.easing = b;" & vbCrLf)
        fsT.Writetext("            c.totalFrames = Math.round(1E3 * a / e.updateRate);" & vbCrLf)
        fsT.Writetext("            c.rw = c.w;" & vbCrLf)
        fsT.Writetext("            c.frame = 0;" & vbCrLf)
        fsT.Writetext("            c.width(1);" & vbCrLf)
        fsT.Writetext("            setTimeout(function () {" & vbCrLf)
        fsT.Writetext("                c.updateWidth.call(c)" & vbCrLf)
        fsT.Writetext("            }, e.updateRate)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        updateWidth: function () {" & vbCrLf)
        fsT.Writetext("            var a = this;" & vbCrLf)
        fsT.Writetext("            a.frame++;" & vbCrLf)
        fsT.Writetext("            var b = a.totalFrames;" & vbCrLf)
        fsT.Writetext("            a.frame <= b && (b = a.easing(0, a.frame, 1, a.rw - 1, b), a.width(b), setTimeout(function () {" & vbCrLf)
        fsT.Writetext("                a.updateWidth.call(a)" & vbCrLf)
        fsT.Writetext("            }, e.updateRate))" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    })" & vbCrLf)
        fsT.Writetext("})();" & vbCrLf)
        fsT.Writetext("(function () {" & vbCrLf)
        fsT.Writetext("    var e = window.AmCharts;" & vbCrLf)
        fsT.Writetext("    e.CategoryAxis = e.Class({" & vbCrLf)
        fsT.Writetext("        inherits: e.AxisBase," & vbCrLf)
        fsT.Writetext("        construct: function (a) {" & vbCrLf)
        fsT.Writetext("            this.cname = " & Chr(34) & "CategoryAxis" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            e.CategoryAxis.base.construct.call(this, a);" & vbCrLf)
        fsT.Writetext("            this.minPeriod = " & Chr(34) & "DD" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.equalSpacing = this.parseDates = !1;" & vbCrLf)
        fsT.Writetext("            this.position = " & Chr(34) & "bottom" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.startOnAxis = !1;" & vbCrLf)
        fsT.Writetext("            this.firstDayOfWeek = 1;" & vbCrLf)
        fsT.Writetext("            this.gridPosition = " & Chr(34) & "middle" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.markPeriodChange = this.boldPeriodBeginning = !0;" & vbCrLf)
        fsT.Writetext("            this.safeDistance = 30;" & vbCrLf)
        fsT.Writetext("            this.centerLabelOnFullPeriod = !0;" & vbCrLf)
        fsT.Writetext("            e.applyTheme(this, a, this.cname)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        draw: function () {" & vbCrLf)
        fsT.Writetext("            e.CategoryAxis.base.draw.call(this);" & vbCrLf)
        fsT.Writetext("            this.generateDFObject();" & vbCrLf)
        fsT.Writetext("            var a = this.chart.chartData;" & vbCrLf)
        fsT.Writetext("            this.data = a;" & vbCrLf)
        fsT.Writetext("            if (e.ifArray(a)) {" & vbCrLf)
        fsT.Writetext("                var b, c = this.chart;" & vbCrLf)
        fsT.Writetext("                " & Chr(34) & "scrollbar" & Chr(34) & " != this.id ? (e.setCN(c, this.set, " & Chr(34) & "category-axis" & Chr(34) & "), e.setCN(c, this.labelsSet, " & Chr(34) & "category-axis" & Chr(34) & "), e.setCN(c, this.axisLine.axisSet, " & Chr(34) & "category-axis" & Chr(34) & ")) : this.bcn = this.id + " & Chr(34) & "-" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                var d = this.start," & vbCrLf)
        fsT.Writetext("                    g = this.labelFrequency," & vbCrLf)
        fsT.Writetext("                    h = 0," & vbCrLf)
        fsT.Writetext("                    f = this.end - d + 1," & vbCrLf)
        fsT.Writetext("                    m = this.gridCountR," & vbCrLf)
        fsT.Writetext("                    l = this.showFirstLabel," & vbCrLf)
        fsT.Writetext("                    k = this.showLastLabel," & vbCrLf)
        fsT.Writetext("                    p, n = " & Chr(34) & "" & Chr(34) & "," & vbCrLf)
        fsT.Writetext("                    n = e.extractPeriod(this.minPeriod)," & vbCrLf)
        fsT.Writetext("                    x = e.getPeriodDuration(n.period, n.count)," & vbCrLf)
        fsT.Writetext("                    A, v, t, u, q;" & vbCrLf)
        fsT.Writetext("                A = this.rotate;" & vbCrLf)
        fsT.Writetext("                b = this.firstDayOfWeek;" & vbCrLf)
        fsT.Writetext("                p = this.boldPeriodBeginning;" & vbCrLf)
        fsT.Writetext("                var r = e.resetDateToMin(new Date(a[a.length - 1].time + 1.05 * x), this.minPeriod, 1, b).getTime();" & vbCrLf)
        fsT.Writetext("                this.firstTime = c.firstTime;" & vbCrLf)
        fsT.Writetext("                this.endTime > r && (this.endTime = r);" & vbCrLf)
        fsT.Writetext("                q = this.minorGridEnabled;" & vbCrLf)
        fsT.Writetext("                var w, r = this.gridAlpha;" & vbCrLf)
        fsT.Writetext("                if (this.parseDates && !this.equalSpacing) this.lastTime = a[a.length - 1].time, this.maxTime = e.resetDateToMin(new Date(this.lastTime + 1.05 * x), this.minPeriod, 1, b).getTime(), this.timeDifference = this.endTime - this.startTime, this.parseDatesDraw();" & vbCrLf)
        fsT.Writetext("                else if (!this.parseDates) {" & vbCrLf)
        fsT.Writetext("                    if (this.cellWidth = this.getStepWidth(f)," & vbCrLf)
        fsT.Writetext("                    f < m && (m = f), h += this.start, this.stepWidth = this.getStepWidth(f), 0 < m) {" & vbCrLf)
        fsT.Writetext("                        m = Math.floor(f / m);" & vbCrLf)
        fsT.Writetext("                        w = this.chooseMinorFrequency(m);" & vbCrLf)
        fsT.Writetext("                        f = h;" & vbCrLf)
        fsT.Writetext("                        f / 2 == Math.round(f / 2) && f--;" & vbCrLf)
        fsT.Writetext("                        0 > f && (f = 0);" & vbCrLf)
        fsT.Writetext("                        var z = 0;" & vbCrLf)
        fsT.Writetext("                        this.end - f + 1 >= this.autoRotateCount && (this.labelRotation = this.autoRotateAngle);" & vbCrLf)
        fsT.Writetext("                        for (b = f; b <= this.end + 2; b++) {" & vbCrLf)
        fsT.Writetext("                            p = !1;" & vbCrLf)
        fsT.Writetext("                            0 <= b && b < this.data.length ? (v = this.data[b], n = v.category, p = v.forceShow) : n = " & Chr(34) & "" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                            if (q && !isNaN(w)) if (b / w == Math.round(b / w) || p) b / m == Math.round(b / m) || p || (this.gridAlpha = this.minorGridAlpha, n = void 0);" & vbCrLf)
        fsT.Writetext("                            else continue;" & vbCrLf)
        fsT.Writetext("                            else if (b / m != Math.round(b / m) && !p) continue;" & vbCrLf)
        fsT.Writetext("                            f = this.getCoordinate(b - h);" & vbCrLf)
        fsT.Writetext("                            t = 0;" & vbCrLf)
        fsT.Writetext("                            " & Chr(34) & "start" & Chr(34) & " == this.gridPosition && (f -= this.cellWidth / 2, t = this.cellWidth / 2);" & vbCrLf)
        fsT.Writetext("                            p = !0;" & vbCrLf)
        fsT.Writetext("                            a = t;" & vbCrLf)
        fsT.Writetext("                            " & Chr(34) & "start" & Chr(34) & " == this.tickPosition && (a = 0, p = !1, t = 0);" & vbCrLf)
        fsT.Writetext("                            if (b == d && !l || b == this.end && !k) n = void 0;" & vbCrLf)
        fsT.Writetext("                            Math.round(z / g) != z / g && (n = void 0);" & vbCrLf)
        fsT.Writetext("                            z++;" & vbCrLf)
        fsT.Writetext("                            var B = this.cellWidth;" & vbCrLf)
        fsT.Writetext("                            A && (B = NaN);" & vbCrLf)
        fsT.Writetext("                            this.labelFunction && v && (n = this.labelFunction(n, v, this));" & vbCrLf)
        fsT.Writetext("                            n = e.fixBrakes(n);" & vbCrLf)
        fsT.Writetext("                            x = !1;" & vbCrLf)
        fsT.Writetext("                            this.boldLabels && (x = !0);" & vbCrLf)
        fsT.Writetext("                            b > this.end && " & Chr(34) & "start" & Chr(34) & " == this.tickPosition && (n = " & Chr(34) & " " & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                            this.rotate && this.inside && (t = -2);" & vbCrLf)
        fsT.Writetext("                            t = new this.axisItemRenderer(this, f, n, p, B, t, void 0," & vbCrLf)
        fsT.Writetext("                            x, a, !1, v.labelColor, v.className);" & vbCrLf)
        fsT.Writetext("                            t.serialDataItem = v;" & vbCrLf)
        fsT.Writetext("                            this.pushAxisItem(t);" & vbCrLf)
        fsT.Writetext("                            this.gridAlpha = r" & vbCrLf)
        fsT.Writetext("                        }" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                } else if (this.parseDates && this.equalSpacing) {" & vbCrLf)
        fsT.Writetext("                    h = this.start;" & vbCrLf)
        fsT.Writetext("                    this.startTime = this.data[this.start].time;" & vbCrLf)
        fsT.Writetext("                    this.endTime = this.data[this.end].time;" & vbCrLf)
        fsT.Writetext("                    this.timeDifference = this.endTime - this.startTime;" & vbCrLf)
        fsT.Writetext("                    d = this.choosePeriod(0);" & vbCrLf)
        fsT.Writetext("                    g = d.period;" & vbCrLf)
        fsT.Writetext("                    A = d.count;" & vbCrLf)
        fsT.Writetext("                    a = e.getPeriodDuration(g, A);" & vbCrLf)
        fsT.Writetext("                    a < x && (g = n.period, A = n.count, a = x);" & vbCrLf)
        fsT.Writetext("                    v = g;" & vbCrLf)
        fsT.Writetext("                    " & Chr(34) & "WW" & Chr(34) & " == v && (v = " & Chr(34) & "DD" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                    this.stepWidth = this.getStepWidth(f);" & vbCrLf)
        fsT.Writetext("                    m = Math.ceil(this.timeDifference / a) + 1;" & vbCrLf)
        fsT.Writetext("                    n = e.resetDateToMin(new Date(this.startTime - a), g, A, b).getTime();" & vbCrLf)
        fsT.Writetext("                    this.cellWidth = this.getStepWidth(f);" & vbCrLf)
        fsT.Writetext("                    f = Math.round(n / a);" & vbCrLf)
        fsT.Writetext("                    d = -1;" & vbCrLf)
        fsT.Writetext("                    f / 2 == Math.round(f / 2) && (d = -2, n -= a);" & vbCrLf)
        fsT.Writetext("                    f = this.start;" & vbCrLf)
        fsT.Writetext("                    f / 2 == Math.round(f / 2) && f--;" & vbCrLf)
        fsT.Writetext("                    0 > f && (f = 0);" & vbCrLf)
        fsT.Writetext("                    a = this.end + 2;" & vbCrLf)
        fsT.Writetext("                    a >= this.data.length && (a = this.data.length);" & vbCrLf)
        fsT.Writetext("                    B = !1;" & vbCrLf)
        fsT.Writetext("                    B = !l;" & vbCrLf)
        fsT.Writetext("                    this.previousPos = -1E3;" & vbCrLf)
        fsT.Writetext("                    20 < this.labelRotation && (this.safeDistance = 5);" & vbCrLf)
        fsT.Writetext("                    var F = f;" & vbCrLf)
        fsT.Writetext("                    if (this.data[f].time != e.resetDateToMin(new Date(this.data[f].time), g, A, b).getTime()) {" & vbCrLf)
        fsT.Writetext("                        var x = 0," & vbCrLf)
        fsT.Writetext("                            G = n;" & vbCrLf)
        fsT.Writetext("                        for (b = f; b < a; b++) u = this.data[b].time, this.checkPeriodChange(g, A, u, G) && (x++, 2 <= x && (F = b, b = a), G = u)" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                    q && 1 < A && (w = this.chooseMinorFrequency(A), e.getPeriodDuration(g, w));" & vbCrLf)
        fsT.Writetext("                    if (0 < this.gridCountR) for (b = f; b < a; b++) if (u = this.data[b].time, this.checkPeriodChange(g, A, u, n) && b >= F) {" & vbCrLf)
        fsT.Writetext("                        f = this.getCoordinate(b - this.start);" & vbCrLf)
        fsT.Writetext("                        q = !1;" & vbCrLf)
        fsT.Writetext("                        this.nextPeriod[v] && (q = this.checkPeriodChange(this.nextPeriod[v], 1, u, n, v));" & vbCrLf)
        fsT.Writetext("                        x = !1;" & vbCrLf)
        fsT.Writetext("                        q && this.markPeriodChange ? (q = this.dateFormatsObject[this.nextPeriod[v]], x = !0) : q = this.dateFormatsObject[v];" & vbCrLf)
        fsT.Writetext("                        n = e.formatDate(new Date(u), q, c);" & vbCrLf)
        fsT.Writetext("                        if (b == d && !l || b == m && !k) n = " & Chr(34) & " " & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                        B ? B = !1 : (p || (x = !1), f - this.previousPos > this.safeDistance * Math.cos(this.labelRotation * Math.PI / 180) && (this.labelFunction && (n = this.labelFunction(n, new Date(u), this, g, A, t)), this.boldLabels && (x = !0), t = new this.axisItemRenderer(this, f, n, void 0, void 0, void 0, void 0, x), q = t.graphics(), this.pushAxisItem(t), q = q.getBBox().width, e.isModern || (q -= f), this.previousPos = f + q));" & vbCrLf)
        fsT.Writetext("                        t = n = u" & vbCrLf)
        fsT.Writetext("                    } else isNaN(w) || (this.checkPeriodChange(g, w, u, z) && (this.gridAlpha = this.minorGridAlpha, f = this.getCoordinate(b - this.start), q = new this.axisItemRenderer(this, f, void 0, void 0, void 0, void 0, void 0, void 0, void 0, !0), this.pushAxisItem(q)," & vbCrLf)
        fsT.Writetext("                    z = u), this.gridAlpha = r)" & vbCrLf)
        fsT.Writetext("                }" & vbCrLf)
        fsT.Writetext("                for (b = 0; b < this.data.length; b++) if (l = this.data[b]) k = this.parseDates && !this.equalSpacing ? Math.round((l.time - this.startTime) * this.stepWidth + this.cellWidth / 2) : this.getCoordinate(b - h), l.x[this.id] = k;" & vbCrLf)
        fsT.Writetext("                l = this.guides.length;" & vbCrLf)
        fsT.Writetext("                for (b = 0; b < l; b++) k = this.guides[b], q = p = q = r = d = NaN, w = k.above, k.toCategory && (p = c.getCategoryIndexByValue(k.toCategory), isNaN(p) || (d = this.getCoordinate(p - h), k.expand && (d += this.cellWidth / 2), t = new this.axisItemRenderer(this, d, " & Chr(34) & "" & Chr(34) & ", !0, NaN, NaN, k), this.pushAxisItem(t, w))), k.category && (q = c.getCategoryIndexByValue(k.category), isNaN(q) || (r = this.getCoordinate(q - h), k.expand && (r -= this.cellWidth / 2), q = (d - r) / 2, t = new this.axisItemRenderer(this, r, k.label, !0, NaN, q, k), this.pushAxisItem(t, w))), q = c.dataDateFormat, k.toDate && (k.toDate = e.getDate(k.toDate, q, this.minPeriod), this.equalSpacing ? (p = c.getClosestIndex(this.data, " & Chr(34) & "time" & Chr(34) & ", k.toDate.getTime(), !1, 0, this.data.length - 1), isNaN(p) || (d = this.getCoordinate(p - h))) : d = (k.toDate.getTime() - this.startTime) * this.stepWidth, t = new this.axisItemRenderer(this," & vbCrLf)
        fsT.Writetext("                d, " & Chr(34) & "" & Chr(34) & ", !0, NaN, NaN, k), this.pushAxisItem(t, w)), k.date && (k.date = e.getDate(k.date, q, this.minPeriod), this.equalSpacing ? (q = c.getClosestIndex(this.data, " & Chr(34) & "time" & Chr(34) & ", k.date.getTime(), !1, 0, this.data.length - 1), isNaN(q) || (r = this.getCoordinate(q - h))) : r = (k.date.getTime() - this.startTime) * this.stepWidth, q = (d - r) / 2, p = !0, k.toDate && (p = !1), t = " & Chr(34) & "H" & Chr(34) & " == this.orientation ? new this.axisItemRenderer(this, r, k.label, p, 2 * q, NaN, k) : new this.axisItemRenderer(this, r, k.label, !1, NaN, q, k), this.pushAxisItem(t, w)), (0 < d || 0 < r) && (d < this.width || r < this.width) && (d = new this.guideFillRenderer(this, r, d, k), r = d.graphics(), this.pushAxisItem(d, w), k.graphics = r, r.index = b, k.balloonText && this.addEventListeners(r, k))" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("            this.axisCreated = !0;" & vbCrLf)
        fsT.Writetext("            c = this.x;" & vbCrLf)
        fsT.Writetext("            h = this.y;" & vbCrLf)
        fsT.Writetext("            this.set.translate(c, h);" & vbCrLf)
        fsT.Writetext("            this.labelsSet.translate(c, h);" & vbCrLf)
        fsT.Writetext("            this.positionTitle();" & vbCrLf)
        fsT.Writetext("            (c = this.axisLine.set) && c.toFront();" & vbCrLf)
        fsT.Writetext("            c = this.getBBox().height;" & vbCrLf)
        fsT.Writetext("            2 < c - this.previousHeight && this.autoWrap && !this.parseDates && (this.axisCreated = this.chart.marginsUpdated = !1);" & vbCrLf)
        fsT.Writetext("            this.previousHeight = c" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        xToIndex: function (a) {" & vbCrLf)
        fsT.Writetext("            var b = this.data," & vbCrLf)
        fsT.Writetext("                c = this.chart," & vbCrLf)
        fsT.Writetext("                d = c.rotate," & vbCrLf)
        fsT.Writetext("                g = this.stepWidth;" & vbCrLf)
        fsT.Writetext("            this.parseDates && !this.equalSpacing ? (a = this.startTime + Math.round(a / g) - this.minDuration() / 2, c = c.getClosestIndex(b, " & Chr(34) & "time" & Chr(34) & ", a, !1, this.start, this.end + 1)) : (this.startOnAxis || (a -= g / 2), c = this.start + Math.round(a / g));" & vbCrLf)
        fsT.Writetext("            var c = e.fitToBounds(c, 0, b.length - 1)," & vbCrLf)
        fsT.Writetext("                h;" & vbCrLf)
        fsT.Writetext("            b[c] && (h = b[c].x[this.id]);" & vbCrLf)
        fsT.Writetext("            d ? h > this.height + 1 && c-- : h > this.width + 1 && c--;" & vbCrLf)
        fsT.Writetext("            0 > h && c++;" & vbCrLf)
        fsT.Writetext("            return c = e.fitToBounds(c, 0, b.length - 1)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        dateToCoordinate: function (a) {" & vbCrLf)
        fsT.Writetext("            return this.parseDates && !this.equalSpacing ? (a.getTime() - this.startTime) * this.stepWidth : this.parseDates && this.equalSpacing ? (a = this.chart.getClosestIndex(this.data, " & Chr(34) & "time" & Chr(34) & ", a.getTime(), !1, 0, this.data.length - 1), this.getCoordinate(a - this.start)) : NaN" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        categoryToCoordinate: function (a) {" & vbCrLf)
        fsT.Writetext("            return this.chart ? (a = this.chart.getCategoryIndexByValue(a), this.getCoordinate(a - this.start)) : NaN" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        coordinateToDate: function (a) {" & vbCrLf)
        fsT.Writetext("            return this.equalSpacing ? (a = this.xToIndex(a), new Date(this.data[a].time)) : new Date(this.startTime + a / this.stepWidth)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        getCoordinate: function (a) {" & vbCrLf)
        fsT.Writetext("            a *= this.stepWidth;" & vbCrLf)
        fsT.Writetext("            this.startOnAxis || (a += this.stepWidth / 2);" & vbCrLf)
        fsT.Writetext("            return Math.round(a)" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    })" & vbCrLf)
        fsT.Writetext("})();" & vbCrLf)


        'fin
        fsT.SaveToFile(fileName, 2) 'Save binary data To disk
        fsT = Nothing


    End Sub

    Public Sub CreateStyle_CSS()

        Dim fsT As Object
        Dim fileName As String

        fsT = CreateObject("ADODB.Stream")
        fsT.Type = 2 'Specify stream type - we want To save text/string data.
        fsT.Charset = "utf-8" 'Specify charset For the source text data.
        fsT.Open() 'Open the stream And write binary data To the object

        fileName = SERVER_FOLDER_PATH & "style.css"

        fsT.Writetext("body {" & vbCrLf)
        fsT.Writetext("    font-family: Tahoma, Arial, Verdana;" & vbCrLf)
        fsT.Writetext("    font-size: 12px;" & vbCrLf)
        fsT.Writetext("    color: black;" & vbCrLf)
        fsT.Writetext("}" & vbCrLf)
        fsT.Writetext("a:link {" & vbCrLf)
        fsT.Writetext("    color: #84c4e2;" & vbCrLf)
        fsT.Writetext("}" & vbCrLf)
        fsT.Writetext("a:visited {" & vbCrLf)
        fsT.Writetext("    color:#84c4e2;" & vbCrLf)
        fsT.Writetext("}" & vbCrLf)
        fsT.Writetext("a:hover {" & vbCrLf)
        fsT.Writetext("    color: #cd82ad;" & vbCrLf)
        fsT.Writetext("}" & vbCrLf)
        fsT.Writetext("a:active {" & vbCrLf)
        fsT.Writetext("    color: #84c4e2;" & vbCrLf)
        fsT.Writetext("}" & vbCrLf)

        'fin
        fsT.SaveToFile(fileName, 2) 'Save binary data To disk
        fsT = Nothing
    End Sub


    Public Sub CreatePie_JS()
        Dim fsT As Object
        Dim fileName As String

        fsT = CreateObject("ADODB.Stream")
        fsT.Type = 2 'Specify stream type - we want To save text/string data.
        fsT.Charset = "utf-8" 'Specify charset For the source text data.
        fsT.Open() 'Open the stream And write binary data To the object

        fileName = SERVER_FOLDER_PATH & "pie.js"

        fsT.Writetext("(function () {" & vbCrLf)
        fsT.Writetext("    var h = window.AmCharts;" & vbCrLf)
        fsT.Writetext("    h.AmPieChart = h.Class({" & vbCrLf)
        fsT.Writetext("        inherits: h.AmSlicedChart," & vbCrLf)
        fsT.Writetext("        construct: function (d) {" & vbCrLf)
        fsT.Writetext("            this.type = " & Chr(34) & "pie" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            h.AmPieChart.base.construct.call(this, d);" & vbCrLf)
        fsT.Writetext("            this.cname = " & Chr(34) & "AmPieChart" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.pieBrightnessStep = 30;" & vbCrLf)
        fsT.Writetext("            this.minRadius = 10;" & vbCrLf)
        fsT.Writetext("            this.depth3D = 0;" & vbCrLf)
        fsT.Writetext("            this.startAngle = 90;" & vbCrLf)
        fsT.Writetext("            this.angle = this.innerRadius = 0;" & vbCrLf)
        fsT.Writetext("            this.startRadius = " & Chr(34) & "500%" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.pullOutRadius = " & Chr(34) & "20%" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.labelRadius = 20;" & vbCrLf)
        fsT.Writetext("            this.labelText = " & Chr(34) & "[[title]]: [[percents]]%" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.balloonText = " & Chr(34) & "[[title]]: [[percents]]% ([[value]])\n[[description]]" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("            this.previousScale = 1;" & vbCrLf)
        fsT.Writetext("            this.adjustPrecision = !1;" & vbCrLf)
        fsT.Writetext("            h.applyTheme(this, d, this.cname)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        drawChart: function () {" & vbCrLf)
        fsT.Writetext("            h.AmPieChart.base.drawChart.call(this);" & vbCrLf)
        fsT.Writetext("            var d = this.chartData;" & vbCrLf)
        fsT.Writetext("            if (h.ifArray(d)) {" & vbCrLf)
        fsT.Writetext("                if (0 < this.realWidth && 0 < this.realHeight) {" & vbCrLf)
        fsT.Writetext("                    h.VML && (this.startAlpha = 1);" & vbCrLf)
        fsT.Writetext("                    var f = this.startDuration," & vbCrLf)
        fsT.Writetext("                        c = this.container," & vbCrLf)
        fsT.Writetext("                        b = this.updateWidth();" & vbCrLf)
        fsT.Writetext("                    this.realWidth = b;" & vbCrLf)
        fsT.Writetext("                    var m = this.updateHeight();" & vbCrLf)
        fsT.Writetext("                    this.realHeight = m;" & vbCrLf)
        fsT.Writetext("                    var e = h.toCoordinate," & vbCrLf)
        fsT.Writetext("                        k = e(this.marginLeft, b)," & vbCrLf)
        fsT.Writetext("                        a = e(this.marginRight, b)," & vbCrLf)
        fsT.Writetext("                        v = e(this.marginTop, m) + this.getTitleHeight()," & vbCrLf)
        fsT.Writetext("                        n = e(this.marginBottom, m)," & vbCrLf)
        fsT.Writetext("                        y, z, g, x = h.toNumber(this.labelRadius)," & vbCrLf)
        fsT.Writetext("                        q = this.measureMaxLabel();" & vbCrLf)
        fsT.Writetext("                    q > this.maxLabelWidth && (q = this.maxLabelWidth);" & vbCrLf)
        fsT.Writetext("                    this.labelText && this.labelsEnabled || (x = q = 0);" & vbCrLf)
        fsT.Writetext("                    y = void 0 === this.pieX ? (b - k - a) / 2 + k : e(this.pieX, this.realWidth);" & vbCrLf)
        fsT.Writetext("                    z = void 0 === this.pieY ? (m - v - n) / 2 + v : e(this.pieY, m);" & vbCrLf)
        fsT.Writetext("                    g = e(this.radius, b, m);" & vbCrLf)
        fsT.Writetext("                    g || (b = 0 <= x ? b - k - a - 2 * q : b - k - a, m = m - v - n, g = Math.min(b, m), m < b && (g /= 1 - this.angle / 90, g > b && (g = b)), m = h.toCoordinate(this.pullOutRadius, g), g = (0 <= x ? g - 1.8 * (x + m) : g - 1.8 * m) / 2);" & vbCrLf)
        fsT.Writetext("                    g < this.minRadius && (g = this.minRadius);" & vbCrLf)
        fsT.Writetext("                    m = e(this.pullOutRadius, g);" & vbCrLf)
        fsT.Writetext("                    v = h.toCoordinate(this.startRadius, g);" & vbCrLf)
        fsT.Writetext("                    e = e(this.innerRadius, g);" & vbCrLf)
        fsT.Writetext("                    e >= g && (e = g - 1);" & vbCrLf)
        fsT.Writetext("                    n = h.fitToBounds(this.startAngle, 0, 360);" & vbCrLf)
        fsT.Writetext("                    0 < this.depth3D && (n = 270 <= n ? 270 : 90);" & vbCrLf)
        fsT.Writetext("                    n -= 90;" & vbCrLf)
        fsT.Writetext("                    b = g - g * this.angle / 90;" & vbCrLf)
        fsT.Writetext("                    for (k = q = 0; k < d.length; k++) a = d[k], !0 !== a.hidden && (q += h.roundTo(a.percents, this.pf.precision));" & vbCrLf)
        fsT.Writetext("                    q = h.roundTo(q, this.pf.precision);" & vbCrLf)
        fsT.Writetext("                    this.tempPrec = NaN;" & vbCrLf)
        fsT.Writetext("                    this.adjustPrecision && 100 != q && (this.tempPrec = this.pf.precision + 1);" & vbCrLf)
        fsT.Writetext("                    for (k = 0; k < d.length; k++) if (a = d[k], !0 !== a.hidden && 0 < a.percents) {" & vbCrLf)
        fsT.Writetext("                        var r = 360 * a.percents / 100," & vbCrLf)
        fsT.Writetext("                            q = Math.sin((n + r / 2) / 180 * Math.PI)," & vbCrLf)
        fsT.Writetext("                            A = -Math.cos((n + r / 2) / 180 * Math.PI) * (b / g)," & vbCrLf)
        fsT.Writetext("                            p = this.outlineColor;" & vbCrLf)
        fsT.Writetext("                        p || (p = a.color);" & vbCrLf)
        fsT.Writetext("                        var B = this.alpha;" & vbCrLf)
        fsT.Writetext("                        isNaN(a.alpha) || (B = a.alpha);" & vbCrLf)
        fsT.Writetext("                        p = {" & vbCrLf)
        fsT.Writetext("                            fill: a.color," & vbCrLf)
        fsT.Writetext("                            stroke: p," & vbCrLf)
        fsT.Writetext("                            " & Chr(34) & "stroke-width" & Chr(34) & ": this.outlineThickness," & vbCrLf)
        fsT.Writetext("                            " & Chr(34) & "stroke-opacity" & Chr(34) & ": this.outlineAlpha," & vbCrLf)
        fsT.Writetext("                            " & Chr(34) & "fill-opacity" & Chr(34) & ": B" & vbCrLf)
        fsT.Writetext("                        };" & vbCrLf)
        fsT.Writetext("                        a.url && (p.cursor = " & Chr(34) & "pointer" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                        p = h.wedge(c, y, z, n, r, g, b, e, this.depth3D, p, this.gradientRatio, a.pattern, this.path);" & vbCrLf)
        fsT.Writetext("                        h.setCN(this, p, " & Chr(34) & "pie-item" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                        h.setCN(this, p.wedge, " & Chr(34) & "pie-slice" & Chr(34) & ");" & vbCrLf)
        fsT.Writetext("                        h.setCN(this, p, a.className, !0);" & vbCrLf)
        fsT.Writetext("                        this.addEventListeners(p, a);" & vbCrLf)
        fsT.Writetext("                        a.startAngle = n;" & vbCrLf)
        fsT.Writetext("                        d[k].wedge = p;" & vbCrLf)
        fsT.Writetext("                        0 < f && (this.chartCreated || p.setAttr(" & Chr(34) & "opacity" & Chr(34) & ", this.startAlpha));" & vbCrLf)
        fsT.Writetext("                        a.ix = q;" & vbCrLf)
        fsT.Writetext("                        a.iy = A;" & vbCrLf)
        fsT.Writetext("                        a.wedge = p;" & vbCrLf)
        fsT.Writetext("                        a.index = k;" & vbCrLf)
        fsT.Writetext("                        if (this.labelsEnabled && this.labelText && a.percents >= this.hideLabelsPercent) {" & vbCrLf)
        fsT.Writetext("                            var l = n + r / 2;" & vbCrLf)
        fsT.Writetext("                            360 < l && (l -= 360);" & vbCrLf)
        fsT.Writetext("                            var t = x;" & vbCrLf)
        fsT.Writetext("                            isNaN(a.labelRadius) || (t = a.labelRadius);" & vbCrLf)
        fsT.Writetext("                            var r = y + q * (g + t)," & vbCrLf)
        fsT.Writetext("                                B = z + A * (g + t)," & vbCrLf)
        fsT.Writetext("                                C, w = 0;" & vbCrLf)
        fsT.Writetext("                            if (0 <= t) {" & vbCrLf)
        fsT.Writetext("                                var D;" & vbCrLf)
        fsT.Writetext("                                90 >= l && 0 <= l ? (D = 0, C = " & Chr(34) & "start" & Chr(34) & ", w = 8) : 90 <= l && 180 > l ? (D = 1, C = " & Chr(34) & "start" & Chr(34) & ", w = 8) : 180 <= l && 270 > l ? (D = 2, C = " & Chr(34) & "end" & Chr(34) & ", w = -8) : 270 <= l && 360 > l && (D = 3, C = " & Chr(34) & "end" & Chr(34) & ", w = -8);" & vbCrLf)
        fsT.Writetext("                                a.labelQuarter = D" & vbCrLf)
        fsT.Writetext("                            } else C = " & Chr(34) & "middle" & Chr(34) & ";" & vbCrLf)
        fsT.Writetext("                            var l = this.formatString(this.labelText, a)," & vbCrLf)
        fsT.Writetext("                                u = this.labelFunction;" & vbCrLf)
        fsT.Writetext("                            u && (l = u(a, l));" & vbCrLf)
        fsT.Writetext("                            u = a.labelColor;" & vbCrLf)
        fsT.Writetext("                            u || (u = this.color);" & vbCrLf)
        fsT.Writetext("                            " & Chr(34) & "" & Chr(34) & " !== l && (l = h.wrappedText(c, l, u, this.fontFamily, this.fontSize, C, !1, this.maxLabelWidth), h.setCN(this, l, " & Chr(34) & "pie-label" & Chr(34) & "), h.setCN(this, l, a.className, !0), l.translate(r + 1.5 * w, B), l.node.style.pointerEvents = " & Chr(34) & "none" & Chr(34) & ", a.tx = r + 1.5 * w, a.ty = B, 0 <= t ? (t = l.getBBox(), u = h.rect(c, t.width + 5, t.height + 5, " & Chr(34) & "#FFFFFF" & Chr(34) & ", .005), u.translate(r + 1.5 * w + t.x, B + t.y), a.hitRect = u, p.push(l), p.push(u)) : this.freeLabelsSet.push(l), a.label = l);" & vbCrLf)
        fsT.Writetext("                            a.tx = r;" & vbCrLf)
        fsT.Writetext("                            a.tx2 = r + w;" & vbCrLf)
        fsT.Writetext("                            a.tx0 = y + q * g;" & vbCrLf)
        fsT.Writetext("                            a.ty0 = z + A * g" & vbCrLf)
        fsT.Writetext("                        }" & vbCrLf)
        fsT.Writetext("                        r = e + (g - e) / 2;" & vbCrLf)
        fsT.Writetext("                        a.pulled && (r += this.pullOutRadiusReal);" & vbCrLf)
        fsT.Writetext("                        a.balloonX = q * r + y;" & vbCrLf)
        fsT.Writetext("                        a.balloonY = A * r + z;" & vbCrLf)
        fsT.Writetext("                        a.startX = Math.round(q * v);" & vbCrLf)
        fsT.Writetext("                        a.startY = Math.round(A * v);" & vbCrLf)
        fsT.Writetext("                        a.pullX = Math.round(q * m);" & vbCrLf)
        fsT.Writetext("                        a.pullY = Math.round(A * m);" & vbCrLf)
        fsT.Writetext("                        this.graphsSet.push(p);" & vbCrLf)
        fsT.Writetext("                        (0 === a.alpha || 0 < f && !this.chartCreated) && p.hide();" & vbCrLf)
        fsT.Writetext("                        n += 360 * a.percents / 100" & vbCrLf)
        fsT.Writetext("                    }" & vbCrLf)
        fsT.Writetext("                    0 < x && !this.labelRadiusField && this.arrangeLabels();" & vbCrLf)
        fsT.Writetext("                    this.pieXReal = y;" & vbCrLf)
        fsT.Writetext("                    this.pieYReal = z;" & vbCrLf)
        fsT.Writetext("                    this.radiusReal = g;" & vbCrLf)
        fsT.Writetext("                    this.innerRadiusReal = e;" & vbCrLf)
        fsT.Writetext("                    0 < x && this.drawTicks();" & vbCrLf)
        fsT.Writetext("                    this.initialStart();" & vbCrLf)
        fsT.Writetext("                    this.setDepths()" & vbCrLf)
        fsT.Writetext("                }(d = this.legend) && d.invalidateSize()" & vbCrLf)
        fsT.Writetext("            } else this.cleanChart();" & vbCrLf)
        fsT.Writetext("            this.dispDUpd();" & vbCrLf)
        fsT.Writetext("            this.chartCreated = !0" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        setDepths: function () {" & vbCrLf)
        fsT.Writetext("            var d = this.chartData," & vbCrLf)
        fsT.Writetext("                f;" & vbCrLf)
        fsT.Writetext("            for (f = 0; f < d.length; f++) {" & vbCrLf)
        fsT.Writetext("                var c = d[f]," & vbCrLf)
        fsT.Writetext("                    b = c.wedge," & vbCrLf)
        fsT.Writetext("                    c = c.startAngle;" & vbCrLf)
        fsT.Writetext("                0 <= c && 180 > c ? b.toFront() : 180 <= c && b.toBack()" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        arrangeLabels: function () {" & vbCrLf)
        fsT.Writetext("            var d = this.chartData," & vbCrLf)
        fsT.Writetext("                f = d.length," & vbCrLf)
        fsT.Writetext("                c, b;" & vbCrLf)
        fsT.Writetext("            for (b = f - 1; 0 <= b; b--) c = d[b], 0 !== c.labelQuarter || c.hidden || this.checkOverlapping(b, c, 0, !0, 0);" & vbCrLf)
        fsT.Writetext("            for (b = 0; b < f; b++) c = d[b], 1 != c.labelQuarter || c.hidden || this.checkOverlapping(b, c, 1, !1, 0);" & vbCrLf)
        fsT.Writetext("            for (b = f - 1; 0 <= b; b--) c = d[b], 2 != c.labelQuarter || c.hidden || this.checkOverlapping(b, c, 2, !0, 0);" & vbCrLf)
        fsT.Writetext("            for (b = 0; b < f; b++) c = d[b], 3 != c.labelQuarter || c.hidden || this.checkOverlapping(b," & vbCrLf)
        fsT.Writetext("            c, 3, !1, 0)" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        checkOverlapping: function (d, f, c, b, h) {" & vbCrLf)
        fsT.Writetext("            var e, k, a = this.chartData," & vbCrLf)
        fsT.Writetext("                v = a.length," & vbCrLf)
        fsT.Writetext("                n = f.label;" & vbCrLf)
        fsT.Writetext("            if (n) {" & vbCrLf)
        fsT.Writetext("                if (!0 === b) for (k = d + 1; k < v; k++) a[k].labelQuarter == c && (e = this.checkOverlappingReal(f, a[k], c)) && (k = v);" & vbCrLf)
        fsT.Writetext("                else for (k = d - 1; 0 <= k; k--) a[k].labelQuarter == c && (e = this.checkOverlappingReal(f, a[k], c)) && (k = 0);" & vbCrLf)
        fsT.Writetext("                !0 === e && 100 > h && (e = f.ty + 3 * f.iy, f.ty = e, n.translate(f.tx2, e), f.hitRect && (n = n.getBBox(), f.hitRect.translate(f.tx2 + n.x, e + n.y)), this.checkOverlapping(d, f, c, b, h + 1))" & vbCrLf)
        fsT.Writetext("            }" & vbCrLf)
        fsT.Writetext("        }," & vbCrLf)
        fsT.Writetext("        checkOverlappingReal: function (d, f, c) {" & vbCrLf)
        fsT.Writetext("            var b = !1," & vbCrLf)
        fsT.Writetext("                m = d.label," & vbCrLf)
        fsT.Writetext("                e = f.label;" & vbCrLf)
        fsT.Writetext("            d.labelQuarter != c || d.hidden || f.hidden || !e || (m = m.getBBox(), c = {}, c.width = m.width, c.height = m.height, c.y = d.ty, c.x = d.tx, d = e.getBBox(), e = {}, e.width = d.width, e.height = d.height, e.y = f.ty, e.x = f.tx, h.hitTest(c, e) && (b = !0));" & vbCrLf)
        fsT.Writetext("            return b" & vbCrLf)
        fsT.Writetext("        }" & vbCrLf)
        fsT.Writetext("    })" & vbCrLf)
        fsT.Writetext("})();" & vbCrLf)

        fsT.SaveToFile(fileName, 2) 'Save binary data To disk
        fsT = Nothing
    End Sub

    Public Sub DownloadPieJSFiles()
        Try
            If My.Computer.Network.Ping("prstory.pg.com") Then

                Dim sourcewebaddress1 As Uri = New Uri("http://prstory.pg.com/JavaScriptforAmCharts/pie.js")
                Dim destinationfolderaddress1 As String = "C:/Users/Public/prstory/html/pie.js"
                My.Computer.Network.DownloadFile(sourcewebaddress1, destinationfolderaddress1, "", "", False, 10000, True)
            End If
        Catch ex As Exception


        End Try

    End Sub


    Public Sub DownloadJSFiles()
        If False Then
            If My.Computer.Network.Ping("prstory.pg.com") Then

                Dim sourcewebaddress1 As Uri = New Uri("http://prstory.pg.com/JavaScriptforAmCharts/export.js")
                Dim destinationfolderaddress1 As String = "C:/Users/Public/prstory/html/export.js"
                My.Computer.Network.DownloadFile(sourcewebaddress1, destinationfolderaddress1, "", "", False, 10000, True)

                Dim sourcewebaddress2 As Uri = New Uri("http://prstory.pg.com/JavaScriptforAmCharts/fabric.js")
                Dim destinationfolderaddress2 As String = "C:/Users/Public/prstory/html/fabric.js"
                My.Computer.Network.DownloadFile(sourcewebaddress2, destinationfolderaddress2, "", "", False, 10000, True)

                Dim sourcewebaddress3 As Uri = New Uri("http://prstory.pg.com/JavaScriptforAmCharts/FileSaver.js")
                Dim destinationfolderaddress3 As String = "C:/Users/Public/prstory/html/FileSaver.js"
                My.Computer.Network.DownloadFile(sourcewebaddress3, destinationfolderaddress3, "", "", False, 10000, True)

                Dim sourcewebaddress4 As Uri = New Uri("http://prstory.pg.com/JavaScriptforAmCharts/jsZip.js")
                Dim destinationfolderaddress4 As String = "C:/Users/Public/prstory/html/jsZip.js"
                My.Computer.Network.DownloadFile(sourcewebaddress4, destinationfolderaddress4, "", "", False, 10000, True)

                Dim sourcewebaddress5 As Uri = New Uri("http://prstory.pg.com/JavaScriptforAmCharts/pdfmake.js")
                Dim destinationfolderaddress5 As String = "C:/Users/Public/prstory/html/pdfmake.js"
                My.Computer.Network.DownloadFile(sourcewebaddress5, destinationfolderaddress5, "", "", False, 10000, True)

                Dim sourcewebaddress6 As Uri = New Uri("http://prstory.pg.com/JavaScriptforAmCharts/vfs_fonts.js")
                Dim destinationfolderaddress6 As String = "C:/Users/Public/prstory/html/vfs_fonts.js"
                My.Computer.Network.DownloadFile(sourcewebaddress6, destinationfolderaddress6, "", "", False, 10000, True)

                Dim sourcewebaddress7 As Uri = New Uri("http://prstory.pg.com/JavaScriptforAmCharts/xlsx.js")
                Dim destinationfolderaddress7 As String = "C:/Users/Public/prstory/html/xlsx.js"
                My.Computer.Network.DownloadFile(sourcewebaddress7, destinationfolderaddress7, "", "", False, 10000, True)
            End If
        End If
    End Sub



End Module


